# ABOUTME: Smart monorepo workflow with change detection and selective builds
# ABOUTME: Only builds and tests packages that have changed, improving CI efficiency

name: Smart Monorepo Build

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ main ]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      anglesite: ${{ steps.changes.outputs.anglesite }}
      anglesite-11ty: ${{ steps.changes.outputs.anglesite-11ty }}
      anglesite-starter: ${{ steps.changes.outputs.anglesite-starter }}
      web-components: ${{ steps.changes.outputs.web-components }}
      root: ${{ steps.changes.outputs.root }}
      any-package: ${{ steps.changes.outputs.anglesite == 'true' || steps.changes.outputs.anglesite-11ty == 'true' || steps.changes.outputs.anglesite-starter == 'true' || steps.changes.outputs.web-components == 'true' }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for change detection
    
    - uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          anglesite:
            - 'anglesite/**'
            - 'package.json'
            - 'package-lock.json'
          anglesite-11ty:
            - 'anglesite-11ty/**'
            - 'package.json'
            - 'package-lock.json'
          anglesite-starter:
            - 'anglesite-starter/**'
            - 'package.json'
            - 'package-lock.json'
          web-components:
            - 'web-components/**'
            - 'package.json'
            - 'package-lock.json'
          root:
            - 'package.json'
            - 'package-lock.json'
            - '.github/workflows/**'
            - 'jest.*.js'
            - '*.config.*'

  security-scan:
    needs: detect-changes
    if: needs.detect-changes.outputs.any-package == 'true' || needs.detect-changes.outputs.root == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    
    - name: Cache build outputs
      uses: actions/cache@v4
      with:
        path: |
          .cache
          **/dist
          **/build
          **/.next
        key: monorepo-build-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/tsconfig.json') }}
        restore-keys: |
          monorepo-build-${{ runner.os }}-
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=high

  anglesite-build:
    needs: [detect-changes, security-scan]
    if: needs.detect-changes.outputs.anglesite == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    
    - name: Cache Anglesite builds
      uses: actions/cache@v4
      with:
        path: |
          .cache/typescript/anglesite.tsbuildinfo
          .cache/webpack/anglesite
          anglesite/dist
          anglesite/build
          anglesite/app/renderer-wrapper.js
          anglesite/app/theme-renderer.js
        key: anglesite-${{ runner.os }}-node${{ matrix.node-version }}-${{ hashFiles('anglesite/**', '**/package-lock.json') }}
        restore-keys: |
          anglesite-${{ runner.os }}-node${{ matrix.node-version }}-
          anglesite-${{ runner.os }}-
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint Anglesite
      working-directory: ./anglesite
      run: npm run lint
    
    - name: Test Anglesite
      working-directory: ./anglesite
      run: npm test
    
    - name: Build Anglesite
      working-directory: ./anglesite
      run: npm run build

  anglesite-11ty-build:
    needs: [detect-changes, security-scan]
    if: needs.detect-changes.outputs.anglesite-11ty == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    
    - name: Cache anglesite-11ty builds
      uses: actions/cache@v4
      with:
        path: |
          .cache/typescript/anglesite-11ty.tsbuildinfo
          .cache/eleventy/anglesite-11ty
          anglesite-11ty/dist
          anglesite-11ty/build
        key: anglesite-11ty-${{ runner.os }}-node${{ matrix.node-version }}-${{ hashFiles('anglesite-11ty/**', '**/package-lock.json') }}
        restore-keys: |
          anglesite-11ty-${{ runner.os }}-node${{ matrix.node-version }}-
          anglesite-11ty-${{ runner.os }}-
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint anglesite-11ty
      working-directory: ./anglesite-11ty
      run: npm run lint
    
    - name: Test anglesite-11ty
      working-directory: ./anglesite-11ty
      run: npm test
    
    - name: Build anglesite-11ty
      working-directory: ./anglesite-11ty
      run: npm run build

  anglesite-starter-build:
    needs: [detect-changes, security-scan]
    if: needs.detect-changes.outputs.anglesite-starter == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Validate anglesite-starter
      working-directory: ./anglesite-starter
      run: |
        # Check package.json structure
        node -e "const pkg = require('./package.json'); console.log('Package validated:', pkg.name)"
        
        # Validate any configuration files
        if [ -f "package.json" ]; then
          echo "✅ Package structure valid"
        fi

  web-components-build:
    needs: [detect-changes, security-scan]
    if: needs.detect-changes.outputs.web-components == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Validate web-components
      working-directory: ./web-components
      run: |
        # Check package.json structure
        node -e "const pkg = require('./package.json'); console.log('Package validated:', pkg.name)"
        
        # Validate WebC component structure if any exist
        if find . -name "*.webc" -type f | head -1 > /dev/null; then
          echo "✅ WebC components found"
        else
          echo "ℹ️ No WebC components yet"
        fi

  integration-tests:
    needs: [detect-changes, anglesite-build, anglesite-11ty-build]
    if: always() && (needs.detect-changes.outputs.anglesite == 'true' || needs.detect-changes.outputs.anglesite-11ty == 'true')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    
    - name: Cache integration test outputs
      uses: actions/cache@v4
      with:
        path: |
          .cache/jest-integration
          coverage/integration
          **/coverage/integration
        key: integration-${{ runner.os }}-${{ hashFiles('**/jest.integration.config.js', '**/package.json') }}
        restore-keys: |
          integration-${{ runner.os }}-
    
    - name: Install dependencies
      run: npm ci
    
    - name: Wait for all builds to complete
      run: |
        echo "Waiting for all package builds to stabilize before integration tests..."
        
        # Wait for Anglesite builds if they were triggered
        if [[ "${{ needs.detect-changes.outputs.anglesite }}" == "true" ]]; then
          timeout 300 bash -c 'while ! ls anglesite/dist/*.js >/dev/null 2>&1 && ! ls anglesite/build/*.js >/dev/null 2>&1; do
            echo "Waiting for Anglesite build artifacts...";
            sleep 5;
          done' || echo "Warning: Anglesite build artifacts not found"
        fi
        
        # Wait for anglesite-11ty builds if they were triggered  
        if [[ "${{ needs.detect-changes.outputs.anglesite-11ty }}" == "true" ]]; then
          timeout 180 bash -c 'while [ -d "anglesite-11ty" ] && ! ls anglesite-11ty/dist/*.js >/dev/null 2>&1; do
            echo "Waiting for anglesite-11ty build artifacts...";
            sleep 5;
          done' || echo "Warning: anglesite-11ty build artifacts not found"
        fi
        
        echo "Build synchronization complete"
    
    - name: Cross-package integration tests with retry
      uses: nick-invision/retry@v2
      with:
        timeout_minutes: 10
        max_attempts: 3
        retry_wait_seconds: 15
        shell: bash
        command: |
          echo "## Integration Test Results (Attempt #${{ github.run_attempt || '1' }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Kill any existing processes that might interfere
          pkill -f "electron" || true
          pkill -f "jest" || true
          sleep 2
          
          # Test anglesite + anglesite-11ty integration if both are affected
          if [[ "${{ needs.detect-changes.outputs.anglesite }}" == "true" && "${{ needs.detect-changes.outputs.anglesite-11ty }}" == "true" ]]; then
            echo "🔗 Testing Anglesite + anglesite-11ty integration" >> $GITHUB_STEP_SUMMARY
            echo "Running cross-package integration test..."
            
            # Retry logic for cross-package integration
            for i in {1..3}; do
              if npm run test:integration --workspace=anglesite --if-present; then
                echo "✅ Cross-package integration test passed on attempt $i" >> $GITHUB_STEP_SUMMARY
                break
              else
                if [ $i -lt 3 ]; then
                  echo "⚠️ Integration test attempt $i failed, retrying..." >> $GITHUB_STEP_SUMMARY
                  sleep 10
                else
                  echo "❌ Cross-package integration test failed after 3 attempts" >> $GITHUB_STEP_SUMMARY
                  exit 1
                fi
              fi
            done
          fi
          
          # Test each package's integration tests with retry
          if [[ "${{ needs.detect-changes.outputs.anglesite }}" == "true" ]]; then
            echo "🧪 Running Anglesite integration tests" >> $GITHUB_STEP_SUMMARY
            cd anglesite
            
            for i in {1..2}; do
              if npm run test:integration --if-present; then
                echo "✅ Anglesite integration tests passed on attempt $i" >> $GITHUB_STEP_SUMMARY
                break
              else
                if [ $i -lt 2 ]; then
                  echo "⚠️ Anglesite integration test attempt $i failed, retrying..." >> $GITHUB_STEP_SUMMARY
                  sleep 5
                else
                  echo "❌ Anglesite integration tests failed after 2 attempts" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            done
            cd ..
          fi
          
          if [[ "${{ needs.detect-changes.outputs.anglesite-11ty }}" == "true" ]]; then
            echo "🧪 Running anglesite-11ty integration tests" >> $GITHUB_STEP_SUMMARY
            cd anglesite-11ty
            
            for i in {1..2}; do
              if npm run test:integration --if-present; then
                echo "✅ anglesite-11ty integration tests passed on attempt $i" >> $GITHUB_STEP_SUMMARY
                break
              else
                if [ $i -lt 2 ]; then
                  echo "⚠️ anglesite-11ty integration test attempt $i failed, retrying..." >> $GITHUB_STEP_SUMMARY
                  sleep 5
                else
                  echo "❌ anglesite-11ty integration tests failed after 2 attempts" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            done
            cd ..
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Integration test run completed at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
      continue-on-error: true

  summary:
    needs: [detect-changes, security-scan, anglesite-build, anglesite-11ty-build, anglesite-starter-build, web-components-build, integration-tests]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Build Summary
      run: |
        echo "## Smart Monorepo Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Changes Detected:" >> $GITHUB_STEP_SUMMARY
        echo "- Anglesite: ${{ needs.detect-changes.outputs.anglesite }}" >> $GITHUB_STEP_SUMMARY
        echo "- Anglesite-11ty: ${{ needs.detect-changes.outputs.anglesite-11ty }}" >> $GITHUB_STEP_SUMMARY
        echo "- Anglesite-starter: ${{ needs.detect-changes.outputs.anglesite-starter }}" >> $GITHUB_STEP_SUMMARY
        echo "- Web-components: ${{ needs.detect-changes.outputs.web-components }}" >> $GITHUB_STEP_SUMMARY
        echo "- Root config: ${{ needs.detect-changes.outputs.root }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Anglesite Build: ${{ needs.anglesite-build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Anglesite-11ty Build: ${{ needs.anglesite-11ty-build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Anglesite-starter Build: ${{ needs.anglesite-starter-build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Web-components Build: ${{ needs.web-components-build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY