# ABOUTME: Secrets validation workflow for testing NPM token and repository configuration
# ABOUTME: Provides manual trigger to validate secrets setup without performing actual releases

name: Validate Secrets

on:
  workflow_dispatch:
    inputs:
      check_npm_auth:
        description: 'Test NPM authentication'
        required: false
        default: true
        type: boolean
      check_org_access:
        description: 'Check @dwk organization access'
        required: false
        default: true
        type: boolean
      dry_run_publish:
        description: 'Perform dry-run NPM publish'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  actions: read

jobs:
  validate-secrets:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check NPM_TOKEN secret exists
      run: |
        echo "## 🔐 Secrets Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -z "$NPM_TOKEN" ]; then
          echo "❌ NPM_TOKEN secret is not set" >> $GITHUB_STEP_SUMMARY
          echo "::error::NPM_TOKEN secret is missing"
          exit 1
        else
          echo "✅ NPM_TOKEN secret is configured" >> $GITHUB_STEP_SUMMARY
          
          # Basic token format validation
          if [[ ${#NPM_TOKEN} -lt 20 ]]; then
            echo "⚠️ NPM_TOKEN appears too short (${#NPM_TOKEN} characters)" >> $GITHUB_STEP_SUMMARY
            echo "::warning::NPM_TOKEN may be invalid - too short"
          else
            echo "✅ NPM_TOKEN has reasonable length (${#NPM_TOKEN} characters)" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "$NPM_TOKEN" == npm_* ]]; then
            echo "✅ NPM_TOKEN uses modern format (npm_...)" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ NPM_TOKEN may be using legacy format" >> $GITHUB_STEP_SUMMARY
          fi
        fi
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Test NPM authentication
      if: github.event.inputs.check_npm_auth != 'false'
      run: |
        echo "### NPM Authentication Test" >> $GITHUB_STEP_SUMMARY
        
        # Test whoami
        if npm whoami; then
          username=$(npm whoami)
          echo "✅ Authenticated as NPM user: \`$username\`" >> $GITHUB_STEP_SUMMARY
          echo "NPM_USERNAME=$username" >> $GITHUB_ENV
        else
          echo "❌ NPM authentication failed" >> $GITHUB_STEP_SUMMARY
          echo "::error::Could not authenticate with NPM"
          exit 1
        fi
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Check organization access
      if: github.event.inputs.check_org_access != 'false'
      run: |
        echo "### Organization Access Check" >> $GITHUB_STEP_SUMMARY
        
        # Check general organization access
        echo "**Organizations accessible:**" >> $GITHUB_STEP_SUMMARY
        if orgs=$(npm org ls 2>/dev/null); then
          if [ -n "$orgs" ]; then
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "$orgs" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "_No organizations found_" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "_Could not list organizations_" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check @dwk organization specifically
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**@dwk Organization Access:**" >> $GITHUB_STEP_SUMMARY
        if dwk_access=$(npm access list packages @dwk 2>/dev/null); then
          if [ -n "$dwk_access" ]; then
            echo "✅ Have access to @dwk organization" >> $GITHUB_STEP_SUMMARY
            echo "<details><summary>Accessible @dwk packages</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "$dwk_access" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ @dwk organization exists but no packages accessible" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "❌ No access to @dwk organization" >> $GITHUB_STEP_SUMMARY
          echo "::warning::@dwk organization access needed for publishing"
        fi
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Validate package configurations
      run: |
        echo "### Package Configuration Validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        packages=("anglesite-11ty" "anglesite-starter" "web-components")
        all_valid=true
        
        for pkg in "${packages[@]}"; do
          if [ -f "$pkg/package.json" ]; then
            name=$(jq -r '.name' "$pkg/package.json")
            version=$(jq -r '.version' "$pkg/package.json")
            access=$(jq -r '.publishConfig.access // "undefined"' "$pkg/package.json")
            
            echo "**$pkg:**" >> $GITHUB_STEP_SUMMARY
            
            if [[ "$name" == @dwk/* ]]; then
              echo "  ✅ Name: \`$name\` (correctly scoped)" >> $GITHUB_STEP_SUMMARY
            else
              echo "  ❌ Name: \`$name\` (not scoped to @dwk)" >> $GITHUB_STEP_SUMMARY
              all_valid=false
            fi
            
            echo "  📦 Version: \`$version\`" >> $GITHUB_STEP_SUMMARY
            
            if [ "$access" = "public" ]; then
              echo "  ✅ Access: \`$access\`" >> $GITHUB_STEP_SUMMARY
            elif [ "$access" = "undefined" ]; then
              echo "  ⚠️ Access: _not configured_ (will use default)" >> $GITHUB_STEP_SUMMARY
            else
              echo "  ❌ Access: \`$access\` (should be 'public')" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "**$pkg:** ❌ package.json not found" >> $GITHUB_STEP_SUMMARY
            all_valid=false
          fi
        done
        
        if [ "$all_valid" = "true" ]; then
          echo "✅ All package configurations are valid" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Some package configurations need attention" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Dry run NPM publish
      if: github.event.inputs.dry_run_publish == 'true'
      run: |
        echo "### Dry Run Publish Test" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        packages=("anglesite-11ty" "anglesite-starter" "web-components")
        
        for pkg in "${packages[@]}"; do
          if [ -f "$pkg/package.json" ]; then
            echo "**Testing $pkg publish:**" >> $GITHUB_STEP_SUMMARY
            
            cd "$pkg"
            if npm publish --dry-run --access public 2>&1 | tee /tmp/publish-output; then
              echo "✅ Dry run successful" >> $GITHUB_STEP_SUMMARY
              
              # Extract size information from output
              if grep -q "package size:" /tmp/publish-output; then
                size_info=$(grep "package size:" /tmp/publish-output)
                echo "  📦 $size_info" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "❌ Dry run failed" >> $GITHUB_STEP_SUMMARY
              echo "<details><summary>Error details</summary>" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              cat /tmp/publish-output >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "</details>" >> $GITHUB_STEP_SUMMARY
            fi
            cd ..
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Run verification script
      run: |
        echo "### Verification Script Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "<details><summary>Full verification output</summary>" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        npm run verify-secrets 2>&1 >> $GITHUB_STEP_SUMMARY || true
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "</details>" >> $GITHUB_STEP_SUMMARY
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Generate setup recommendations
      if: always()
      run: |
        echo "## 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### If validation passed:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Your secrets are configured correctly" >> $GITHUB_STEP_SUMMARY
        echo "- 🚀 You can proceed with releases" >> $GITHUB_STEP_SUMMARY
        echo "- 📅 Set a reminder for token expiration" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### If validation failed:" >> $GITHUB_STEP_SUMMARY
        echo "- 📖 Review the [Secrets Setup Guide](../../blob/main/docs/SECRETS_SETUP_GUIDE.md)" >> $GITHUB_STEP_SUMMARY
        echo "- 🔧 Check the troubleshooting section for your specific error" >> $GITHUB_STEP_SUMMARY
        echo "- 🆘 Create an issue using the [Secrets Setup Help template](../../issues/new?template=secrets-setup-help.md)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Security reminders:" >> $GITHUB_STEP_SUMMARY
        echo "- 🔒 Never commit NPM tokens to the repository" >> $GITHUB_STEP_SUMMARY
        echo "- 🔄 Rotate tokens regularly (quarterly recommended)" >> $GITHUB_STEP_SUMMARY
        echo "- 👥 Review organization access periodically" >> $GITHUB_STEP_SUMMARY