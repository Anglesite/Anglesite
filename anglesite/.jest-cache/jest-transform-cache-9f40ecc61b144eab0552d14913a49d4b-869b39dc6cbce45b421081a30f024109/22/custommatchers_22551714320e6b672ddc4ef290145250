9709555e5c88aa73564819a317310cf7
"use strict";
/**
 * @file Custom Jest matchers for Anglesite tests
 *
 * These matchers reduce repetitive assertion patterns across the test suite
 * and provide more descriptive error messages for common test scenarios.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const matcher_types_1 = require("../types/matcher-types");
/**
 * Custom matcher: toCreateWindowSuccessfully.
 * Verifies that a function creates a window without throwing and returns a defined result.
 */
expect.extend({
    toCreateWindowSuccessfully(received) {
        let result;
        let error;
        try {
            result = received();
        }
        catch (e) {
            error = e;
        }
        const pass = !error && result !== undefined && result !== null;
        return {
            pass,
            message: () => {
                if (error) {
                    return `Expected function to create window successfully, but it threw: ${error.message}`;
                }
                if (result === undefined || result === null) {
                    return `Expected function to create window successfully, but it returned ${result}`;
                }
                return `Expected function not to create window successfully`;
            },
        };
    },
    /**
     * Custom matcher: toEmitEventSynchronously.
     * Verifies that a mock function triggers an event handler synchronously.
     */
    toEmitEventSynchronously(received, eventName) {
        const mockCalls = received.mock.calls;
        const eventHandler = mockCalls.find((call) => call[0] === eventName);
        const pass = eventHandler !== undefined && (0, matcher_types_1.isFunction)(eventHandler[1]);
        return {
            pass,
            message: () => {
                if (!eventHandler) {
                    return `Expected to emit "${eventName}" event, but no handler was registered`;
                }
                if (typeof eventHandler[1] !== 'function') {
                    return `Expected to emit "${eventName}" event with a function handler, but got ${typeof eventHandler[1]}`;
                }
                return `Expected not to emit "${eventName}" event synchronously`;
            },
        };
    },
    /**
     * Custom matcher: toExecuteWithoutError.
     * Verifies that a function executes without throwing.
     */
    toExecuteWithoutError(received) {
        let error;
        try {
            received();
        }
        catch (e) {
            error = e;
        }
        const pass = !error;
        return {
            pass,
            message: () => {
                if (error) {
                    return `Expected function to execute without error, but it threw: ${error.message}`;
                }
                return `Expected function to throw an error`;
            },
        };
    },
    /**
     * Custom matcher: toBeCalledWithPath.
     * Verifies that a mock was called with a path containing the expected string.
     */
    toBeCalledWithPath(received, expectedPath) {
        const calls = received.mock.calls;
        const pathCall = calls.find((call) => call.some((arg) => (0, matcher_types_1.isString)(arg) && arg.includes(expectedPath)));
        const pass = pathCall !== undefined;
        return {
            pass,
            message: () => {
                if (!pathCall) {
                    const actualPaths = calls
                        .flat()
                        .filter((arg) => (0, matcher_types_1.isString)(arg) && arg.includes('/'))
                        .join(', ');
                    return `Expected to be called with path containing "${expectedPath}"${actualPaths ? `, but was called with: ${actualPaths}` : ', but no paths were found'}`;
                }
                return `Expected not to be called with path containing "${expectedPath}"`;
            },
        };
    },
    /**
     * Custom matcher: toHaveWindowState.
     * Verifies that a window mock has specific state properties.
     */
    toHaveWindowState(received, expectedState) {
        const actualState = {};
        let mismatches = [];
        if (expectedState.destroyed !== undefined) {
            actualState.destroyed = received.isDestroyed?.() ?? false;
            if (actualState.destroyed !== expectedState.destroyed) {
                mismatches.push(`destroyed: expected ${expectedState.destroyed}, got ${actualState.destroyed}`);
            }
        }
        if (expectedState.maximized !== undefined) {
            actualState.maximized = received.isMaximized?.() ?? false;
            if (actualState.maximized !== expectedState.maximized) {
                mismatches.push(`maximized: expected ${expectedState.maximized}, got ${actualState.maximized}`);
            }
        }
        if (expectedState.focused !== undefined) {
            actualState.focused = received.isFocused?.() ?? false;
            if (actualState.focused !== expectedState.focused) {
                mismatches.push(`focused: expected ${expectedState.focused}, got ${actualState.focused}`);
            }
        }
        if (expectedState.title !== undefined) {
            actualState.title = received.getTitle?.() ?? '';
            if (actualState.title !== expectedState.title) {
                mismatches.push(`title: expected "${expectedState.title}", got "${actualState.title}"`);
            }
        }
        const pass = mismatches.length === 0;
        return {
            pass,
            message: () => {
                if (mismatches.length > 0) {
                    return `Expected window to have state:\n${mismatches.join('\n')}`;
                }
                return `Expected window not to have state: ${JSON.stringify(expectedState)}`;
            },
        };
    },
    /**
     * Custom matcher: toHandleIpcChannel.
     * Verifies that an IPC handler was registered for a specific channel.
     */
    toHandleIpcChannel(received, channel) {
        const calls = received.mock.calls;
        const channelHandler = calls.find((call) => call[0] === channel);
        const pass = channelHandler !== undefined;
        return {
            pass,
            message: () => {
                if (!channelHandler) {
                    const registeredChannels = calls
                        .map((call) => call[0])
                        .filter(Boolean)
                        .join(', ');
                    return `Expected to handle IPC channel "${channel}"${registeredChannels ? `, but only handles: ${registeredChannels}` : ', but no channels are handled'}`;
                }
                return `Expected not to handle IPC channel "${channel}"`;
            },
        };
    },
    /**
     * Custom matcher: toResolveSuccessfully.
     * Verifies that a promise resolves without rejection.
     */
    async toResolveSuccessfully(received) {
        let resolved = false;
        let rejected = false;
        let error;
        try {
            await received;
            resolved = true;
        }
        catch (e) {
            rejected = true;
            error = e;
        }
        const pass = resolved && !rejected;
        return {
            pass,
            message: () => {
                if (rejected) {
                    return `Expected promise to resolve successfully, but it rejected with: ${error?.message}`;
                }
                return `Expected promise to reject`;
            },
        };
    },
    /**
     * Custom matcher: toHandleInvalidInputGracefully.
     * Verifies that a function handles various invalid inputs without throwing.
     */
    toHandleInvalidInputGracefully(received) {
        const failures = [];
        for (const input of matcher_types_1.INVALID_INPUTS) {
            try {
                received(input);
            }
            catch (e) {
                failures.push({ input, error: e });
            }
        }
        const pass = failures.length === 0;
        return {
            pass,
            message: () => {
                if (failures.length > 0) {
                    const failureMessages = failures
                        .map((f) => `  Input ${JSON.stringify(f.input)}: ${f.error.message}`)
                        .join('\n');
                    return `Expected function to handle invalid inputs gracefully, but it threw for:\n${failureMessages}`;
                }
                return `Expected function to throw for invalid inputs`;
            },
        };
    },
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,