51ab2173dd2f6e259538ee239279d9d2
"use strict";

/* istanbul ignore next */
function cov_23yeuo0red() {
  var path = "/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/utils/atomic-operations.ts";
  var hash = "37dad7ad05790b6cb96fc31196bdb281fd11453e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/utils/atomic-operations.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 35
        }
      },
      "37": {
        start: {
          line: 37,
          column: 0
        },
        end: {
          line: 37,
          column: 44
        }
      },
      "38": {
        start: {
          line: 38,
          column: 0
        },
        end: {
          line: 38,
          column: 42
        }
      },
      "39": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 39,
          column: 50
        }
      },
      "40": {
        start: {
          line: 40,
          column: 0
        },
        end: {
          line: 40,
          column: 36
        }
      },
      "41": {
        start: {
          line: 41,
          column: 0
        },
        end: {
          line: 41,
          column: 58
        }
      },
      "42": {
        start: {
          line: 42,
          column: 0
        },
        end: {
          line: 42,
          column: 36
        }
      },
      "43": {
        start: {
          line: 57,
          column: 11
        },
        end: {
          line: 57,
          column: 38
        }
      },
      "44": {
        start: {
          line: 58,
          column: 13
        },
        end: {
          line: 58,
          column: 42
        }
      },
      "45": {
        start: {
          line: 59,
          column: 11
        },
        end: {
          line: 59,
          column: 38
        }
      },
      "46": {
        start: {
          line: 60,
          column: 15
        },
        end: {
          line: 60,
          column: 30
        }
      },
      "47": {
        start: {
          line: 61,
          column: 17
        },
        end: {
          line: 61,
          column: 34
        }
      },
      "48": {
        start: {
          line: 62,
          column: 17
        },
        end: {
          line: 62,
          column: 42
        }
      },
      "49": {
        start: {
          line: 63,
          column: 17
        },
        end: {
          line: 63,
          column: 51
        }
      },
      "50": {
        start: {
          line: 64,
          column: 18
        },
        end: {
          line: 64,
          column: 53
        }
      },
      "51": {
        start: {
          line: 65,
          column: 14
        },
        end: {
          line: 65,
          column: 45
        }
      },
      "52": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 49
        }
      },
      "53": {
        start: {
          line: 67,
          column: 17
        },
        end: {
          line: 67,
          column: 51
        }
      },
      "54": {
        start: {
          line: 68,
          column: 15
        },
        end: {
          line: 68,
          column: 47
        }
      },
      "55": {
        start: {
          line: 69,
          column: 11
        },
        end: {
          line: 69,
          column: 39
        }
      },
      "56": {
        start: {
          line: 70,
          column: 14
        },
        end: {
          line: 70,
          column: 45
        }
      },
      "57": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "58": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 41
        }
      },
      "59": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 20
        }
      },
      "60": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 21
        }
      },
      "61": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 29
        }
      },
      "62": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 28
        }
      },
      "63": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 33
        }
      },
      "64": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 31
        }
      },
      "65": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 32
        }
      },
      "66": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "67": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 158
        }
      },
      "68": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 40
        }
      },
      "69": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "70": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 45
        }
      },
      "71": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 43
        }
      },
      "72": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "73": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 136
        }
      },
      "74": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "75": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 125,
          column: 13
        }
      },
      "76": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 124,
          column: 34
        }
      },
      "77": {
        start: {
          line: 127,
          column: 12
        },
        end: {
          line: 127,
          column: 34
        }
      },
      "78": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 47
        }
      },
      "79": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 134,
          column: 14
        }
      },
      "80": {
        start: {
          line: 138,
          column: 35
        },
        end: {
          line: 138,
          column: 56
        }
      },
      "81": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 144,
          column: 14
        }
      },
      "82": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "83": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 24
        }
      },
      "84": {
        start: {
          line: 155,
          column: 30
        },
        end: {
          line: 155,
          column: 34
        }
      },
      "85": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "86": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 164,
          column: 13
        }
      },
      "87": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 33
        }
      },
      "88": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 162,
          column: 67
        }
      },
      "89": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 163,
          column: 40
        }
      },
      "90": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 43
        }
      },
      "91": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 31
        }
      },
      "92": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 169,
          column: 31
        }
      },
      "93": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "94": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 189,
          column: 13
        }
      },
      "95": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 185,
          column: 17
        }
      },
      "96": {
        start: {
          line: 178,
          column: 33
        },
        end: {
          line: 178,
          column: 54
        }
      },
      "97": {
        start: {
          line: 179,
          column: 20
        },
        end: {
          line: 184,
          column: 21
        }
      },
      "98": {
        start: {
          line: 180,
          column: 24
        },
        end: {
          line: 180,
          column: 77
        }
      },
      "99": {
        start: {
          line: 183,
          column: 24
        },
        end: {
          line: 183,
          column: 60
        }
      },
      "100": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 85
        }
      },
      "101": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 39
        }
      },
      "102": {
        start: {
          line: 194,
          column: 0
        },
        end: {
          line: 194,
          column: 46
        }
      },
      "103": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 38
        }
      },
      "104": {
        start: {
          line: 203,
          column: 25
        },
        end: {
          line: 203,
          column: 69
        }
      },
      "105": {
        start: {
          line: 204,
          column: 22
        },
        end: {
          line: 204,
          column: 32
        }
      },
      "106": {
        start: {
          line: 205,
          column: 4
        },
        end: {
          line: 205,
          column: 74
        }
      },
      "107": {
        start: {
          line: 215,
          column: 85
        },
        end: {
          line: 215,
          column: 92
        }
      },
      "108": {
        start: {
          line: 216,
          column: 21
        },
        end: {
          line: 216,
          column: 71
        }
      },
      "109": {
        start: {
          line: 217,
          column: 23
        },
        end: {
          line: 217,
          column: 78
        }
      },
      "110": {
        start: {
          line: 218,
          column: 24
        },
        end: {
          line: 218,
          column: 29
        }
      },
      "111": {
        start: {
          line: 219,
          column: 4
        },
        end: {
          line: 308,
          column: 5
        }
      },
      "112": {
        start: {
          line: 221,
          column: 26
        },
        end: {
          line: 221,
          column: 48
        }
      },
      "113": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "114": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 56
        }
      },
      "115": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "116": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 49
        }
      },
      "117": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 33
        }
      },
      "118": {
        start: {
          line: 231,
          column: 27
        },
        end: {
          line: 231,
          column: 32
        }
      },
      "119": {
        start: {
          line: 232,
          column: 25
        },
        end: {
          line: 232,
          column: 29
        }
      },
      "120": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "121": {
        start: {
          line: 233,
          column: 27
        },
        end: {
          line: 233,
          column: 28
        }
      },
      "122": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 250,
          column: 13
        }
      },
      "123": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 240,
          column: 17
        }
      },
      "124": {
        start: {
          line: 236,
          column: 20
        },
        end: {
          line: 236,
          column: 62
        }
      },
      "125": {
        start: {
          line: 239,
          column: 20
        },
        end: {
          line: 239,
          column: 52
        }
      },
      "126": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 36
        }
      },
      "127": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 22
        }
      },
      "128": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 245,
          column: 61
        }
      },
      "129": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 249,
          column: 17
        }
      },
      "130": {
        start: {
          line: 248,
          column: 20
        },
        end: {
          line: 248,
          column: 104
        }
      },
      "131": {
        start: {
          line: 248,
          column: 51
        },
        end: {
          line: 248,
          column: 102
        }
      },
      "132": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "133": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 174
        }
      },
      "134": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 263,
          column: 9
        }
      },
      "135": {
        start: {
          line: 257,
          column: 32
        },
        end: {
          line: 257,
          column: 66
        }
      },
      "136": {
        start: {
          line: 258,
          column: 33
        },
        end: {
          line: 258,
          column: 100
        }
      },
      "137": {
        start: {
          line: 259,
          column: 28
        },
        end: {
          line: 259,
          column: 56
        }
      },
      "138": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 262,
          column: 13
        }
      },
      "139": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 129
        }
      },
      "140": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 41
        }
      },
      "141": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 274,
          column: 9
        }
      },
      "142": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 273,
          column: 13
        }
      },
      "143": {
        start: {
          line: 269,
          column: 16
        },
        end: {
          line: 269,
          column: 37
        }
      },
      "144": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 279,
          column: 10
        }
      },
      "145": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 290,
          column: 9
        }
      },
      "146": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 286,
          column: 13
        }
      },
      "147": {
        start: {
          line: 285,
          column: 16
        },
        end: {
          line: 285,
          column: 35
        }
      },
      "148": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 301,
          column: 9
        }
      },
      "149": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 300,
          column: 13
        }
      },
      "150": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 296,
          column: 17
        }
      },
      "151": {
        start: {
          line: 295,
          column: 20
        },
        end: {
          line: 295,
          column: 55
        }
      },
      "152": {
        start: {
          line: 299,
          column: 16
        },
        end: {
          line: 299,
          column: 73
        }
      },
      "153": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 307,
          column: 10
        }
      },
      "154": {
        start: {
          line: 318,
          column: 90
        },
        end: {
          line: 318,
          column: 97
        }
      },
      "155": {
        start: {
          line: 320,
          column: 24
        },
        end: {
          line: 320,
          column: 86
        }
      },
      "156": {
        start: {
          line: 321,
          column: 25
        },
        end: {
          line: 321,
          column: 30
        }
      },
      "157": {
        start: {
          line: 322,
          column: 24
        },
        end: {
          line: 322,
          column: 29
        }
      },
      "158": {
        start: {
          line: 324,
          column: 4
        },
        end: {
          line: 397,
          column: 5
        }
      },
      "159": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 330,
          column: 9
        }
      },
      "160": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 329,
          column: 15
        }
      },
      "161": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 332,
          column: 49
        }
      },
      "162": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 336,
          column: 9
        }
      },
      "163": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 90
        }
      },
      "164": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 335,
          column: 49
        }
      },
      "165": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 338,
          column: 54
        }
      },
      "166": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 339,
          column: 30
        }
      },
      "167": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 346,
          column: 11
        }
      },
      "168": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 354,
          column: 9
        }
      },
      "169": {
        start: {
          line: 349,
          column: 29
        },
        end: {
          line: 349,
          column: 55
        }
      },
      "170": {
        start: {
          line: 350,
          column: 28
        },
        end: {
          line: 350,
          column: 52
        }
      },
      "171": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 353,
          column: 13
        }
      },
      "172": {
        start: {
          line: 352,
          column: 16
        },
        end: {
          line: 352,
          column: 74
        }
      },
      "173": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 356,
          column: 46
        }
      },
      "174": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 360,
          column: 9
        }
      },
      "175": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 359,
          column: 67
        }
      },
      "176": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 365,
          column: 10
        }
      },
      "177": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 381,
          column: 9
        }
      },
      "178": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 380,
          column: 13
        }
      },
      "179": {
        start: {
          line: 371,
          column: 16
        },
        end: {
          line: 373,
          column: 17
        }
      },
      "180": {
        start: {
          line: 372,
          column: 20
        },
        end: {
          line: 372,
          column: 75
        }
      },
      "181": {
        start: {
          line: 374,
          column: 16
        },
        end: {
          line: 376,
          column: 17
        }
      },
      "182": {
        start: {
          line: 375,
          column: 20
        },
        end: {
          line: 375,
          column: 57
        }
      },
      "183": {
        start: {
          line: 379,
          column: 16
        },
        end: {
          line: 379,
          column: 88
        }
      },
      "184": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 390,
          column: 9
        }
      },
      "185": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 389,
          column: 13
        }
      },
      "186": {
        start: {
          line: 385,
          column: 16
        },
        end: {
          line: 385,
          column: 72
        }
      },
      "187": {
        start: {
          line: 391,
          column: 8
        },
        end: {
          line: 396,
          column: 10
        }
      },
      "188": {
        start: {
          line: 408,
          column: 25
        },
        end: {
          line: 408,
          column: 32
        }
      },
      "189": {
        start: {
          line: 410,
          column: 25
        },
        end: {
          line: 410,
          column: 30
        }
      },
      "190": {
        start: {
          line: 411,
          column: 4
        },
        end: {
          line: 471,
          column: 5
        }
      },
      "191": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 417,
          column: 9
        }
      },
      "192": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 416,
          column: 15
        }
      },
      "193": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 419,
          column: 47
        }
      },
      "194": {
        start: {
          line: 420,
          column: 8
        },
        end: {
          line: 424,
          column: 9
        }
      },
      "195": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 422,
          column: 78
        }
      },
      "196": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 423,
          column: 46
        }
      },
      "197": {
        start: {
          line: 426,
          column: 8
        },
        end: {
          line: 426,
          column: 39
        }
      },
      "198": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 433,
          column: 9
        }
      },
      "199": {
        start: {
          line: 429,
          column: 28
        },
        end: {
          line: 429,
          column: 51
        }
      },
      "200": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 432,
          column: 13
        }
      },
      "201": {
        start: {
          line: 431,
          column: 16
        },
        end: {
          line: 431,
          column: 60
        }
      },
      "202": {
        start: {
          line: 435,
          column: 8
        },
        end: {
          line: 443,
          column: 9
        }
      },
      "203": {
        start: {
          line: 436,
          column: 25
        },
        end: {
          line: 436,
          column: 48
        }
      },
      "204": {
        start: {
          line: 437,
          column: 12
        },
        end: {
          line: 442,
          column: 13
        }
      },
      "205": {
        start: {
          line: 438,
          column: 16
        },
        end: {
          line: 438,
          column: 71
        }
      },
      "206": {
        start: {
          line: 441,
          column: 16
        },
        end: {
          line: 441,
          column: 37
        }
      },
      "207": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 448,
          column: 10
        }
      },
      "208": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 464,
          column: 9
        }
      },
      "209": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 456,
          column: 13
        }
      },
      "210": {
        start: {
          line: 455,
          column: 16
        },
        end: {
          line: 455,
          column: 47
        }
      },
      "211": {
        start: {
          line: 458,
          column: 12
        },
        end: {
          line: 460,
          column: 13
        }
      },
      "212": {
        start: {
          line: 459,
          column: 16
        },
        end: {
          line: 459,
          column: 50
        }
      },
      "213": {
        start: {
          line: 463,
          column: 12
        },
        end: {
          line: 463,
          column: 81
        }
      },
      "214": {
        start: {
          line: 465,
          column: 8
        },
        end: {
          line: 470,
          column: 10
        }
      },
      "215": {
        start: {
          line: 477,
          column: 68
        },
        end: {
          line: 477,
          column: 75
        }
      },
      "216": {
        start: {
          line: 478,
          column: 4
        },
        end: {
          line: 480,
          column: 5
        }
      },
      "217": {
        start: {
          line: 479,
          column: 8
        },
        end: {
          line: 479,
          column: 216
        }
      },
      "218": {
        start: {
          line: 482,
          column: 4
        },
        end: {
          line: 484,
          column: 5
        }
      },
      "219": {
        start: {
          line: 483,
          column: 8
        },
        end: {
          line: 483,
          column: 49
        }
      },
      "220": {
        start: {
          line: 485,
          column: 18
        },
        end: {
          line: 485,
          column: 39
        }
      },
      "221": {
        start: {
          line: 486,
          column: 4
        },
        end: {
          line: 515,
          column: 5
        }
      },
      "222": {
        start: {
          line: 488,
          column: 8
        },
        end: {
          line: 490,
          column: 9
        }
      },
      "223": {
        start: {
          line: 489,
          column: 12
        },
        end: {
          line: 489,
          column: 21
        }
      },
      "224": {
        start: {
          line: 491,
          column: 27
        },
        end: {
          line: 491,
          column: 50
        }
      },
      "225": {
        start: {
          line: 492,
          column: 27
        },
        end: {
          line: 492,
          column: 50
        }
      },
      "226": {
        start: {
          line: 493,
          column: 21
        },
        end: {
          line: 493,
          column: 44
        }
      },
      "227": {
        start: {
          line: 494,
          column: 8
        },
        end: {
          line: 513,
          column: 9
        }
      },
      "228": {
        start: {
          line: 496,
          column: 12
        },
        end: {
          line: 499,
          column: 15
        }
      },
      "229": {
        start: {
          line: 501,
          column: 13
        },
        end: {
          line: 513,
          column: 9
        }
      },
      "230": {
        start: {
          line: 503,
          column: 12
        },
        end: {
          line: 503,
          column: 51
        }
      },
      "231": {
        start: {
          line: 505,
          column: 12
        },
        end: {
          line: 512,
          column: 13
        }
      },
      "232": {
        start: {
          line: 506,
          column: 16
        },
        end: {
          line: 511,
          column: 17
        }
      },
      "233": {
        start: {
          line: 507,
          column: 20
        },
        end: {
          line: 507,
          column: 81
        }
      },
      "234": {
        start: {
          line: 522,
          column: 4
        },
        end: {
          line: 522,
          column: 35
        }
      },
      "235": {
        start: {
          line: 531,
          column: 4
        },
        end: {
          line: 553,
          column: 5
        }
      },
      "236": {
        start: {
          line: 532,
          column: 23
        },
        end: {
          line: 532,
          column: 40
        }
      },
      "237": {
        start: {
          line: 533,
          column: 8
        },
        end: {
          line: 538,
          column: 10
        }
      },
      "238": {
        start: {
          line: 541,
          column: 8
        },
        end: {
          line: 546,
          column: 9
        }
      },
      "239": {
        start: {
          line: 542,
          column: 12
        },
        end: {
          line: 542,
          column: 29
        }
      },
      "240": {
        start: {
          line: 545,
          column: 12
        },
        end: {
          line: 545,
          column: 61
        }
      },
      "241": {
        start: {
          line: 547,
          column: 8
        },
        end: {
          line: 552,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "exists",
        decl: {
          start: {
            line: 72,
            column: 15
          },
          end: {
            line: 72,
            column: 21
          }
        },
        loc: {
          start: {
            line: 72,
            column: 32
          },
          end: {
            line: 80,
            column: 1
          }
        },
        line: 72
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 18
          },
          end: {
            line: 91,
            column: 5
          }
        },
        line: 85
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        loc: {
          start: {
            line: 97,
            column: 38
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 97
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        loc: {
          start: {
            line: 110,
            column: 33
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 110
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 117,
            column: 5
          }
        },
        loc: {
          start: {
            line: 117,
            column: 20
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 117
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 151,
            column: 4
          },
          end: {
            line: 151,
            column: 5
          }
        },
        loc: {
          start: {
            line: 151,
            column: 21
          },
          end: {
            line: 170,
            column: 5
          }
        },
        line: 151
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 174,
            column: 4
          },
          end: {
            line: 174,
            column: 5
          }
        },
        loc: {
          start: {
            line: 174,
            column: 34
          },
          end: {
            line: 192,
            column: 5
          }
        },
        line: 174
      },
      "16": {
        name: "generateTempPath",
        decl: {
          start: {
            line: 201,
            column: 9
          },
          end: {
            line: 201,
            column: 25
          }
        },
        loc: {
          start: {
            line: 201,
            column: 45
          },
          end: {
            line: 206,
            column: 1
          }
        },
        line: 201
      },
      "17": {
        name: "atomicWriteFile",
        decl: {
          start: {
            line: 214,
            column: 15
          },
          end: {
            line: 214,
            column: 30
          }
        },
        loc: {
          start: {
            line: 214,
            column: 61
          },
          end: {
            line: 309,
            column: 1
          }
        },
        line: 214
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 248,
            column: 38
          },
          end: {
            line: 248,
            column: 39
          }
        },
        loc: {
          start: {
            line: 248,
            column: 51
          },
          end: {
            line: 248,
            column: 102
          }
        },
        line: 248
      },
      "19": {
        name: "atomicCopyDirectory",
        decl: {
          start: {
            line: 317,
            column: 15
          },
          end: {
            line: 317,
            column: 34
          }
        },
        loc: {
          start: {
            line: 317,
            column: 73
          },
          end: {
            line: 398,
            column: 1
          }
        },
        line: 317
      },
      "20": {
        name: "atomicRename",
        decl: {
          start: {
            line: 407,
            column: 15
          },
          end: {
            line: 407,
            column: 27
          }
        },
        loc: {
          start: {
            line: 407,
            column: 60
          },
          end: {
            line: 472,
            column: 1
          }
        },
        line: 407
      },
      "21": {
        name: "copyDirectoryRecursive",
        decl: {
          start: {
            line: 476,
            column: 15
          },
          end: {
            line: 476,
            column: 37
          }
        },
        loc: {
          start: {
            line: 476,
            column: 63
          },
          end: {
            line: 516,
            column: 1
          }
        },
        line: 476
      },
      "22": {
        name: "createAtomicTransaction",
        decl: {
          start: {
            line: 521,
            column: 9
          },
          end: {
            line: 521,
            column: 32
          }
        },
        loc: {
          start: {
            line: 521,
            column: 35
          },
          end: {
            line: 523,
            column: 1
          }
        },
        line: 521
      },
      "23": {
        name: "withRollback",
        decl: {
          start: {
            line: 530,
            column: 15
          },
          end: {
            line: 530,
            column: 27
          }
        },
        loc: {
          start: {
            line: 530,
            column: 49
          },
          end: {
            line: 554,
            column: 1
          }
        },
        line: 530
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "18": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "19": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "20": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "21": {
        loc: {
          start: {
            line: 177,
            column: 16
          },
          end: {
            line: 185,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 16
          },
          end: {
            line: 185,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "22": {
        loc: {
          start: {
            line: 179,
            column: 20
          },
          end: {
            line: 184,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 20
          },
          end: {
            line: 184,
            column: 21
          }
        }, {
          start: {
            line: 182,
            column: 25
          },
          end: {
            line: 184,
            column: 21
          }
        }],
        line: 179
      },
      "23": {
        loc: {
          start: {
            line: 202,
            column: 16
          },
          end: {
            line: 202,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 202,
            column: 16
          },
          end: {
            line: 202,
            column: 23
          }
        }, {
          start: {
            line: 202,
            column: 27
          },
          end: {
            line: 202,
            column: 38
          }
        }],
        line: 202
      },
      "24": {
        loc: {
          start: {
            line: 214,
            column: 47
          },
          end: {
            line: 214,
            column: 59
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 214,
            column: 57
          },
          end: {
            line: 214,
            column: 59
          }
        }],
        line: 214
      },
      "25": {
        loc: {
          start: {
            line: 215,
            column: 21
          },
          end: {
            line: 215,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 215,
            column: 32
          },
          end: {
            line: 215,
            column: 38
          }
        }],
        line: 215
      },
      "26": {
        loc: {
          start: {
            line: 215,
            column: 40
          },
          end: {
            line: 215,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 215,
            column: 49
          },
          end: {
            line: 215,
            column: 54
          }
        }],
        line: 215
      },
      "27": {
        loc: {
          start: {
            line: 215,
            column: 66
          },
          end: {
            line: 215,
            column: 80
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 215,
            column: 79
          },
          end: {
            line: 215,
            column: 80
          }
        }],
        line: 215
      },
      "28": {
        loc: {
          start: {
            line: 217,
            column: 23
          },
          end: {
            line: 217,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 217,
            column: 32
          },
          end: {
            line: 217,
            column: 66
          }
        }, {
          start: {
            line: 217,
            column: 69
          },
          end: {
            line: 217,
            column: 78
          }
        }],
        line: 217
      },
      "29": {
        loc: {
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "30": {
        loc: {
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "31": {
        loc: {
          start: {
            line: 226,
            column: 12
          },
          end: {
            line: 226,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 226,
            column: 12
          },
          end: {
            line: 226,
            column: 18
          }
        }, {
          start: {
            line: 226,
            column: 23
          },
          end: {
            line: 226,
            column: 45
          }
        }],
        line: 226
      },
      "32": {
        loc: {
          start: {
            line: 235,
            column: 16
          },
          end: {
            line: 240,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 16
          },
          end: {
            line: 240,
            column: 17
          }
        }, {
          start: {
            line: 238,
            column: 21
          },
          end: {
            line: 240,
            column: 17
          }
        }],
        line: 235
      },
      "33": {
        loc: {
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 249,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 249,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "34": {
        loc: {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 254,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "35": {
        loc: {
          start: {
            line: 253,
            column: 58
          },
          end: {
            line: 253,
            column: 113
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 253,
            column: 58
          },
          end: {
            line: 253,
            column: 77
          }
        }, {
          start: {
            line: 253,
            column: 81
          },
          end: {
            line: 253,
            column: 113
          }
        }],
        line: 253
      },
      "36": {
        loc: {
          start: {
            line: 253,
            column: 149
          },
          end: {
            line: 253,
            column: 172
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 253,
            column: 149
          },
          end: {
            line: 253,
            column: 159
          }
        }, {
          start: {
            line: 253,
            column: 163
          },
          end: {
            line: 253,
            column: 172
          }
        }],
        line: 253
      },
      "37": {
        loc: {
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "38": {
        loc: {
          start: {
            line: 258,
            column: 33
          },
          end: {
            line: 258,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 258,
            column: 64
          },
          end: {
            line: 258,
            column: 86
          }
        }, {
          start: {
            line: 258,
            column: 89
          },
          end: {
            line: 258,
            column: 100
          }
        }],
        line: 258
      },
      "39": {
        loc: {
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 262,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "40": {
        loc: {
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 8
          },
          end: {
            line: 274,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "41": {
        loc: {
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 267,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 267,
            column: 25
          }
        }, {
          start: {
            line: 267,
            column: 29
          },
          end: {
            line: 267,
            column: 39
          }
        }, {
          start: {
            line: 267,
            column: 43
          },
          end: {
            line: 267,
            column: 50
          }
        }],
        line: 267
      },
      "42": {
        loc: {
          start: {
            line: 284,
            column: 12
          },
          end: {
            line: 286,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 12
          },
          end: {
            line: 286,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "43": {
        loc: {
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 301,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 301,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "44": {
        loc: {
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 292,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 292,
            column: 25
          }
        }, {
          start: {
            line: 292,
            column: 29
          },
          end: {
            line: 292,
            column: 39
          }
        }],
        line: 292
      },
      "45": {
        loc: {
          start: {
            line: 294,
            column: 16
          },
          end: {
            line: 296,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 294,
            column: 16
          },
          end: {
            line: 296,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 294
      },
      "46": {
        loc: {
          start: {
            line: 317,
            column: 59
          },
          end: {
            line: 317,
            column: 71
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 317,
            column: 69
          },
          end: {
            line: 317,
            column: 71
          }
        }],
        line: 317
      },
      "47": {
        loc: {
          start: {
            line: 318,
            column: 21
          },
          end: {
            line: 318,
            column: 33
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 318,
            column: 31
          },
          end: {
            line: 318,
            column: 33
          }
        }],
        line: 318
      },
      "48": {
        loc: {
          start: {
            line: 318,
            column: 35
          },
          end: {
            line: 318,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 318,
            column: 56
          },
          end: {
            line: 318,
            column: 60
          }
        }],
        line: 318
      },
      "49": {
        loc: {
          start: {
            line: 318,
            column: 72
          },
          end: {
            line: 318,
            column: 85
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 318,
            column: 83
          },
          end: {
            line: 318,
            column: 85
          }
        }],
        line: 318
      },
      "50": {
        loc: {
          start: {
            line: 326,
            column: 8
          },
          end: {
            line: 330,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 326,
            column: 8
          },
          end: {
            line: 330,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 326
      },
      "51": {
        loc: {
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 333
      },
      "52": {
        loc: {
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 354,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 348,
            column: 8
          },
          end: {
            line: 354,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 348
      },
      "53": {
        loc: {
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 353,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 353,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 351
      },
      "54": {
        loc: {
          start: {
            line: 358,
            column: 8
          },
          end: {
            line: 360,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 358,
            column: 8
          },
          end: {
            line: 360,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 358
      },
      "55": {
        loc: {
          start: {
            line: 358,
            column: 12
          },
          end: {
            line: 358,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 358,
            column: 12
          },
          end: {
            line: 358,
            column: 22
          }
        }, {
          start: {
            line: 358,
            column: 27
          },
          end: {
            line: 358,
            column: 51
          }
        }],
        line: 358
      },
      "56": {
        loc: {
          start: {
            line: 369,
            column: 8
          },
          end: {
            line: 381,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 369,
            column: 8
          },
          end: {
            line: 381,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 369
      },
      "57": {
        loc: {
          start: {
            line: 369,
            column: 12
          },
          end: {
            line: 369,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 369,
            column: 12
          },
          end: {
            line: 369,
            column: 25
          }
        }, {
          start: {
            line: 369,
            column: 29
          },
          end: {
            line: 369,
            column: 39
          }
        }],
        line: 369
      },
      "58": {
        loc: {
          start: {
            line: 371,
            column: 16
          },
          end: {
            line: 373,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 371,
            column: 16
          },
          end: {
            line: 373,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 371
      },
      "59": {
        loc: {
          start: {
            line: 374,
            column: 16
          },
          end: {
            line: 376,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 374,
            column: 16
          },
          end: {
            line: 376,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 374
      },
      "60": {
        loc: {
          start: {
            line: 383,
            column: 8
          },
          end: {
            line: 390,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 383,
            column: 8
          },
          end: {
            line: 390,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 383
      },
      "61": {
        loc: {
          start: {
            line: 383,
            column: 12
          },
          end: {
            line: 383,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 383,
            column: 12
          },
          end: {
            line: 383,
            column: 26
          }
        }, {
          start: {
            line: 383,
            column: 31
          },
          end: {
            line: 383,
            column: 56
          }
        }],
        line: 383
      },
      "62": {
        loc: {
          start: {
            line: 407,
            column: 46
          },
          end: {
            line: 407,
            column: 58
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 407,
            column: 56
          },
          end: {
            line: 407,
            column: 58
          }
        }],
        line: 407
      },
      "63": {
        loc: {
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 417,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 417,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 413
      },
      "64": {
        loc: {
          start: {
            line: 420,
            column: 8
          },
          end: {
            line: 424,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 420,
            column: 8
          },
          end: {
            line: 424,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 420
      },
      "65": {
        loc: {
          start: {
            line: 428,
            column: 8
          },
          end: {
            line: 433,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 428,
            column: 8
          },
          end: {
            line: 433,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 428
      },
      "66": {
        loc: {
          start: {
            line: 430,
            column: 12
          },
          end: {
            line: 432,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 430,
            column: 12
          },
          end: {
            line: 432,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 430
      },
      "67": {
        loc: {
          start: {
            line: 435,
            column: 8
          },
          end: {
            line: 443,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 435,
            column: 8
          },
          end: {
            line: 443,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 435
      },
      "68": {
        loc: {
          start: {
            line: 435,
            column: 12
          },
          end: {
            line: 435,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 435,
            column: 12
          },
          end: {
            line: 435,
            column: 22
          }
        }, {
          start: {
            line: 435,
            column: 27
          },
          end: {
            line: 435,
            column: 51
          }
        }],
        line: 435
      },
      "69": {
        loc: {
          start: {
            line: 437,
            column: 12
          },
          end: {
            line: 442,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 437,
            column: 12
          },
          end: {
            line: 442,
            column: 13
          }
        }, {
          start: {
            line: 440,
            column: 17
          },
          end: {
            line: 442,
            column: 13
          }
        }],
        line: 437
      },
      "70": {
        loc: {
          start: {
            line: 447,
            column: 28
          },
          end: {
            line: 447,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 447,
            column: 41
          },
          end: {
            line: 447,
            column: 53
          }
        }, {
          start: {
            line: 447,
            column: 56
          },
          end: {
            line: 447,
            column: 58
          }
        }],
        line: 447
      },
      "71": {
        loc: {
          start: {
            line: 454,
            column: 12
          },
          end: {
            line: 456,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 454,
            column: 12
          },
          end: {
            line: 456,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 454
      },
      "72": {
        loc: {
          start: {
            line: 458,
            column: 12
          },
          end: {
            line: 460,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 458,
            column: 12
          },
          end: {
            line: 460,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 458
      },
      "73": {
        loc: {
          start: {
            line: 458,
            column: 16
          },
          end: {
            line: 458,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 458,
            column: 16
          },
          end: {
            line: 458,
            column: 30
          }
        }, {
          start: {
            line: 458,
            column: 34
          },
          end: {
            line: 458,
            column: 44
          }
        }, {
          start: {
            line: 458,
            column: 49
          },
          end: {
            line: 458,
            column: 73
          }
        }],
        line: 458
      },
      "74": {
        loc: {
          start: {
            line: 469,
            column: 28
          },
          end: {
            line: 469,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 469,
            column: 41
          },
          end: {
            line: 469,
            column: 53
          }
        }, {
          start: {
            line: 469,
            column: 56
          },
          end: {
            line: 469,
            column: 58
          }
        }],
        line: 469
      },
      "75": {
        loc: {
          start: {
            line: 478,
            column: 4
          },
          end: {
            line: 480,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 478,
            column: 4
          },
          end: {
            line: 480,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 478
      },
      "76": {
        loc: {
          start: {
            line: 482,
            column: 4
          },
          end: {
            line: 484,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 482,
            column: 4
          },
          end: {
            line: 484,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 482
      },
      "77": {
        loc: {
          start: {
            line: 488,
            column: 8
          },
          end: {
            line: 490,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 488,
            column: 8
          },
          end: {
            line: 490,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 488
      },
      "78": {
        loc: {
          start: {
            line: 494,
            column: 8
          },
          end: {
            line: 513,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 494,
            column: 8
          },
          end: {
            line: 513,
            column: 9
          }
        }, {
          start: {
            line: 501,
            column: 13
          },
          end: {
            line: 513,
            column: 9
          }
        }],
        line: 494
      },
      "79": {
        loc: {
          start: {
            line: 501,
            column: 13
          },
          end: {
            line: 513,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 501,
            column: 13
          },
          end: {
            line: 513,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 501
      },
      "80": {
        loc: {
          start: {
            line: 505,
            column: 12
          },
          end: {
            line: 512,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 505,
            column: 12
          },
          end: {
            line: 512,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 505
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0],
      "25": [0],
      "26": [0],
      "27": [0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0],
      "47": [0],
      "48": [0],
      "49": [0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/utils/atomic-operations.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/utils/atomic-operations.ts"],
      sourcesContent: ["/**\n * @file Atomic operations framework for safe data operations\n *\n * This module provides atomic operation capabilities with temporary files,\n * validation, and automatic rollback mechanisms to ensure data integrity\n * during critical operations like file creation, updates, and directory operations.\n *\n * Features:\n * - Atomic file operations with temporary files\n * - Directory operations with rollback capability\n * - Validation hooks for pre and post operation checks\n * - Automatic cleanup on success or failure\n * - Transaction-like semantics for complex operations\n */\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport { promisify } from 'util';\nimport { randomBytes } from 'crypto';\nimport {\n  AtomicOperationError,\n  AtomicWriteError,\n  FileNotFoundError,\n  DirectoryNotFoundError,\n  ErrorUtils,\n} from '../core/errors';\n// BufferEncoding is a built-in Node.js type alias\ntype BufferEncoding =\n  | 'ascii'\n  | 'utf8'\n  | 'utf-8'\n  | 'utf16le'\n  | 'ucs2'\n  | 'ucs-2'\n  | 'base64'\n  | 'base64url'\n  | 'latin1'\n  | 'binary'\n  | 'hex';\n\nconst readFile = promisify(fs.readFile);\nconst writeFile = promisify(fs.writeFile);\nconst mkdir = promisify(fs.mkdir);\nconst readdir = promisify(fs.readdir);\nconst copyFile = promisify(fs.copyFile);\nconst rename = promisify(fs.rename);\nconst rm = promisify(fs.rm);\nconst lstat = promisify(fs.lstat);\n\n// Helper to check if file exists using fs.promises.stat\nasync function exists(filePath: string): Promise<boolean> {\n  try {\n    await fs.promises.stat(filePath);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Result of an atomic operation containing success status, results, and cleanup information.\n */\nexport interface AtomicOperationResult<T = void> {\n  success: boolean;\n  result?: T;\n  error?: AtomicOperationError;\n  rollbackPerformed: boolean;\n  temporaryPaths: string[];\n}\n\n/**\n * Validation function type for atomic operations\n */\nexport type ValidationFunction<T = unknown> = (data: T) => Promise<boolean> | boolean;\n\n/**\n * Rollback function type for cleanup operations\n */\nexport type RollbackFunction = () => Promise<void> | void;\n\n/**\n * Options for atomic file operations\n */\nexport interface AtomicFileOptions {\n  /** Custom temporary directory (defaults to system temp) */\n  tempDir?: string;\n  /** File encoding for text operations */\n  encoding?: BufferEncoding;\n  /** Backup original file before overwrite */\n  backup?: boolean;\n  /** Custom validation function */\n  validate?: ValidationFunction<string>;\n  /** Maximum number of retry attempts for temporary file creation */\n  maxRetries?: number;\n}\n\n/**\n * Options for atomic directory operations\n */\nexport interface AtomicDirectoryOptions {\n  /** Custom temporary directory for staging operations */\n  tempDir?: string;\n  /** Files/directories to exclude from operations */\n  exclude?: string[];\n  /** Preserve timestamps during copy operations */\n  preserveTimestamps?: boolean;\n  /** Custom validation function for directory contents */\n  validate?: ValidationFunction<string[]>;\n  /** Maximum depth for recursive operations */\n  maxDepth?: number;\n}\n\n/**\n * Transaction context for complex atomic operations\n */\nexport class AtomicTransaction {\n  private operations: Array<() => Promise<void>> = [];\n  private rollbacks: RollbackFunction[] = [];\n  private temporaryPaths: string[] = [];\n  private completed = false;\n  private rolledBack = false;\n\n  /**\n   * Add an operation to the transaction.\n   * @param operation Function to execute\n   * @param rollback Function to rollback the operation\n   */\n  addOperation(operation: () => Promise<void>, rollback?: RollbackFunction): void {\n    if (this.completed) {\n      throw new AtomicOperationError(\n        'Cannot add operations to completed transaction',\n        'TRANSACTION_ALREADY_COMPLETED',\n        'addOperation',\n        false\n      );\n    }\n    this.operations.push(operation);\n    if (rollback) {\n      this.rollbacks.unshift(rollback); // Add to front for reverse order cleanup\n    }\n  }\n\n  /**\n   * Track a temporary path for cleanup.\n   * @param tempPath Path to track for cleanup\n   */\n  trackTemporaryPath(tempPath: string): void {\n    this.temporaryPaths.push(tempPath);\n  }\n\n  /**\n   * Execute all operations atomically.\n   * @returns Result of the transaction\n   */\n  async execute<T = void>(): Promise<AtomicOperationResult<T>> {\n    if (this.completed) {\n      throw new AtomicOperationError(\n        'Transaction already completed',\n        'TRANSACTION_ALREADY_COMPLETED',\n        'execute',\n        false\n      );\n    }\n\n    try {\n      // Execute all operations in sequence\n      for (const operation of this.operations) {\n        await operation();\n      }\n\n      // Mark as completed\n      this.completed = true;\n\n      // Clean up temporary paths\n      await this.cleanupTemporaryPaths();\n\n      return {\n        success: true,\n        rollbackPerformed: false,\n        temporaryPaths: [...this.temporaryPaths],\n      };\n    } catch (error) {\n      // Rollback all operations\n      const rollbackResult = await this.rollback();\n\n      return {\n        success: false,\n        error: ErrorUtils.wrap(error) as AtomicOperationError,\n        rollbackPerformed: rollbackResult,\n        temporaryPaths: [...this.temporaryPaths],\n      };\n    }\n  }\n\n  /**\n   * Rollback all operations.\n   * @returns True if rollback was successful\n   */\n  async rollback(): Promise<boolean> {\n    if (this.rolledBack) {\n      return true;\n    }\n\n    let rollbackSuccess = true;\n\n    // Execute rollbacks in reverse order\n    for (const rollback of this.rollbacks) {\n      try {\n        await rollback();\n      } catch (error) {\n        console.error('Rollback operation failed:', error);\n        rollbackSuccess = false;\n      }\n    }\n\n    // Clean up temporary paths\n    await this.cleanupTemporaryPaths();\n\n    this.rolledBack = true;\n    return rollbackSuccess;\n  }\n\n  /**\n   * Clean up temporary paths.\n   */\n  private async cleanupTemporaryPaths(): Promise<void> {\n    for (const tempPath of this.temporaryPaths) {\n      try {\n        if (await exists(tempPath)) {\n          const stat = await lstat(tempPath);\n          if (stat.isDirectory()) {\n            await rm(tempPath, { recursive: true, force: true });\n          } else {\n            await rm(tempPath, { force: true });\n          }\n        }\n      } catch (error) {\n        console.warn(`Failed to cleanup temporary path ${tempPath}:`, error);\n      }\n    }\n    this.temporaryPaths.length = 0;\n  }\n}\n\n/**\n * Generate a unique temporary file path.\n * @param baseName Base name for the temporary file\n * @param tempDir Temporary directory (defaults to system temp)\n * @returns Unique temporary file path\n */\nexport function generateTempPath(baseName: string, tempDir?: string): string {\n  const dir = tempDir || os.tmpdir();\n  const uniqueSuffix = randomBytes(8).toString('hex');\n  const timestamp = Date.now();\n  return path.join(dir, `${baseName}.${timestamp}.${uniqueSuffix}.tmp`);\n}\n\n/**\n * Atomically write data to a file using temporary file.\n * @param filePath Target file path\n * @param data Data to write\n * @param options Atomic operation options\n * @returns Result of the atomic operation\n */\nexport async function atomicWriteFile(\n  filePath: string,\n  data: string | Buffer,\n  options: AtomicFileOptions = {}\n): Promise<AtomicOperationResult<void>> {\n  const { tempDir, encoding = 'utf8', backup = false, validate, maxRetries = 3 } = options;\n\n  const tempPath = generateTempPath(path.basename(filePath), tempDir);\n  const backupPath = backup ? `${filePath}.backup.${Date.now()}` : undefined;\n  let backupCreated = false;\n\n  try {\n    // Ensure target directory exists\n    const targetDir = path.dirname(filePath);\n    if (!(await exists(targetDir))) {\n      await mkdir(targetDir, { recursive: true });\n    }\n\n    // Create backup if requested and original file exists\n    if (backup && (await exists(filePath))) {\n      await copyFile(filePath, backupPath!);\n      backupCreated = true;\n    }\n\n    // Write to temporary file with retries\n    let writeSuccess = false;\n    let writeError: AtomicOperationError | null = null;\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        if (typeof data === 'string') {\n          await writeFile(tempPath, data, encoding);\n        } else {\n          await writeFile(tempPath, data);\n        }\n        writeSuccess = true;\n        break;\n      } catch (error) {\n        writeError = ErrorUtils.wrap(error) as AtomicOperationError;\n        if (attempt < maxRetries) {\n          // Wait before retry with exponential backoff\n          await new Promise((resolve) => setTimeout(resolve, 100 * Math.pow(2, attempt - 1)));\n        }\n      }\n    }\n\n    if (!writeSuccess) {\n      throw new AtomicWriteError(\n        filePath,\n        writeError?.message || 'Failed to write temporary file',\n        { operation: 'atomicWriteFile' },\n        writeError || undefined\n      );\n    }\n\n    // Validate the written data if validator provided\n    if (validate) {\n      const writtenData = await readFile(tempPath, encoding);\n      const dataAsString = Buffer.isBuffer(writtenData) ? writtenData.toString() : writtenData;\n      const isValid = await validate(dataAsString);\n      if (!isValid) {\n        throw new AtomicWriteError(filePath, 'File validation failed after write', { operation: 'validation' });\n      }\n    }\n\n    // Atomic move from temporary to target\n    await rename(tempPath, filePath);\n\n    // Clean up backup if successful and not needed\n    if (backupCreated && backupPath && !backup) {\n      try {\n        await rm(backupPath);\n      } catch {\n        // Ignore backup cleanup errors\n      }\n    }\n\n    return {\n      success: true,\n      rollbackPerformed: false,\n      temporaryPaths: [tempPath],\n    };\n  } catch (error) {\n    // Cleanup temporary file\n    try {\n      if (await exists(tempPath)) {\n        await rm(tempPath);\n      }\n    } catch {\n      // Ignore cleanup errors\n    }\n\n    // Restore backup if it was created\n    if (backupCreated && backupPath) {\n      try {\n        if (await exists(backupPath)) {\n          await rename(backupPath, filePath);\n        }\n      } catch (restoreError) {\n        console.error('Failed to restore backup:', restoreError);\n      }\n    }\n\n    return {\n      success: false,\n      error: ErrorUtils.wrap(error) as AtomicOperationError,\n      rollbackPerformed: backupCreated,\n      temporaryPaths: [tempPath],\n    };\n  }\n}\n\n/**\n * Atomically copy a directory using temporary staging.\n * @param sourcePath Path to the source directory to copy from\n * @param targetPath Path to the target directory to copy to\n * @param options Atomic directory operation options\n * @returns Result of the atomic operation\n */\nexport async function atomicCopyDirectory(\n  sourcePath: string,\n  targetPath: string,\n  options: AtomicDirectoryOptions = {}\n): Promise<AtomicOperationResult<void>> {\n  const { tempDir, exclude = [], preserveTimestamps = true, validate, maxDepth = 50 } = options;\n\n  // Generate temporary staging directory\n  const stagingPath = generateTempPath(`copy-${path.basename(targetPath)}`, tempDir);\n  let stagingCreated = false;\n  let targetExisted = false;\n  let backupPath: string | undefined;\n\n  try {\n    // Check if source exists\n    if (!(await exists(sourcePath))) {\n      throw new DirectoryNotFoundError(sourcePath, {\n        operation: 'atomicCopyDirectory',\n      });\n    }\n\n    // Check if target exists (for potential rollback)\n    targetExisted = await exists(targetPath);\n    if (targetExisted) {\n      backupPath = generateTempPath(`backup-${path.basename(targetPath)}`, tempDir);\n      await rename(targetPath, backupPath);\n    }\n\n    // Create staging directory\n    await mkdir(stagingPath, { recursive: true });\n    stagingCreated = true;\n\n    // Copy source to staging area\n    await copyDirectoryRecursive(sourcePath, stagingPath, {\n      exclude,\n      preserveTimestamps,\n      maxDepth,\n      currentDepth: 0,\n    });\n\n    // Validate staging directory if validator provided\n    if (validate) {\n      const contents = await readdir(stagingPath);\n      const isValid = await validate(contents);\n      if (!isValid) {\n        throw new Error('Directory validation failed after copy');\n      }\n    }\n\n    // Atomic move from staging to target\n    await rename(stagingPath, targetPath);\n\n    // Clean up backup if successful\n    if (backupPath && (await exists(backupPath))) {\n      await rm(backupPath, { recursive: true, force: true });\n    }\n\n    return {\n      success: true,\n      rollbackPerformed: false,\n      temporaryPaths: [stagingPath],\n    };\n  } catch (error) {\n    // Rollback: restore original target if it existed\n    if (targetExisted && backupPath) {\n      try {\n        if (await exists(targetPath)) {\n          await rm(targetPath, { recursive: true, force: true });\n        }\n        if (await exists(backupPath)) {\n          await rename(backupPath, targetPath);\n        }\n      } catch (rollbackError) {\n        console.error('Failed to rollback directory operation:', rollbackError);\n      }\n    }\n\n    // Clean up staging directory\n    if (stagingCreated && (await exists(stagingPath))) {\n      try {\n        await rm(stagingPath, { recursive: true, force: true });\n      } catch {\n        // Ignore cleanup errors\n      }\n    }\n\n    return {\n      success: false,\n      error: ErrorUtils.wrap(error) as AtomicOperationError,\n      rollbackPerformed: targetExisted,\n      temporaryPaths: [stagingPath],\n    };\n  }\n}\n\n/**\n * Atomically rename/move a file or directory.\n * @param oldPath Current path of the file or directory to rename\n * @param newPath New path for the renamed file or directory\n * @param options Optional configuration including validation function\n * @param options.validate Optional validation function to verify the rename operation\n * @returns Result of the atomic operation\n */\nexport async function atomicRename(\n  oldPath: string,\n  newPath: string,\n  options: { validate?: ValidationFunction<string> } = {}\n): Promise<AtomicOperationResult<void>> {\n  const { validate } = options;\n\n  let backupPath: string | undefined;\n  let newPathExisted = false;\n\n  try {\n    // Check if source exists\n    if (!(await exists(oldPath))) {\n      throw new FileNotFoundError(oldPath, {\n        operation: 'atomicRename',\n      });\n    }\n\n    // Check if target already exists\n    newPathExisted = await exists(newPath);\n    if (newPathExisted) {\n      // Create backup of existing target\n      backupPath = generateTempPath(`backup-${path.basename(newPath)}`);\n      await rename(newPath, backupPath);\n    }\n\n    // Perform the rename\n    await rename(oldPath, newPath);\n\n    // Validate the result if validator provided\n    if (validate) {\n      const isValid = await validate(newPath);\n      if (!isValid) {\n        throw new Error('Rename validation failed');\n      }\n    }\n\n    // Clean up backup if successful\n    if (backupPath && (await exists(backupPath))) {\n      const stat = await lstat(backupPath);\n      if (stat.isDirectory()) {\n        await rm(backupPath, { recursive: true, force: true });\n      } else {\n        await rm(backupPath);\n      }\n    }\n\n    return {\n      success: true,\n      rollbackPerformed: false,\n      temporaryPaths: backupPath ? [backupPath] : [],\n    };\n  } catch (error) {\n    // Rollback: restore original state\n    try {\n      // If newPath exists, move it back to oldPath\n      if (await exists(newPath)) {\n        await rename(newPath, oldPath);\n      }\n\n      // If there was a backup, restore it\n      if (newPathExisted && backupPath && (await exists(backupPath))) {\n        await rename(backupPath, newPath);\n      }\n    } catch (rollbackError) {\n      console.error('Failed to rollback rename operation:', rollbackError);\n    }\n\n    return {\n      success: false,\n      error: ErrorUtils.wrap(error) as AtomicOperationError,\n      rollbackPerformed: true,\n      temporaryPaths: backupPath ? [backupPath] : [],\n    };\n  }\n}\n\n/**\n * Helper function to recursively copy directories.\n */\nasync function copyDirectoryRecursive(\n  source: string,\n  target: string,\n  options: {\n    exclude: string[];\n    preserveTimestamps: boolean;\n    maxDepth: number;\n    currentDepth: number;\n  }\n): Promise<void> {\n  const { exclude, preserveTimestamps, maxDepth, currentDepth } = options;\n\n  if (currentDepth >= maxDepth) {\n    throw new AtomicOperationError(\n      `Maximum directory depth (${maxDepth}) exceeded`,\n      'MAX_DEPTH_EXCEEDED',\n      'copyDirectoryRecursive',\n      false,\n      undefined,\n      undefined,\n      { context: { maxDepth, currentDepth } }\n    );\n  }\n\n  // Ensure target directory exists\n  if (!(await exists(target))) {\n    await mkdir(target, { recursive: true });\n  }\n\n  const items = await readdir(source);\n\n  for (const item of items) {\n    // Skip excluded items\n    if (exclude.includes(item)) {\n      continue;\n    }\n\n    const sourcePath = path.join(source, item);\n    const targetPath = path.join(target, item);\n\n    const stat = await lstat(sourcePath);\n\n    if (stat.isDirectory()) {\n      // Recursively copy subdirectory\n      await copyDirectoryRecursive(sourcePath, targetPath, {\n        ...options,\n        currentDepth: currentDepth + 1,\n      });\n    } else if (stat.isFile()) {\n      // Copy file\n      await copyFile(sourcePath, targetPath);\n\n      // Preserve timestamps if requested\n      if (preserveTimestamps) {\n        try {\n          await fs.promises.utimes(targetPath, stat.atime, stat.mtime);\n        } catch {\n          // Ignore timestamp preservation errors\n        }\n      }\n    }\n    // Skip symbolic links and other special files for security\n  }\n}\n\n/**\n * Create a new atomic transaction.\n * @returns New atomic transaction instance\n */\nexport function createAtomicTransaction(): AtomicTransaction {\n  return new AtomicTransaction();\n}\n\n/**\n * Utility to safely execute an operation with automatic rollback.\n * @param operation Function to execute\n * @param rollback Function to call on failure\n * @returns Result of the operation\n */\nexport async function withRollback<T>(\n  operation: () => Promise<T>,\n  rollback: RollbackFunction\n): Promise<AtomicOperationResult<T>> {\n  try {\n    const result = await operation();\n    return {\n      success: true,\n      result,\n      rollbackPerformed: false,\n      temporaryPaths: [],\n    };\n  } catch (error) {\n    try {\n      await rollback();\n    } catch (rollbackError) {\n      console.error('Rollback failed:', rollbackError);\n    }\n\n    return {\n      success: false,\n      error: ErrorUtils.wrap(error) as AtomicOperationError,\n      rollbackPerformed: true,\n      temporaryPaths: [],\n    };\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "37dad7ad05790b6cb96fc31196bdb281fd11453e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_23yeuo0red = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_23yeuo0red();
var __createBinding =
/* istanbul ignore next */
(cov_23yeuo0red().s[0]++,
/* istanbul ignore next */
(cov_23yeuo0red().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_23yeuo0red().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_23yeuo0red().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_23yeuo0red().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_23yeuo0red().f[0]++;
  cov_23yeuo0red().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_23yeuo0red().b[2][0]++;
    cov_23yeuo0red().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_23yeuo0red().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_23yeuo0red().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_23yeuo0red().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_23yeuo0red().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_23yeuo0red().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_23yeuo0red().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_23yeuo0red().b[5][1]++,
  /* istanbul ignore next */
  (cov_23yeuo0red().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_23yeuo0red().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_23yeuo0red().b[3][0]++;
    cov_23yeuo0red().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_23yeuo0red().f[1]++;
        cov_23yeuo0red().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_23yeuo0red().b[3][1]++;
  }
  cov_23yeuo0red().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_23yeuo0red().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_23yeuo0red().f[2]++;
  cov_23yeuo0red().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_23yeuo0red().b[7][0]++;
    cov_23yeuo0red().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_23yeuo0red().b[7][1]++;
  }
  cov_23yeuo0red().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_23yeuo0red().s[11]++,
/* istanbul ignore next */
(cov_23yeuo0red().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_23yeuo0red().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_23yeuo0red().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_23yeuo0red().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_23yeuo0red().f[3]++;
  cov_23yeuo0red().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_23yeuo0red().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_23yeuo0red().f[4]++;
  cov_23yeuo0red().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_23yeuo0red().s[14]++,
/* istanbul ignore next */
(cov_23yeuo0red().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_23yeuo0red().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_23yeuo0red().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_23yeuo0red().f[5]++;
  cov_23yeuo0red().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_23yeuo0red().f[6]++;
    cov_23yeuo0red().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_23yeuo0red().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_23yeuo0red().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_23yeuo0red().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_23yeuo0red().s[17]++, []);
      /* istanbul ignore next */
      cov_23yeuo0red().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_23yeuo0red().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_23yeuo0red().b[12][0]++;
          cov_23yeuo0red().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_23yeuo0red().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_23yeuo0red().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_23yeuo0red().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_23yeuo0red().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_23yeuo0red().f[8]++;
    cov_23yeuo0red().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_23yeuo0red().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_23yeuo0red().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[13][0]++;
      cov_23yeuo0red().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_23yeuo0red().s[26]++, {});
    /* istanbul ignore next */
    cov_23yeuo0red().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[15][0]++;
      cov_23yeuo0red().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_23yeuo0red().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_23yeuo0red().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_23yeuo0red().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_23yeuo0red().b[16][0]++;
          cov_23yeuo0red().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_23yeuo0red().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[15][1]++;
    }
    cov_23yeuo0red().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_23yeuo0red().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_23yeuo0red().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_23yeuo0red().s[36]++;
exports.AtomicTransaction = void 0;
/* istanbul ignore next */
cov_23yeuo0red().s[37]++;
exports.generateTempPath = generateTempPath;
/* istanbul ignore next */
cov_23yeuo0red().s[38]++;
exports.atomicWriteFile = atomicWriteFile;
/* istanbul ignore next */
cov_23yeuo0red().s[39]++;
exports.atomicCopyDirectory = atomicCopyDirectory;
/* istanbul ignore next */
cov_23yeuo0red().s[40]++;
exports.atomicRename = atomicRename;
/* istanbul ignore next */
cov_23yeuo0red().s[41]++;
exports.createAtomicTransaction = createAtomicTransaction;
/* istanbul ignore next */
cov_23yeuo0red().s[42]++;
exports.withRollback = withRollback;
/**
 * @file Atomic operations framework for safe data operations
 *
 * This module provides atomic operation capabilities with temporary files,
 * validation, and automatic rollback mechanisms to ensure data integrity
 * during critical operations like file creation, updates, and directory operations.
 *
 * Features:
 * - Atomic file operations with temporary files
 * - Directory operations with rollback capability
 * - Validation hooks for pre and post operation checks
 * - Automatic cleanup on success or failure
 * - Transaction-like semantics for complex operations
 */
const fs =
/* istanbul ignore next */
(cov_23yeuo0red().s[43]++, __importStar(require("fs")));
const path =
/* istanbul ignore next */
(cov_23yeuo0red().s[44]++, __importStar(require("path")));
const os =
/* istanbul ignore next */
(cov_23yeuo0red().s[45]++, __importStar(require("os")));
const util_1 =
/* istanbul ignore next */
(cov_23yeuo0red().s[46]++, require("util"));
const crypto_1 =
/* istanbul ignore next */
(cov_23yeuo0red().s[47]++, require("crypto"));
const errors_1 =
/* istanbul ignore next */
(cov_23yeuo0red().s[48]++, require("../core/errors"));
const readFile =
/* istanbul ignore next */
(cov_23yeuo0red().s[49]++, (0, util_1.promisify)(fs.readFile));
const writeFile =
/* istanbul ignore next */
(cov_23yeuo0red().s[50]++, (0, util_1.promisify)(fs.writeFile));
const mkdir =
/* istanbul ignore next */
(cov_23yeuo0red().s[51]++, (0, util_1.promisify)(fs.mkdir));
const readdir =
/* istanbul ignore next */
(cov_23yeuo0red().s[52]++, (0, util_1.promisify)(fs.readdir));
const copyFile =
/* istanbul ignore next */
(cov_23yeuo0red().s[53]++, (0, util_1.promisify)(fs.copyFile));
const rename =
/* istanbul ignore next */
(cov_23yeuo0red().s[54]++, (0, util_1.promisify)(fs.rename));
const rm =
/* istanbul ignore next */
(cov_23yeuo0red().s[55]++, (0, util_1.promisify)(fs.rm));
const lstat =
/* istanbul ignore next */
(cov_23yeuo0red().s[56]++, (0, util_1.promisify)(fs.lstat));
// Helper to check if file exists using fs.promises.stat
async function exists(filePath) {
  /* istanbul ignore next */
  cov_23yeuo0red().f[9]++;
  cov_23yeuo0red().s[57]++;
  try {
    /* istanbul ignore next */
    cov_23yeuo0red().s[58]++;
    await fs.promises.stat(filePath);
    /* istanbul ignore next */
    cov_23yeuo0red().s[59]++;
    return true;
  } catch {
    /* istanbul ignore next */
    cov_23yeuo0red().s[60]++;
    return false;
  }
}
/**
 * Transaction context for complex atomic operations
 */
class AtomicTransaction {
  constructor() {
    /* istanbul ignore next */
    cov_23yeuo0red().f[10]++;
    cov_23yeuo0red().s[61]++;
    this.operations = [];
    /* istanbul ignore next */
    cov_23yeuo0red().s[62]++;
    this.rollbacks = [];
    /* istanbul ignore next */
    cov_23yeuo0red().s[63]++;
    this.temporaryPaths = [];
    /* istanbul ignore next */
    cov_23yeuo0red().s[64]++;
    this.completed = false;
    /* istanbul ignore next */
    cov_23yeuo0red().s[65]++;
    this.rolledBack = false;
  }
  /**
   * Add an operation to the transaction.
   * @param operation Function to execute
   * @param rollback Function to rollback the operation
   */
  addOperation(operation, rollback) {
    /* istanbul ignore next */
    cov_23yeuo0red().f[11]++;
    cov_23yeuo0red().s[66]++;
    if (this.completed) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[17][0]++;
      cov_23yeuo0red().s[67]++;
      throw new errors_1.AtomicOperationError('Cannot add operations to completed transaction', 'TRANSACTION_ALREADY_COMPLETED', 'addOperation', false);
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[17][1]++;
    }
    cov_23yeuo0red().s[68]++;
    this.operations.push(operation);
    /* istanbul ignore next */
    cov_23yeuo0red().s[69]++;
    if (rollback) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[18][0]++;
      cov_23yeuo0red().s[70]++;
      this.rollbacks.unshift(rollback); // Add to front for reverse order cleanup
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[18][1]++;
    }
  }
  /**
   * Track a temporary path for cleanup.
   * @param tempPath Path to track for cleanup
   */
  trackTemporaryPath(tempPath) {
    /* istanbul ignore next */
    cov_23yeuo0red().f[12]++;
    cov_23yeuo0red().s[71]++;
    this.temporaryPaths.push(tempPath);
  }
  /**
   * Execute all operations atomically.
   * @returns Result of the transaction
   */
  async execute() {
    /* istanbul ignore next */
    cov_23yeuo0red().f[13]++;
    cov_23yeuo0red().s[72]++;
    if (this.completed) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[19][0]++;
      cov_23yeuo0red().s[73]++;
      throw new errors_1.AtomicOperationError('Transaction already completed', 'TRANSACTION_ALREADY_COMPLETED', 'execute', false);
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[19][1]++;
    }
    cov_23yeuo0red().s[74]++;
    try {
      /* istanbul ignore next */
      cov_23yeuo0red().s[75]++;
      // Execute all operations in sequence
      for (const operation of this.operations) {
        /* istanbul ignore next */
        cov_23yeuo0red().s[76]++;
        await operation();
      }
      // Mark as completed
      /* istanbul ignore next */
      cov_23yeuo0red().s[77]++;
      this.completed = true;
      // Clean up temporary paths
      /* istanbul ignore next */
      cov_23yeuo0red().s[78]++;
      await this.cleanupTemporaryPaths();
      /* istanbul ignore next */
      cov_23yeuo0red().s[79]++;
      return {
        success: true,
        rollbackPerformed: false,
        temporaryPaths: [...this.temporaryPaths]
      };
    } catch (error) {
      // Rollback all operations
      const rollbackResult =
      /* istanbul ignore next */
      (cov_23yeuo0red().s[80]++, await this.rollback());
      /* istanbul ignore next */
      cov_23yeuo0red().s[81]++;
      return {
        success: false,
        error: errors_1.ErrorUtils.wrap(error),
        rollbackPerformed: rollbackResult,
        temporaryPaths: [...this.temporaryPaths]
      };
    }
  }
  /**
   * Rollback all operations.
   * @returns True if rollback was successful
   */
  async rollback() {
    /* istanbul ignore next */
    cov_23yeuo0red().f[14]++;
    cov_23yeuo0red().s[82]++;
    if (this.rolledBack) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[20][0]++;
      cov_23yeuo0red().s[83]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[20][1]++;
    }
    let rollbackSuccess =
    /* istanbul ignore next */
    (cov_23yeuo0red().s[84]++, true);
    // Execute rollbacks in reverse order
    /* istanbul ignore next */
    cov_23yeuo0red().s[85]++;
    for (const rollback of this.rollbacks) {
      /* istanbul ignore next */
      cov_23yeuo0red().s[86]++;
      try {
        /* istanbul ignore next */
        cov_23yeuo0red().s[87]++;
        await rollback();
      } catch (error) {
        /* istanbul ignore next */
        cov_23yeuo0red().s[88]++;
        console.error('Rollback operation failed:', error);
        /* istanbul ignore next */
        cov_23yeuo0red().s[89]++;
        rollbackSuccess = false;
      }
    }
    // Clean up temporary paths
    /* istanbul ignore next */
    cov_23yeuo0red().s[90]++;
    await this.cleanupTemporaryPaths();
    /* istanbul ignore next */
    cov_23yeuo0red().s[91]++;
    this.rolledBack = true;
    /* istanbul ignore next */
    cov_23yeuo0red().s[92]++;
    return rollbackSuccess;
  }
  /**
   * Clean up temporary paths.
   */
  async cleanupTemporaryPaths() {
    /* istanbul ignore next */
    cov_23yeuo0red().f[15]++;
    cov_23yeuo0red().s[93]++;
    for (const tempPath of this.temporaryPaths) {
      /* istanbul ignore next */
      cov_23yeuo0red().s[94]++;
      try {
        /* istanbul ignore next */
        cov_23yeuo0red().s[95]++;
        if (await exists(tempPath)) {
          /* istanbul ignore next */
          cov_23yeuo0red().b[21][0]++;
          const stat =
          /* istanbul ignore next */
          (cov_23yeuo0red().s[96]++, await lstat(tempPath));
          /* istanbul ignore next */
          cov_23yeuo0red().s[97]++;
          if (stat.isDirectory()) {
            /* istanbul ignore next */
            cov_23yeuo0red().b[22][0]++;
            cov_23yeuo0red().s[98]++;
            await rm(tempPath, {
              recursive: true,
              force: true
            });
          } else {
            /* istanbul ignore next */
            cov_23yeuo0red().b[22][1]++;
            cov_23yeuo0red().s[99]++;
            await rm(tempPath, {
              force: true
            });
          }
        } else
        /* istanbul ignore next */
        {
          cov_23yeuo0red().b[21][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_23yeuo0red().s[100]++;
        console.warn(`Failed to cleanup temporary path ${tempPath}:`, error);
      }
    }
    /* istanbul ignore next */
    cov_23yeuo0red().s[101]++;
    this.temporaryPaths.length = 0;
  }
}
/* istanbul ignore next */
cov_23yeuo0red().s[102]++;
exports.AtomicTransaction = AtomicTransaction;
/**
 * Generate a unique temporary file path.
 * @param baseName Base name for the temporary file
 * @param tempDir Temporary directory (defaults to system temp)
 * @returns Unique temporary file path
 */
function generateTempPath(baseName, tempDir) {
  /* istanbul ignore next */
  cov_23yeuo0red().f[16]++;
  const dir =
  /* istanbul ignore next */
  (cov_23yeuo0red().s[103]++,
  /* istanbul ignore next */
  (cov_23yeuo0red().b[23][0]++, tempDir) ||
  /* istanbul ignore next */
  (cov_23yeuo0red().b[23][1]++, os.tmpdir()));
  const uniqueSuffix =
  /* istanbul ignore next */
  (cov_23yeuo0red().s[104]++, (0, crypto_1.randomBytes)(8).toString('hex'));
  const timestamp =
  /* istanbul ignore next */
  (cov_23yeuo0red().s[105]++, Date.now());
  /* istanbul ignore next */
  cov_23yeuo0red().s[106]++;
  return path.join(dir, `${baseName}.${timestamp}.${uniqueSuffix}.tmp`);
}
/**
 * Atomically write data to a file using temporary file.
 * @param filePath Target file path
 * @param data Data to write
 * @param options Atomic operation options
 * @returns Result of the atomic operation
 */
async function atomicWriteFile(filePath, data, options =
/* istanbul ignore next */
(cov_23yeuo0red().b[24][0]++, {})) {
  /* istanbul ignore next */
  cov_23yeuo0red().f[17]++;
  const {
    tempDir,
    encoding =
    /* istanbul ignore next */
    (cov_23yeuo0red().b[25][0]++, 'utf8'),
    backup =
    /* istanbul ignore next */
    (cov_23yeuo0red().b[26][0]++, false),
    validate,
    maxRetries =
    /* istanbul ignore next */
    (cov_23yeuo0red().b[27][0]++, 3)
  } =
  /* istanbul ignore next */
  (cov_23yeuo0red().s[107]++, options);
  const tempPath =
  /* istanbul ignore next */
  (cov_23yeuo0red().s[108]++, generateTempPath(path.basename(filePath), tempDir));
  const backupPath =
  /* istanbul ignore next */
  (cov_23yeuo0red().s[109]++, backup ?
  /* istanbul ignore next */
  (cov_23yeuo0red().b[28][0]++, `${filePath}.backup.${Date.now()}`) :
  /* istanbul ignore next */
  (cov_23yeuo0red().b[28][1]++, undefined));
  let backupCreated =
  /* istanbul ignore next */
  (cov_23yeuo0red().s[110]++, false);
  /* istanbul ignore next */
  cov_23yeuo0red().s[111]++;
  try {
    // Ensure target directory exists
    const targetDir =
    /* istanbul ignore next */
    (cov_23yeuo0red().s[112]++, path.dirname(filePath));
    /* istanbul ignore next */
    cov_23yeuo0red().s[113]++;
    if (!(await exists(targetDir))) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[29][0]++;
      cov_23yeuo0red().s[114]++;
      await mkdir(targetDir, {
        recursive: true
      });
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[29][1]++;
    }
    // Create backup if requested and original file exists
    cov_23yeuo0red().s[115]++;
    if (
    /* istanbul ignore next */
    (cov_23yeuo0red().b[31][0]++, backup) &&
    /* istanbul ignore next */
    (cov_23yeuo0red().b[31][1]++, await exists(filePath))) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[30][0]++;
      cov_23yeuo0red().s[116]++;
      await copyFile(filePath, backupPath);
      /* istanbul ignore next */
      cov_23yeuo0red().s[117]++;
      backupCreated = true;
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[30][1]++;
    }
    // Write to temporary file with retries
    let writeSuccess =
    /* istanbul ignore next */
    (cov_23yeuo0red().s[118]++, false);
    let writeError =
    /* istanbul ignore next */
    (cov_23yeuo0red().s[119]++, null);
    /* istanbul ignore next */
    cov_23yeuo0red().s[120]++;
    for (let attempt =
    /* istanbul ignore next */
    (cov_23yeuo0red().s[121]++, 1); attempt <= maxRetries; attempt++) {
      /* istanbul ignore next */
      cov_23yeuo0red().s[122]++;
      try {
        /* istanbul ignore next */
        cov_23yeuo0red().s[123]++;
        if (typeof data === 'string') {
          /* istanbul ignore next */
          cov_23yeuo0red().b[32][0]++;
          cov_23yeuo0red().s[124]++;
          await writeFile(tempPath, data, encoding);
        } else {
          /* istanbul ignore next */
          cov_23yeuo0red().b[32][1]++;
          cov_23yeuo0red().s[125]++;
          await writeFile(tempPath, data);
        }
        /* istanbul ignore next */
        cov_23yeuo0red().s[126]++;
        writeSuccess = true;
        /* istanbul ignore next */
        cov_23yeuo0red().s[127]++;
        break;
      } catch (error) {
        /* istanbul ignore next */
        cov_23yeuo0red().s[128]++;
        writeError = errors_1.ErrorUtils.wrap(error);
        /* istanbul ignore next */
        cov_23yeuo0red().s[129]++;
        if (attempt < maxRetries) {
          /* istanbul ignore next */
          cov_23yeuo0red().b[33][0]++;
          cov_23yeuo0red().s[130]++;
          // Wait before retry with exponential backoff
          await new Promise(resolve => {
            /* istanbul ignore next */
            cov_23yeuo0red().f[18]++;
            cov_23yeuo0red().s[131]++;
            return setTimeout(resolve, 100 * Math.pow(2, attempt - 1));
          });
        } else
        /* istanbul ignore next */
        {
          cov_23yeuo0red().b[33][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_23yeuo0red().s[132]++;
    if (!writeSuccess) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[34][0]++;
      cov_23yeuo0red().s[133]++;
      throw new errors_1.AtomicWriteError(filePath,
      /* istanbul ignore next */
      (cov_23yeuo0red().b[35][0]++, writeError?.message) ||
      /* istanbul ignore next */
      (cov_23yeuo0red().b[35][1]++, 'Failed to write temporary file'), {
        operation: 'atomicWriteFile'
      },
      /* istanbul ignore next */
      (cov_23yeuo0red().b[36][0]++, writeError) ||
      /* istanbul ignore next */
      (cov_23yeuo0red().b[36][1]++, undefined));
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[34][1]++;
    }
    // Validate the written data if validator provided
    cov_23yeuo0red().s[134]++;
    if (validate) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[37][0]++;
      const writtenData =
      /* istanbul ignore next */
      (cov_23yeuo0red().s[135]++, await readFile(tempPath, encoding));
      const dataAsString =
      /* istanbul ignore next */
      (cov_23yeuo0red().s[136]++, Buffer.isBuffer(writtenData) ?
      /* istanbul ignore next */
      (cov_23yeuo0red().b[38][0]++, writtenData.toString()) :
      /* istanbul ignore next */
      (cov_23yeuo0red().b[38][1]++, writtenData));
      const isValid =
      /* istanbul ignore next */
      (cov_23yeuo0red().s[137]++, await validate(dataAsString));
      /* istanbul ignore next */
      cov_23yeuo0red().s[138]++;
      if (!isValid) {
        /* istanbul ignore next */
        cov_23yeuo0red().b[39][0]++;
        cov_23yeuo0red().s[139]++;
        throw new errors_1.AtomicWriteError(filePath, 'File validation failed after write', {
          operation: 'validation'
        });
      } else
      /* istanbul ignore next */
      {
        cov_23yeuo0red().b[39][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[37][1]++;
    }
    // Atomic move from temporary to target
    cov_23yeuo0red().s[140]++;
    await rename(tempPath, filePath);
    // Clean up backup if successful and not needed
    /* istanbul ignore next */
    cov_23yeuo0red().s[141]++;
    if (
    /* istanbul ignore next */
    (cov_23yeuo0red().b[41][0]++, backupCreated) &&
    /* istanbul ignore next */
    (cov_23yeuo0red().b[41][1]++, backupPath) &&
    /* istanbul ignore next */
    (cov_23yeuo0red().b[41][2]++, !backup)) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[40][0]++;
      cov_23yeuo0red().s[142]++;
      try {
        /* istanbul ignore next */
        cov_23yeuo0red().s[143]++;
        await rm(backupPath);
      } catch {
        // Ignore backup cleanup errors
      }
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[40][1]++;
    }
    cov_23yeuo0red().s[144]++;
    return {
      success: true,
      rollbackPerformed: false,
      temporaryPaths: [tempPath]
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_23yeuo0red().s[145]++;
    // Cleanup temporary file
    try {
      /* istanbul ignore next */
      cov_23yeuo0red().s[146]++;
      if (await exists(tempPath)) {
        /* istanbul ignore next */
        cov_23yeuo0red().b[42][0]++;
        cov_23yeuo0red().s[147]++;
        await rm(tempPath);
      } else
      /* istanbul ignore next */
      {
        cov_23yeuo0red().b[42][1]++;
      }
    } catch {
      // Ignore cleanup errors
    }
    // Restore backup if it was created
    /* istanbul ignore next */
    cov_23yeuo0red().s[148]++;
    if (
    /* istanbul ignore next */
    (cov_23yeuo0red().b[44][0]++, backupCreated) &&
    /* istanbul ignore next */
    (cov_23yeuo0red().b[44][1]++, backupPath)) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[43][0]++;
      cov_23yeuo0red().s[149]++;
      try {
        /* istanbul ignore next */
        cov_23yeuo0red().s[150]++;
        if (await exists(backupPath)) {
          /* istanbul ignore next */
          cov_23yeuo0red().b[45][0]++;
          cov_23yeuo0red().s[151]++;
          await rename(backupPath, filePath);
        } else
        /* istanbul ignore next */
        {
          cov_23yeuo0red().b[45][1]++;
        }
      } catch (restoreError) {
        /* istanbul ignore next */
        cov_23yeuo0red().s[152]++;
        console.error('Failed to restore backup:', restoreError);
      }
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[43][1]++;
    }
    cov_23yeuo0red().s[153]++;
    return {
      success: false,
      error: errors_1.ErrorUtils.wrap(error),
      rollbackPerformed: backupCreated,
      temporaryPaths: [tempPath]
    };
  }
}
/**
 * Atomically copy a directory using temporary staging.
 * @param sourcePath Path to the source directory to copy from
 * @param targetPath Path to the target directory to copy to
 * @param options Atomic directory operation options
 * @returns Result of the atomic operation
 */
async function atomicCopyDirectory(sourcePath, targetPath, options =
/* istanbul ignore next */
(cov_23yeuo0red().b[46][0]++, {})) {
  /* istanbul ignore next */
  cov_23yeuo0red().f[19]++;
  const {
    tempDir,
    exclude =
    /* istanbul ignore next */
    (cov_23yeuo0red().b[47][0]++, []),
    preserveTimestamps =
    /* istanbul ignore next */
    (cov_23yeuo0red().b[48][0]++, true),
    validate,
    maxDepth =
    /* istanbul ignore next */
    (cov_23yeuo0red().b[49][0]++, 50)
  } =
  /* istanbul ignore next */
  (cov_23yeuo0red().s[154]++, options);
  // Generate temporary staging directory
  const stagingPath =
  /* istanbul ignore next */
  (cov_23yeuo0red().s[155]++, generateTempPath(`copy-${path.basename(targetPath)}`, tempDir));
  let stagingCreated =
  /* istanbul ignore next */
  (cov_23yeuo0red().s[156]++, false);
  let targetExisted =
  /* istanbul ignore next */
  (cov_23yeuo0red().s[157]++, false);
  let backupPath;
  /* istanbul ignore next */
  cov_23yeuo0red().s[158]++;
  try {
    /* istanbul ignore next */
    cov_23yeuo0red().s[159]++;
    // Check if source exists
    if (!(await exists(sourcePath))) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[50][0]++;
      cov_23yeuo0red().s[160]++;
      throw new errors_1.DirectoryNotFoundError(sourcePath, {
        operation: 'atomicCopyDirectory'
      });
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[50][1]++;
    }
    // Check if target exists (for potential rollback)
    cov_23yeuo0red().s[161]++;
    targetExisted = await exists(targetPath);
    /* istanbul ignore next */
    cov_23yeuo0red().s[162]++;
    if (targetExisted) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[51][0]++;
      cov_23yeuo0red().s[163]++;
      backupPath = generateTempPath(`backup-${path.basename(targetPath)}`, tempDir);
      /* istanbul ignore next */
      cov_23yeuo0red().s[164]++;
      await rename(targetPath, backupPath);
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[51][1]++;
    }
    // Create staging directory
    cov_23yeuo0red().s[165]++;
    await mkdir(stagingPath, {
      recursive: true
    });
    /* istanbul ignore next */
    cov_23yeuo0red().s[166]++;
    stagingCreated = true;
    // Copy source to staging area
    /* istanbul ignore next */
    cov_23yeuo0red().s[167]++;
    await copyDirectoryRecursive(sourcePath, stagingPath, {
      exclude,
      preserveTimestamps,
      maxDepth,
      currentDepth: 0
    });
    // Validate staging directory if validator provided
    /* istanbul ignore next */
    cov_23yeuo0red().s[168]++;
    if (validate) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[52][0]++;
      const contents =
      /* istanbul ignore next */
      (cov_23yeuo0red().s[169]++, await readdir(stagingPath));
      const isValid =
      /* istanbul ignore next */
      (cov_23yeuo0red().s[170]++, await validate(contents));
      /* istanbul ignore next */
      cov_23yeuo0red().s[171]++;
      if (!isValid) {
        /* istanbul ignore next */
        cov_23yeuo0red().b[53][0]++;
        cov_23yeuo0red().s[172]++;
        throw new Error('Directory validation failed after copy');
      } else
      /* istanbul ignore next */
      {
        cov_23yeuo0red().b[53][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[52][1]++;
    }
    // Atomic move from staging to target
    cov_23yeuo0red().s[173]++;
    await rename(stagingPath, targetPath);
    // Clean up backup if successful
    /* istanbul ignore next */
    cov_23yeuo0red().s[174]++;
    if (
    /* istanbul ignore next */
    (cov_23yeuo0red().b[55][0]++, backupPath) &&
    /* istanbul ignore next */
    (cov_23yeuo0red().b[55][1]++, await exists(backupPath))) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[54][0]++;
      cov_23yeuo0red().s[175]++;
      await rm(backupPath, {
        recursive: true,
        force: true
      });
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[54][1]++;
    }
    cov_23yeuo0red().s[176]++;
    return {
      success: true,
      rollbackPerformed: false,
      temporaryPaths: [stagingPath]
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_23yeuo0red().s[177]++;
    // Rollback: restore original target if it existed
    if (
    /* istanbul ignore next */
    (cov_23yeuo0red().b[57][0]++, targetExisted) &&
    /* istanbul ignore next */
    (cov_23yeuo0red().b[57][1]++, backupPath)) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[56][0]++;
      cov_23yeuo0red().s[178]++;
      try {
        /* istanbul ignore next */
        cov_23yeuo0red().s[179]++;
        if (await exists(targetPath)) {
          /* istanbul ignore next */
          cov_23yeuo0red().b[58][0]++;
          cov_23yeuo0red().s[180]++;
          await rm(targetPath, {
            recursive: true,
            force: true
          });
        } else
        /* istanbul ignore next */
        {
          cov_23yeuo0red().b[58][1]++;
        }
        cov_23yeuo0red().s[181]++;
        if (await exists(backupPath)) {
          /* istanbul ignore next */
          cov_23yeuo0red().b[59][0]++;
          cov_23yeuo0red().s[182]++;
          await rename(backupPath, targetPath);
        } else
        /* istanbul ignore next */
        {
          cov_23yeuo0red().b[59][1]++;
        }
      } catch (rollbackError) {
        /* istanbul ignore next */
        cov_23yeuo0red().s[183]++;
        console.error('Failed to rollback directory operation:', rollbackError);
      }
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[56][1]++;
    }
    // Clean up staging directory
    cov_23yeuo0red().s[184]++;
    if (
    /* istanbul ignore next */
    (cov_23yeuo0red().b[61][0]++, stagingCreated) &&
    /* istanbul ignore next */
    (cov_23yeuo0red().b[61][1]++, await exists(stagingPath))) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[60][0]++;
      cov_23yeuo0red().s[185]++;
      try {
        /* istanbul ignore next */
        cov_23yeuo0red().s[186]++;
        await rm(stagingPath, {
          recursive: true,
          force: true
        });
      } catch {
        // Ignore cleanup errors
      }
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[60][1]++;
    }
    cov_23yeuo0red().s[187]++;
    return {
      success: false,
      error: errors_1.ErrorUtils.wrap(error),
      rollbackPerformed: targetExisted,
      temporaryPaths: [stagingPath]
    };
  }
}
/**
 * Atomically rename/move a file or directory.
 * @param oldPath Current path of the file or directory to rename
 * @param newPath New path for the renamed file or directory
 * @param options Optional configuration including validation function
 * @param options.validate Optional validation function to verify the rename operation
 * @returns Result of the atomic operation
 */
async function atomicRename(oldPath, newPath, options =
/* istanbul ignore next */
(cov_23yeuo0red().b[62][0]++, {})) {
  /* istanbul ignore next */
  cov_23yeuo0red().f[20]++;
  const {
    validate
  } =
  /* istanbul ignore next */
  (cov_23yeuo0red().s[188]++, options);
  let backupPath;
  let newPathExisted =
  /* istanbul ignore next */
  (cov_23yeuo0red().s[189]++, false);
  /* istanbul ignore next */
  cov_23yeuo0red().s[190]++;
  try {
    /* istanbul ignore next */
    cov_23yeuo0red().s[191]++;
    // Check if source exists
    if (!(await exists(oldPath))) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[63][0]++;
      cov_23yeuo0red().s[192]++;
      throw new errors_1.FileNotFoundError(oldPath, {
        operation: 'atomicRename'
      });
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[63][1]++;
    }
    // Check if target already exists
    cov_23yeuo0red().s[193]++;
    newPathExisted = await exists(newPath);
    /* istanbul ignore next */
    cov_23yeuo0red().s[194]++;
    if (newPathExisted) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[64][0]++;
      cov_23yeuo0red().s[195]++;
      // Create backup of existing target
      backupPath = generateTempPath(`backup-${path.basename(newPath)}`);
      /* istanbul ignore next */
      cov_23yeuo0red().s[196]++;
      await rename(newPath, backupPath);
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[64][1]++;
    }
    // Perform the rename
    cov_23yeuo0red().s[197]++;
    await rename(oldPath, newPath);
    // Validate the result if validator provided
    /* istanbul ignore next */
    cov_23yeuo0red().s[198]++;
    if (validate) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[65][0]++;
      const isValid =
      /* istanbul ignore next */
      (cov_23yeuo0red().s[199]++, await validate(newPath));
      /* istanbul ignore next */
      cov_23yeuo0red().s[200]++;
      if (!isValid) {
        /* istanbul ignore next */
        cov_23yeuo0red().b[66][0]++;
        cov_23yeuo0red().s[201]++;
        throw new Error('Rename validation failed');
      } else
      /* istanbul ignore next */
      {
        cov_23yeuo0red().b[66][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[65][1]++;
    }
    // Clean up backup if successful
    cov_23yeuo0red().s[202]++;
    if (
    /* istanbul ignore next */
    (cov_23yeuo0red().b[68][0]++, backupPath) &&
    /* istanbul ignore next */
    (cov_23yeuo0red().b[68][1]++, await exists(backupPath))) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[67][0]++;
      const stat =
      /* istanbul ignore next */
      (cov_23yeuo0red().s[203]++, await lstat(backupPath));
      /* istanbul ignore next */
      cov_23yeuo0red().s[204]++;
      if (stat.isDirectory()) {
        /* istanbul ignore next */
        cov_23yeuo0red().b[69][0]++;
        cov_23yeuo0red().s[205]++;
        await rm(backupPath, {
          recursive: true,
          force: true
        });
      } else {
        /* istanbul ignore next */
        cov_23yeuo0red().b[69][1]++;
        cov_23yeuo0red().s[206]++;
        await rm(backupPath);
      }
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[67][1]++;
    }
    cov_23yeuo0red().s[207]++;
    return {
      success: true,
      rollbackPerformed: false,
      temporaryPaths: backupPath ?
      /* istanbul ignore next */
      (cov_23yeuo0red().b[70][0]++, [backupPath]) :
      /* istanbul ignore next */
      (cov_23yeuo0red().b[70][1]++, [])
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_23yeuo0red().s[208]++;
    // Rollback: restore original state
    try {
      /* istanbul ignore next */
      cov_23yeuo0red().s[209]++;
      // If newPath exists, move it back to oldPath
      if (await exists(newPath)) {
        /* istanbul ignore next */
        cov_23yeuo0red().b[71][0]++;
        cov_23yeuo0red().s[210]++;
        await rename(newPath, oldPath);
      } else
      /* istanbul ignore next */
      {
        cov_23yeuo0red().b[71][1]++;
      }
      // If there was a backup, restore it
      cov_23yeuo0red().s[211]++;
      if (
      /* istanbul ignore next */
      (cov_23yeuo0red().b[73][0]++, newPathExisted) &&
      /* istanbul ignore next */
      (cov_23yeuo0red().b[73][1]++, backupPath) &&
      /* istanbul ignore next */
      (cov_23yeuo0red().b[73][2]++, await exists(backupPath))) {
        /* istanbul ignore next */
        cov_23yeuo0red().b[72][0]++;
        cov_23yeuo0red().s[212]++;
        await rename(backupPath, newPath);
      } else
      /* istanbul ignore next */
      {
        cov_23yeuo0red().b[72][1]++;
      }
    } catch (rollbackError) {
      /* istanbul ignore next */
      cov_23yeuo0red().s[213]++;
      console.error('Failed to rollback rename operation:', rollbackError);
    }
    /* istanbul ignore next */
    cov_23yeuo0red().s[214]++;
    return {
      success: false,
      error: errors_1.ErrorUtils.wrap(error),
      rollbackPerformed: true,
      temporaryPaths: backupPath ?
      /* istanbul ignore next */
      (cov_23yeuo0red().b[74][0]++, [backupPath]) :
      /* istanbul ignore next */
      (cov_23yeuo0red().b[74][1]++, [])
    };
  }
}
/**
 * Helper function to recursively copy directories.
 */
async function copyDirectoryRecursive(source, target, options) {
  /* istanbul ignore next */
  cov_23yeuo0red().f[21]++;
  const {
    exclude,
    preserveTimestamps,
    maxDepth,
    currentDepth
  } =
  /* istanbul ignore next */
  (cov_23yeuo0red().s[215]++, options);
  /* istanbul ignore next */
  cov_23yeuo0red().s[216]++;
  if (currentDepth >= maxDepth) {
    /* istanbul ignore next */
    cov_23yeuo0red().b[75][0]++;
    cov_23yeuo0red().s[217]++;
    throw new errors_1.AtomicOperationError(`Maximum directory depth (${maxDepth}) exceeded`, 'MAX_DEPTH_EXCEEDED', 'copyDirectoryRecursive', false, undefined, undefined, {
      context: {
        maxDepth,
        currentDepth
      }
    });
  } else
  /* istanbul ignore next */
  {
    cov_23yeuo0red().b[75][1]++;
  }
  // Ensure target directory exists
  cov_23yeuo0red().s[218]++;
  if (!(await exists(target))) {
    /* istanbul ignore next */
    cov_23yeuo0red().b[76][0]++;
    cov_23yeuo0red().s[219]++;
    await mkdir(target, {
      recursive: true
    });
  } else
  /* istanbul ignore next */
  {
    cov_23yeuo0red().b[76][1]++;
  }
  const items =
  /* istanbul ignore next */
  (cov_23yeuo0red().s[220]++, await readdir(source));
  /* istanbul ignore next */
  cov_23yeuo0red().s[221]++;
  for (const item of items) {
    /* istanbul ignore next */
    cov_23yeuo0red().s[222]++;
    // Skip excluded items
    if (exclude.includes(item)) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[77][0]++;
      cov_23yeuo0red().s[223]++;
      continue;
    } else
    /* istanbul ignore next */
    {
      cov_23yeuo0red().b[77][1]++;
    }
    const sourcePath =
    /* istanbul ignore next */
    (cov_23yeuo0red().s[224]++, path.join(source, item));
    const targetPath =
    /* istanbul ignore next */
    (cov_23yeuo0red().s[225]++, path.join(target, item));
    const stat =
    /* istanbul ignore next */
    (cov_23yeuo0red().s[226]++, await lstat(sourcePath));
    /* istanbul ignore next */
    cov_23yeuo0red().s[227]++;
    if (stat.isDirectory()) {
      /* istanbul ignore next */
      cov_23yeuo0red().b[78][0]++;
      cov_23yeuo0red().s[228]++;
      // Recursively copy subdirectory
      await copyDirectoryRecursive(sourcePath, targetPath, {
        ...options,
        currentDepth: currentDepth + 1
      });
    } else {
      /* istanbul ignore next */
      cov_23yeuo0red().b[78][1]++;
      cov_23yeuo0red().s[229]++;
      if (stat.isFile()) {
        /* istanbul ignore next */
        cov_23yeuo0red().b[79][0]++;
        cov_23yeuo0red().s[230]++;
        // Copy file
        await copyFile(sourcePath, targetPath);
        // Preserve timestamps if requested
        /* istanbul ignore next */
        cov_23yeuo0red().s[231]++;
        if (preserveTimestamps) {
          /* istanbul ignore next */
          cov_23yeuo0red().b[80][0]++;
          cov_23yeuo0red().s[232]++;
          try {
            /* istanbul ignore next */
            cov_23yeuo0red().s[233]++;
            await fs.promises.utimes(targetPath, stat.atime, stat.mtime);
          } catch {
            // Ignore timestamp preservation errors
          }
        } else
        /* istanbul ignore next */
        {
          cov_23yeuo0red().b[80][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_23yeuo0red().b[79][1]++;
      }
    }
    // Skip symbolic links and other special files for security
  }
}
/**
 * Create a new atomic transaction.
 * @returns New atomic transaction instance
 */
function createAtomicTransaction() {
  /* istanbul ignore next */
  cov_23yeuo0red().f[22]++;
  cov_23yeuo0red().s[234]++;
  return new AtomicTransaction();
}
/**
 * Utility to safely execute an operation with automatic rollback.
 * @param operation Function to execute
 * @param rollback Function to call on failure
 * @returns Result of the operation
 */
async function withRollback(operation, rollback) {
  /* istanbul ignore next */
  cov_23yeuo0red().f[23]++;
  cov_23yeuo0red().s[235]++;
  try {
    const result =
    /* istanbul ignore next */
    (cov_23yeuo0red().s[236]++, await operation());
    /* istanbul ignore next */
    cov_23yeuo0red().s[237]++;
    return {
      success: true,
      result,
      rollbackPerformed: false,
      temporaryPaths: []
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_23yeuo0red().s[238]++;
    try {
      /* istanbul ignore next */
      cov_23yeuo0red().s[239]++;
      await rollback();
    } catch (rollbackError) {
      /* istanbul ignore next */
      cov_23yeuo0red().s[240]++;
      console.error('Rollback failed:', rollbackError);
    }
    /* istanbul ignore next */
    cov_23yeuo0red().s[241]++;
    return {
      success: false,
      error: errors_1.ErrorUtils.wrap(error),
      rollbackPerformed: true,
      temporaryPaths: []
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,