{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/mocks/__mocks__/chokidar.js","mappings":";AAAA;;GAEG;AAEH,uBAAuB;AACvB,MAAM,aAAa;IACjB;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;IAC7B,CAAC;IAED,GAAG;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK;QACH,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,EAAE,CAAC,KAAK,EAAE,QAAQ;QAChB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;YAC/B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAChC,CAAC;QACD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACzC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,GAAG,CAAC,KAAK,EAAE,QAAQ;QACjB,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;YAC9B,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC5C,MAAM,KAAK,GAAG,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC1C,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC;gBACf,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,CAAC,KAAK,EAAE,GAAG,IAAI;QACjB,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;YAC9B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;QACrE,CAAC;IACH,CAAC;CACF;AAED,+BAA+B;AAC/B,MAAM,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,aAAa,EAAE,CAAC,CAAC;AAErD,MAAM,CAAC,OAAO,GAAG;IACf,KAAK,EAAE,SAAS;IAChB,SAAS,EAAE,aAAa;IACxB,OAAO,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,aAAa,EAAE;CACxD,CAAC","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/mocks/__mocks__/chokidar.js"],"sourcesContent":["/**\n * Mock for chokidar module to prevent native dependency issues in tests\n */\n\n// Mock FSWatcher class\nclass MockFSWatcher {\n  constructor() {\n    this.listeners = new Map();\n  }\n\n  add() {\n    return this;\n  }\n\n  unwatch() {\n    return this;\n  }\n\n  close() {\n    return Promise.resolve();\n  }\n\n  on(event, listener) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event).push(listener);\n    return this;\n  }\n\n  off(event, listener) {\n    if (this.listeners.has(event)) {\n      const listeners = this.listeners.get(event);\n      const index = listeners.indexOf(listener);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n    return this;\n  }\n\n  emit(event, ...args) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach((listener) => listener(...args));\n    }\n  }\n}\n\n// Mock chokidar.watch function\nconst mockWatch = jest.fn(() => new MockFSWatcher());\n\nmodule.exports = {\n  watch: mockWatch,\n  FSWatcher: MockFSWatcher,\n  default: { watch: mockWatch, FSWatcher: MockFSWatcher },\n};\n"],"version":3}