{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/ipc/robust-website-creation.test.ts","mappings":";AAAA;;;GAGG;AAEH,QAAQ,CAAC,kCAAkC,EAAE,GAAG,EAAE;IAChD,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,EAAE,CAAC,0DAA0D,EAAE,GAAG,EAAE;YAClE,yDAAyD;YACzD,MAAM,uBAAuB,GAAG,KAAK,EAAE,UAAmB,EAAE,EAAE;gBAC5D,IAAI,eAAe,GAAG,KAAK,CAAC;gBAC5B,IAAI,YAAY,GAAG,EAAE,CAAC;gBAEtB,IAAI,CAAC;oBACH,0BAA0B;oBAC1B,YAAY,GAAG,YAAY,CAAC;oBAC5B,eAAe,GAAG,IAAI,CAAC;oBAEvB,IAAI,UAAU,EAAE,CAAC;wBACf,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;oBACtC,CAAC;oBAED,uBAAuB;oBACvB,OAAO,SAAS,CAAC;gBACnB,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,qBAAqB;oBACrB,IAAI,eAAe,IAAI,YAAY,EAAE,CAAC;wBACpC,mBAAmB;wBACnB,mBAAmB;oBACrB,CAAC;oBACD,MAAM,KAAK,CAAC;gBACd,CAAC;YACH,CAAC,CAAC;YAEF,oBAAoB;YACpB,MAAM,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAEhE,iCAAiC;YACjC,MAAM,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2DAA2D,EAAE,GAAG,EAAE;YACnE,MAAM,sBAAsB,GAAG,CAAC,KAAY,EAAE,YAAoB,EAAE,EAAE;gBACpE,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE,CAAC;oBAC7C,+CAA+C;oBAC/C,OAAO,oBAAoB,YAAY,EAAE,CAAC;gBAC5C,CAAC;gBACD,MAAM,KAAK,CAAC;YACd,CAAC,CAAC;YAEF,MAAM,WAAW,GAAG,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;YAChE,MAAM,UAAU,GAAG,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;YAEhD,MAAM,CAAC,sBAAsB,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;YAClF,MAAM,CAAC,GAAG,EAAE,CAAC,sBAAsB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QACtF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;YACjE,MAAM,uBAAuB,GAAG,KAAK,EAAE,gBAAyB,EAAE,kBAA2B,EAAE,EAAE;gBAC/F,IAAI,CAAC;oBACH,IAAI,gBAAgB,EAAE,CAAC;wBACrB,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;oBACnC,CAAC;oBACD,OAAO,gBAAgB,CAAC;oBACxB,6DAA6D;gBAC/D,CAAC;gBAAC,OAAO,YAAY,EAAE,CAAC;oBACtB,6BAA6B;oBAC7B,IAAI,CAAC;wBACH,IAAI,kBAAkB,EAAE,CAAC;4BACvB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;wBACrC,CAAC;wBACD,OAAO,kBAAkB,CAAC;wBAC1B,6DAA6D;oBAC/D,CAAC;oBAAC,OAAO,cAAc,EAAE,CAAC;wBACxB,wEAAwE;wBACxE,OAAO,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAC;wBAC5D,OAAO,qBAAqB,CAAC;oBAC/B,CAAC;gBACH,CAAC;YACH,CAAC,CAAC;YAEF,MAAM,CAAC,uBAAuB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YAC9E,MAAM,CAAC,uBAAuB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YAC/E,MAAM,CAAC,uBAAuB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACnF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,wCAAwC;YACxC,MAAM,WAAW,GAAG,CAAC,IAAY,EAAE,UAAmB,EAAE,EAAE;gBACxD,IAAI,CAAC;oBACH,IAAI,UAAU,EAAE,CAAC;wBACf,kCAAkC;wBAClC,OAAO,eAAe,IAAI,EAAE,CAAC;oBAC/B,CAAC;oBACD,OAAO,kBAAkB,CAAC;gBAC5B,CAAC;gBAAC,OAAO,MAAM,EAAE,CAAC;oBAChB,6BAA6B;oBAC7B,OAAO,CAAC,KAAK,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC;oBACzC,OAAO,gBAAgB,CAAC;gBAC1B,CAAC;YACH,CAAC,CAAC;YAEF,0BAA0B;YAC1B,MAAM,CAAC,WAAW,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;YAEvE,8BAA8B;YAC9B,MAAM,CAAC,WAAW,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAC/D,MAAM,iBAAiB,GAAG,CAAC,IAAY,EAAE,MAAe,EAAE,EAAE;gBAC1D,IAAI,CAAC,MAAM,EAAE,CAAC;oBACZ,MAAM,IAAI,KAAK,CAAC,6BAA6B,IAAI,EAAE,CAAC,CAAC;gBACvD,CAAC;gBACD,OAAO,IAAI,CAAC;YACd,CAAC,CAAC;YAEF,MAAM,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7D,MAAM,CAAC,GAAG,EAAE,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;QAClG,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,MAAM,UAAU,GAAG,CAAC,IAAY,EAAE,OAA+C,EAAE,EAAE;gBACnF,0DAA0D;gBAC1D,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACrC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACjC,OAAO,WAAW,IAAI,oBAAoB,CAAC;YAC7C,CAAC,CAAC;YAEF,MAAM,MAAM,GAAG,UAAU,CAAC,YAAY,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;YAC1E,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;QACxC,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;YAChE,MAAM,WAAW,GAAG,CAAC,SAAiB,EAAE,MAAc,EAAE,aAAoB,EAAE,EAAE;gBAC9E,OAAO,aAAa,SAAS,KAAK,MAAM,MAAM,aAAa,CAAC,OAAO,EAAE,CAAC;YACxE,CAAC,CAAC;YAEF,MAAM,aAAa,GAAG,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;YACnD,MAAM,cAAc,GAAG,WAAW,CAAC,cAAc,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;YAE7E,MAAM,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,mDAAmD,CAAC,CAAC;YACjF,MAAM,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACjD,MAAM,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YAC5C,MAAM,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACtE,MAAM,yBAAyB,GAAG,KAAK,EAAE,UAAmB,EAAE,EAAE;gBAC9D,IAAI,CAAC;oBACH,IAAI,UAAU,EAAE,CAAC;wBACf,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;oBACpC,CAAC;oBACD,OAAO,SAAS,CAAC;gBACnB,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,MAAM,IAAI,KAAK,CAAC,YAAY,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBACxF,CAAC;YACH,CAAC,CAAC;YAEF,MAAM,MAAM,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACxE,MAAM,MAAM,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;QAC3F,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QACpC,EAAE,CAAC,gEAAgE,EAAE,GAAG,EAAE;YACxE,MAAM,kBAAkB,GAAG,CAAC,YAAqB,EAAE,YAAqB,EAAE,EAAE;gBAC1E,MAAM,OAAO,GAAa,EAAE,CAAC;gBAE7B,SAAS;gBACT,IAAI,CAAC,YAAY,EAAE,CAAC;oBAClB,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;gBACnC,CAAC;gBACD,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;gBAEjC,SAAS;gBACT,IAAI,CAAC;oBACH,IAAI,CAAC,YAAY,EAAE,CAAC;wBAClB,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;oBACnC,CAAC;oBACD,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;oBACjC,6DAA6D;gBAC/D,CAAC;gBAAC,OAAO,MAAM,EAAE,CAAC;oBAChB,OAAO,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;oBAC9C,kEAAkE;gBACpE,CAAC;gBAED,OAAO,OAAO,CAAC;YACjB,CAAC,CAAC;YAEF,MAAM,CAAC,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,CAAC,CAAC;YACzF,MAAM,CAAC,kBAAkB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,kBAAkB,EAAE,+BAA+B,CAAC,CAAC,CAAC;YACvG,MAAM,CAAC,GAAG,EAAE,CAAC,kBAAkB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YAOzD,MAAM,YAAY,GAAG,CAAC,OAAgB,EAAE,OAAe,EAAE,cAAc,GAAG,KAAK,EAAmB,EAAE;gBAClG,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC;YAC9C,CAAC,CAAC;YAEF,MAAM,aAAa,GAAG,YAAY,CAAC,IAAI,EAAE,kCAAkC,CAAC,CAAC;YAC7E,MAAM,aAAa,GAAG,YAAY,CAAC,KAAK,EAAE,kBAAkB,CAAC,CAAC;YAC9D,MAAM,aAAa,GAAG,YAAY,CAAC,KAAK,EAAE,+BAA+B,EAAE,IAAI,CAAC,CAAC;YAEjF,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1C,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/ipc/robust-website-creation.test.ts"],"sourcesContent":["/**\n * @file Tests for robust website creation error handling concepts\n * These tests validate the error handling patterns and cleanup strategies\n */\n\ndescribe('Robust Website Creation Concepts', () => {\n  describe('Error Handling Patterns', () => {\n    it('should provide atomic operations with cleanup on failure', () => {\n      // Test that the pattern for atomic operations is correct\n      const simulateAtomicOperation = async (shouldFail: boolean) => {\n        let resourceCreated = false;\n        let resourcePath = '';\n\n        try {\n          // Step 1: Create resource\n          resourcePath = '/test/path';\n          resourceCreated = true;\n\n          if (shouldFail) {\n            throw new Error('Operation failed');\n          }\n\n          // Step 2: Use resource\n          return 'success';\n        } catch (error) {\n          // Cleanup on failure\n          if (resourceCreated && resourcePath) {\n            // Simulate cleanup\n            // Cleanup resource\n          }\n          throw error;\n        }\n      };\n\n      // Test success case\n      expect(simulateAtomicOperation(false)).resolves.toBe('success');\n\n      // Test failure case with cleanup\n      expect(simulateAtomicOperation(true)).rejects.toThrow('Operation failed');\n    });\n\n    it('should handle \"already exists\" errors with smart recovery', () => {\n      const handleExistingResource = (error: Error, resourceName: string) => {\n        if (error.message.includes('already exists')) {\n          // Smart recovery: try to use existing resource\n          return `Opening existing ${resourceName}`;\n        }\n        throw error;\n      };\n\n      const existsError = new Error('Resource \"test\" already exists');\n      const otherError = new Error('Different error');\n\n      expect(handleExistingResource(existsError, 'test')).toBe('Opening existing test');\n      expect(() => handleExistingResource(otherError, 'test')).toThrow('Different error');\n    });\n\n    it('should provide graceful fallbacks for server operations', () => {\n      const startServerWithFallback = async (shouldServerFail: boolean, shouldFallbackFail: boolean) => {\n        try {\n          if (shouldServerFail) {\n            throw new Error('Server failed');\n          }\n          return 'server-success';\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        } catch (_serverError) {\n          // Fallback to static content\n          try {\n            if (shouldFallbackFail) {\n              throw new Error('Fallback failed');\n            }\n            return 'fallback-success';\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          } catch (_fallbackError) {\n            // Even if fallback fails, don't throw - window can be manually reloaded\n            console.warn('Fallback failed, manual intervention needed');\n            return 'manual-intervention';\n          }\n        }\n      };\n\n      expect(startServerWithFallback(false, false)).resolves.toBe('server-success');\n      expect(startServerWithFallback(true, false)).resolves.toBe('fallback-success');\n      expect(startServerWithFallback(true, true)).resolves.toBe('manual-intervention');\n    });\n  });\n\n  describe('File System Operations', () => {\n    it('should handle directory cleanup safely', () => {\n      // Test that cleanup operations are safe\n      const safeCleanup = (path: string, pathExists: boolean) => {\n        try {\n          if (pathExists) {\n            // Simulate safe recursive removal\n            return `Cleaned up: ${path}`;\n          }\n          return 'Nothing to clean';\n        } catch (_error) {\n          // Don't throw cleanup errors\n          console.error('Cleanup failed:', _error);\n          return 'Cleanup failed';\n        }\n      };\n\n      // Test with existing path\n      expect(safeCleanup('/test/path', true)).toBe('Cleaned up: /test/path');\n\n      // Test with non-existing path\n      expect(safeCleanup('/test/path', false)).toBe('Nothing to clean');\n    });\n\n    it('should validate directory existence before operations', () => {\n      const validateDirectory = (path: string, exists: boolean) => {\n        if (!exists) {\n          throw new Error(`Directory does not exist: ${path}`);\n        }\n        return true;\n      };\n\n      expect(validateDirectory('/existing/path', true)).toBe(true);\n      expect(() => validateDirectory('/nonexistent/path', false)).toThrow('Directory does not exist');\n    });\n\n    it('should provide safe rmSync operation pattern', () => {\n      const safeRemove = (path: string, options: { recursive: boolean; force: boolean }) => {\n        // Test that the correct options are used for safe removal\n        expect(options.recursive).toBe(true);\n        expect(options.force).toBe(true);\n        return `Removed ${path} with safe options`;\n      };\n\n      const result = safeRemove('/test/path', { recursive: true, force: true });\n      expect(result).toBe('Removed /test/path with safe options');\n    });\n  });\n\n  describe('Error Message Formatting', () => {\n    it('should provide descriptive error messages with context', () => {\n      const formatError = (operation: string, target: string, originalError: Error) => {\n        return `Failed to ${operation} \"${target}\": ${originalError.message}`;\n      };\n\n      const originalError = new Error('Network timeout');\n      const formattedError = formatError('open website', 'my-site', originalError);\n\n      expect(formattedError).toBe('Failed to open website \"my-site\": Network timeout');\n      expect(formattedError).toContain('open website');\n      expect(formattedError).toContain('my-site');\n      expect(formattedError).toContain('Network timeout');\n    });\n\n    it('should preserve error context through async operations', async () => {\n      const asyncOperationWithContext = async (shouldFail: boolean) => {\n        try {\n          if (shouldFail) {\n            throw new Error('Original error');\n          }\n          return 'success';\n        } catch (error) {\n          throw new Error(`Context: ${error instanceof Error ? error.message : String(error)}`);\n        }\n      };\n\n      await expect(asyncOperationWithContext(false)).resolves.toBe('success');\n      await expect(asyncOperationWithContext(true)).rejects.toThrow('Context: Original error');\n    });\n  });\n\n  describe('Integration Patterns', () => {\n    it('should handle step-by-step validation in multi-step operations', () => {\n      const multiStepOperation = (step1Success: boolean, step2Success: boolean) => {\n        const results: string[] = [];\n\n        // Step 1\n        if (!step1Success) {\n          throw new Error('Step 1 failed');\n        }\n        results.push('Step 1 completed');\n\n        // Step 2\n        try {\n          if (!step2Success) {\n            throw new Error('Step 2 failed');\n          }\n          results.push('Step 2 completed');\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        } catch (_error) {\n          results.push('Step 2 failed, but continuing');\n          // Don't throw - some operations can continue with partial success\n        }\n\n        return results;\n      };\n\n      expect(multiStepOperation(true, true)).toEqual(['Step 1 completed', 'Step 2 completed']);\n      expect(multiStepOperation(true, false)).toEqual(['Step 1 completed', 'Step 2 failed, but continuing']);\n      expect(() => multiStepOperation(false, true)).toThrow('Step 1 failed');\n    });\n\n    it('should provide clear success/failure indicators', () => {\n      interface OperationResult {\n        success: boolean;\n        message: string;\n        partialSuccess?: boolean;\n      }\n\n      const createResult = (success: boolean, message: string, partialSuccess = false): OperationResult => {\n        return { success, message, partialSuccess };\n      };\n\n      const successResult = createResult(true, 'Operation completed successfully');\n      const failureResult = createResult(false, 'Operation failed');\n      const partialResult = createResult(false, 'Operation partially completed', true);\n\n      expect(successResult.success).toBe(true);\n      expect(failureResult.success).toBe(false);\n      expect(partialResult.partialSuccess).toBe(true);\n    });\n  });\n});\n"],"version":3}