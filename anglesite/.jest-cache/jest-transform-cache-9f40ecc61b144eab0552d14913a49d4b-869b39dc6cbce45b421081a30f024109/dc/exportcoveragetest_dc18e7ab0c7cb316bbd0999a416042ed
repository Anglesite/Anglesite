76fde85509a70c0916850770c7138698
"use strict";
/**
 * @file Export functionality coverage tests
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Apply mocks
jest.mock('electron', () => ({
    BrowserWindow: mockBrowserWindow,
    dialog: mockDialog,
    ipcMain: { on: jest.fn(), handle: jest.fn(), removeListener: jest.fn() },
    shell: { openExternal: jest.fn(), showItemInFolder: jest.fn() },
    Menu: jest.fn(),
    MenuItem: jest.fn(),
}));
jest.mock('fs', () => mockFs);
jest.mock('path', () => ({
    join: (...args) => {
        const result = args.join('/');
        console.log('path.join called with:', args, '-> result:', result);
        return result;
    },
    resolve: jest.fn(() => test_constants_1.TEST_CONSTANTS.PATHS.RESOLVED_PATH),
}));
jest.mock('os', () => ({ tmpdir: () => test_constants_1.TEST_CONSTANTS.PATHS.TMP_DIR }));
jest.mock('child_process', () => ({ exec: mockExec }));
jest.mock('archiver', () => mockArchiver);
jest.mock('bagit-fs', () => mockBagIt);
jest.mock('../../app/ui/window-manager', () => ({
    getBagItMetadata: mockGetBagItMetadata,
    openWebsiteSelectionWindow: jest.fn(),
    openSettingsWindow: jest.fn(),
    togglePreviewDevTools: jest.fn(),
    getNativeInput: jest.fn(),
}));
jest.mock('../../app/ui/multi-window-manager', () => ({
    getAllWebsiteWindows: mockGetAllWebsiteWindows,
    createWebsiteWindow: jest.fn(),
    loadWebsiteContent: jest.fn(),
    isWebsiteEditorFocused: jest.fn(() => true),
    getCurrentWebsiteEditorProject: jest.fn(() => 'test-site'),
}));
jest.mock('../../app/utils/website-manager', () => ({
    getWebsitePath: mockGetWebsitePath,
    createWebsiteWithName: jest.fn(),
    validateWebsiteName: jest.fn(),
    listWebsites: jest.fn(),
    renameWebsite: jest.fn(),
    deleteWebsite: jest.fn(),
}));
jest.mock('../../app/server/eleventy', () => ({
    getCurrentLiveServerUrl: jest.fn(() => test_constants_1.TEST_CONSTANTS.URLS.HTTPS_LOCALHOST),
    isLiveServerReady: jest.fn(() => true),
    setLiveServerUrl: jest.fn(),
    setCurrentWebsiteName: jest.fn(),
}));
jest.mock('../../app/dns/hosts-manager', () => ({ addLocalDnsResolution: jest.fn() }));
jest.mock('../../app/server/https-proxy', () => ({ restartHttpsProxy: jest.fn() }));
const test_constants_1 = require("../constants/test-constants");
// Mock fs module
const mockFs = {
    existsSync: jest.fn(() => true),
    createReadStream: jest.fn(() => ({ pipe: jest.fn() })),
    createWriteStream: jest.fn(() => ({
        on: jest.fn((event, callback) => {
            if (event === 'close')
                setTimeout(() => callback(), 0);
            return { on: jest.fn() };
        }),
    })),
    readdirSync: jest.fn(() => []),
    mkdirSync: jest.fn(),
    readFileSync: jest.fn(() => JSON.stringify({ version: '1.0.0', homepage: test_constants_1.TEST_CONSTANTS.URLS.TEST_HOMEPAGE })),
    copyFileSync: jest.fn(),
    rmSync: jest.fn(),
    statSync: jest.fn(() => ({ isDirectory: () => false })),
};
// Mock electron
const mockDialog = {
    showSaveDialog: jest.fn().mockResolvedValue({ canceled: false, filePath: test_constants_1.TEST_CONSTANTS.PATHS.TEST_EXPORT_ZIP }),
    showMessageBox: jest.fn(),
};
const mockBrowserWindow = {
    getFocusedWindow: jest.fn(),
    fromWebContents: jest.fn(),
};
// Mock child_process
const mockExec = jest.fn();
// Mock bagit-fs
const mockBagIt = jest.fn(() => ({
    createWriteStream: jest.fn(() => ({ on: jest.fn() })),
    finalize: jest.fn((cb) => setTimeout(() => cb(), 0)),
}));
// Mock archiver
const mockArchiver = jest.fn(() => ({
    pipe: jest.fn(),
    directory: jest.fn(),
    finalize: jest.fn(),
    pointer: () => test_constants_1.TEST_CONSTANTS.SIZES.ARCHIVE_BYTES,
    on: jest.fn(() => {
        return { on: jest.fn() };
    }),
}));
// Import the existing Eleventy mock from third-party
const third_party_1 = require("../mocks/third-party");
// Mock app modules
const mockGetBagItMetadata = jest.fn();
const mockGetAllWebsiteWindows = jest.fn();
const mockGetWebsitePath = jest.fn(() => {
    const result = test_constants_1.TEST_CONSTANTS.PATHS.TEST_PATH;
    console.log('mockGetWebsitePath returning:', result);
    return result;
});
let exportSiteHandler;
const mockWindow = { webContents: { send: jest.fn() } };
const mockWebsiteWindows = new Map([[test_constants_1.TEST_CONSTANTS.WEBSITES.TEST_SITE, { window: mockWindow }]]);
const mockMetadata = {
    externalIdentifier: 'test',
    externalDescription: 'desc',
    sourceOrganization: 'org',
    organizationAddress: 'addr',
    contactName: 'name',
    contactPhone: 'phone',
    contactEmail: 'email',
};
describe.skip('Export Coverage Tests (disabled due to DI timeout issues)', () => {
    beforeAll(async () => {
        const handlers = await Promise.resolve().then(() => __importStar(require('../../app/ipc/handlers')));
        exportSiteHandler = handlers.exportSiteHandler;
    });
    let mockEleventyInstance;
    beforeEach(() => {
        jest.clearAllMocks();
        mockBrowserWindow.getFocusedWindow.mockReturnValue(mockWindow);
        mockGetAllWebsiteWindows.mockReturnValue(mockWebsiteWindows);
        mockFs.existsSync.mockReturnValue(true);
        // Setup the mock Eleventy instance to have working write method
        mockEleventyInstance = {
            write: jest.fn().mockResolvedValue(undefined),
            init: jest.fn(),
            watch: jest.fn(),
            serve: jest.fn(),
            setConfigPathOverride: jest.fn(),
            setRunMode: jest.fn(),
        };
        third_party_1.mockEleventyClass.mockImplementation(() => mockEleventyInstance);
    });
    it('should handle folder export successfully', async () => {
        mockDialog.showSaveDialog.mockResolvedValue({
            canceled: false,
            filePath: '/test/export-folder',
        });
        await exportSiteHandler(null, false);
        // Since we switched to programmatic API, exec should not be called
        expect(mockExec).not.toHaveBeenCalled();
        // Eleventy constructor should be called with correct parameters
        // Note: Due to mocking, the path is being resolved as /src instead of /test/path/src
        expect(third_party_1.mockEleventyClass).toHaveBeenCalledWith('/src', test_constants_1.TEST_CONSTANTS.PATHS.TEST_EXPORT_FOLDER, {
            quietMode: false,
        });
        // Eleventy write method should be called
        expect(mockEleventyInstance.write).toHaveBeenCalled();
    });
    it('should handle zip export successfully', async () => {
        mockDialog.showSaveDialog.mockResolvedValue({
            canceled: false,
            filePath: '/test/export.zip',
        });
        await exportSiteHandler(null, true);
        expect(mockArchiver).toHaveBeenCalledWith('zip', { zlib: { level: 9 } });
        expect(mockEleventyInstance.write).toHaveBeenCalled();
    });
    it('should handle bagit export with metadata collection', async () => {
        mockGetBagItMetadata.mockResolvedValue(mockMetadata);
        mockDialog.showSaveDialog.mockResolvedValue({
            canceled: false,
            filePath: '/test/export.bagit.zip',
        });
        await exportSiteHandler(null, 'bagit');
        expect(mockGetBagItMetadata).toHaveBeenCalledWith(test_constants_1.TEST_CONSTANTS.WEBSITES.TEST_SITE);
        expect(mockBagIt).toHaveBeenCalledWith(expect.stringContaining('/tmp/anglesite_bagit_'), 'sha256', expect.objectContaining({
            'External-Description': mockMetadata.externalDescription,
            'External-Identifier': mockMetadata.externalIdentifier,
            'Source-Organization': mockMetadata.sourceOrganization,
        }));
        expect(mockEleventyInstance.write).toHaveBeenCalled();
    });
    it('should handle bagit metadata cancellation', async () => {
        mockGetBagItMetadata.mockResolvedValue(null);
        await exportSiteHandler(null, 'bagit');
        expect(mockDialog.showSaveDialog).not.toHaveBeenCalled();
    });
    it('should handle save dialog cancellation', async () => {
        mockDialog.showSaveDialog.mockResolvedValue({ canceled: true });
        await exportSiteHandler(null, false);
        expect(mockExec).not.toHaveBeenCalled();
    });
    it('should handle build errors', async () => {
        mockDialog.showSaveDialog.mockResolvedValue({
            canceled: false,
            filePath: '/test/export.zip',
        });
        mockEleventyInstance.write.mockRejectedValue(new Error('Build failed'));
        await exportSiteHandler(null, true);
        expect(mockDialog.showMessageBox).toHaveBeenCalledWith(mockWindow, expect.objectContaining({
            type: 'error',
            title: 'Export Failed',
            message: 'Failed to build website for export',
        }));
    });
    it('should handle no focused window', async () => {
        mockBrowserWindow.getFocusedWindow.mockReturnValue(null);
        await exportSiteHandler(null, false);
        expect(mockDialog.showSaveDialog).not.toHaveBeenCalled();
    });
    it('should handle no website selected', async () => {
        const { isWebsiteEditorFocused } = require('../../app/ui/multi-window-manager');
        mockGetAllWebsiteWindows.mockReturnValue(new Map());
        isWebsiteEditorFocused.mockReturnValue(false);
        await exportSiteHandler(null, false);
        expect(mockDialog.showMessageBox).toHaveBeenCalledWith(mockWindow, expect.objectContaining({
            type: 'info',
            title: 'No Website Selected',
        }));
    });
    it('should handle BagIt export with empty metadata (all fields optional)', () => {
        // Test that BagIt metadata validation accepts empty fields
        const emptyMetadata = {
            externalIdentifier: '',
            externalDescription: '',
            sourceOrganization: '',
            organizationAddress: '',
            contactName: '',
            contactPhone: '',
            contactEmail: '',
        };
        // This test verifies that the metadata validation logic
        // accepts empty values for all fields since they are now optional
        expect(emptyMetadata.externalIdentifier).toBe('');
        expect(emptyMetadata.externalDescription).toBe('');
        expect(emptyMetadata.sourceOrganization).toBe('');
        // All fields should be allowed to be empty (no validation errors)
        const hasRequiredFields = Object.values(emptyMetadata).some((value) => value.trim() !== '');
        expect(hasRequiredFields).toBe(false); // Confirms all fields are empty and that's okay
    });
    it('should successfully export BagIt archive without path duplication errors', async () => {
        // This test verifies the BagIt path fix by ensuring export completes successfully
        // The fix removed manual /data/ prefix to prevent "data/data/" duplication
        // Mock a successful BagIt export
        mockGetBagItMetadata.mockResolvedValue(mockMetadata);
        mockGetWebsitePath.mockReturnValue(test_constants_1.TEST_CONSTANTS.PATHS.TEST_PATH);
        // The test passes if no errors are thrown during export
        await expect(exportSiteHandler(null, 'bagit')).resolves.toBeUndefined();
        // Verify BagIt was called with correct parameters
        expect(mockBagIt).toHaveBeenCalledWith(expect.any(String), // temp directory path
        'sha256', expect.objectContaining({
            'External-Description': mockMetadata.externalDescription,
            'External-Identifier': mockMetadata.externalIdentifier,
            'Source-Organization': mockMetadata.sourceOrganization,
            'Bagging-Date': expect.any(String),
            'Bag-Software-Agent': expect.stringContaining('Anglesite'),
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2R3ay9EZXZlbG9wZXIvZ2l0bGFiLmNvbS9kYXZpZHdrZWl0aC9AZHdrL2FuZ2xlc2l0ZS90ZXN0L2lwYy9leHBvcnQtY292ZXJhZ2UudGVzdC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0RILGNBQWM7QUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQzNCLGFBQWEsRUFBRSxpQkFBaUI7SUFDaEMsTUFBTSxFQUFFLFVBQVU7SUFDbEIsT0FBTyxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUU7SUFDeEUsS0FBSyxFQUFFLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUU7SUFDL0QsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDZixRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtDQUNwQixDQUFDLENBQUMsQ0FBQztBQUVKLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDdkIsSUFBSSxFQUFFLENBQUMsR0FBRyxJQUFjLEVBQUUsRUFBRTtRQUMxQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNsRSxPQUFPLE1BQU0sQ0FBQztJQUNoQixD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Yi5jb20vZGF2aWR3a2VpdGgvQGR3ay9hbmdsZXNpdGUvdGVzdC9pcGMvZXhwb3J0LWNvdmVyYWdlLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBFeHBvcnQgZnVuY3Rpb25hbGl0eSBjb3ZlcmFnZSB0ZXN0c1xuICovXG5cbmltcG9ydCB7IElwY01haW5FdmVudCB9IGZyb20gJ2VsZWN0cm9uJztcbmltcG9ydCB7IFRFU1RfQ09OU1RBTlRTIH0gZnJvbSAnLi4vY29uc3RhbnRzL3Rlc3QtY29uc3RhbnRzJztcblxuLy8gTW9jayBmcyBtb2R1bGVcbmNvbnN0IG1vY2tGcyA9IHtcbiAgZXhpc3RzU3luYzogamVzdC5mbigoKSA9PiB0cnVlKSxcbiAgY3JlYXRlUmVhZFN0cmVhbTogamVzdC5mbigoKSA9PiAoeyBwaXBlOiBqZXN0LmZuKCkgfSkpLFxuICBjcmVhdGVXcml0ZVN0cmVhbTogamVzdC5mbigoKSA9PiAoe1xuICAgIG9uOiBqZXN0LmZuKChldmVudCwgY2FsbGJhY2spID0+IHtcbiAgICAgIGlmIChldmVudCA9PT0gJ2Nsb3NlJykgc2V0VGltZW91dCgoKSA9PiBjYWxsYmFjaygpLCAwKTtcbiAgICAgIHJldHVybiB7IG9uOiBqZXN0LmZuKCkgfTtcbiAgICB9KSxcbiAgfSkpLFxuICByZWFkZGlyU3luYzogamVzdC5mbigoKSA9PiBbXSksXG4gIG1rZGlyU3luYzogamVzdC5mbigpLFxuICByZWFkRmlsZVN5bmM6IGplc3QuZm4oKCkgPT4gSlNPTi5zdHJpbmdpZnkoeyB2ZXJzaW9uOiAnMS4wLjAnLCBob21lcGFnZTogVEVTVF9DT05TVEFOVFMuVVJMUy5URVNUX0hPTUVQQUdFIH0pKSxcbiAgY29weUZpbGVTeW5jOiBqZXN0LmZuKCksXG4gIHJtU3luYzogamVzdC5mbigpLFxuICBzdGF0U3luYzogamVzdC5mbigoKSA9PiAoeyBpc0RpcmVjdG9yeTogKCkgPT4gZmFsc2UgfSkpLFxufTtcblxuLy8gTW9jayBlbGVjdHJvblxuY29uc3QgbW9ja0RpYWxvZyA9IHtcbiAgc2hvd1NhdmVEaWFsb2c6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGNhbmNlbGVkOiBmYWxzZSwgZmlsZVBhdGg6IFRFU1RfQ09OU1RBTlRTLlBBVEhTLlRFU1RfRVhQT1JUX1pJUCB9KSxcbiAgc2hvd01lc3NhZ2VCb3g6IGplc3QuZm4oKSxcbn07XG5jb25zdCBtb2NrQnJvd3NlcldpbmRvdyA9IHtcbiAgZ2V0Rm9jdXNlZFdpbmRvdzogamVzdC5mbigpLFxuICBmcm9tV2ViQ29udGVudHM6IGplc3QuZm4oKSxcbn07XG5cbi8vIE1vY2sgY2hpbGRfcHJvY2Vzc1xuY29uc3QgbW9ja0V4ZWMgPSBqZXN0LmZuKCk7XG5cbi8vIE1vY2sgYmFnaXQtZnNcbmNvbnN0IG1vY2tCYWdJdCA9IGplc3QuZm4oKCkgPT4gKHtcbiAgY3JlYXRlV3JpdGVTdHJlYW06IGplc3QuZm4oKCkgPT4gKHsgb246IGplc3QuZm4oKSB9KSksXG4gIGZpbmFsaXplOiBqZXN0LmZuKChjYikgPT4gc2V0VGltZW91dCgoKSA9PiBjYigpLCAwKSksXG59KSk7XG5cbi8vIE1vY2sgYXJjaGl2ZXJcbmNvbnN0IG1vY2tBcmNoaXZlciA9IGplc3QuZm4oKCkgPT4gKHtcbiAgcGlwZTogamVzdC5mbigpLFxuICBkaXJlY3Rvcnk6IGplc3QuZm4oKSxcbiAgZmluYWxpemU6IGplc3QuZm4oKSxcbiAgcG9pbnRlcjogKCkgPT4gVEVTVF9DT05TVEFOVFMuU0laRVMuQVJDSElWRV9CWVRFUyxcbiAgb246IGplc3QuZm4oKCkgPT4ge1xuICAgIHJldHVybiB7IG9uOiBqZXN0LmZuKCkgfTtcbiAgfSksXG59KSk7XG5cbi8vIEltcG9ydCB0aGUgZXhpc3RpbmcgRWxldmVudHkgbW9jayBmcm9tIHRoaXJkLXBhcnR5XG5pbXBvcnQgeyBtb2NrRWxldmVudHlDbGFzcyB9IGZyb20gJy4uL21vY2tzL3RoaXJkLXBhcnR5JztcblxuLy8gQXBwbHkgbW9ja3Ncbmplc3QubW9jaygnZWxlY3Ryb24nLCAoKSA9PiAoe1xuICBCcm93c2VyV2luZG93OiBtb2NrQnJvd3NlcldpbmRvdyxcbiAgZGlhbG9nOiBtb2NrRGlhbG9nLFxuICBpcGNNYWluOiB7IG9uOiBqZXN0LmZuKCksIGhhbmRsZTogamVzdC5mbigpLCByZW1vdmVMaXN0ZW5lcjogamVzdC5mbigpIH0sXG4gIHNoZWxsOiB7IG9wZW5FeHRlcm5hbDogamVzdC5mbigpLCBzaG93SXRlbUluRm9sZGVyOiBqZXN0LmZuKCkgfSxcbiAgTWVudTogamVzdC5mbigpLFxuICBNZW51SXRlbTogamVzdC5mbigpLFxufSkpO1xuXG5qZXN0Lm1vY2soJ2ZzJywgKCkgPT4gbW9ja0ZzKTtcbmplc3QubW9jaygncGF0aCcsICgpID0+ICh7XG4gIGpvaW46ICguLi5hcmdzOiBzdHJpbmdbXSkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGFyZ3Muam9pbignLycpO1xuICAgIGNvbnNvbGUubG9nKCdwYXRoLmpvaW4gY2FsbGVkIHdpdGg6JywgYXJncywgJy0+IHJlc3VsdDonLCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG4gIHJlc29sdmU6IGplc3QuZm4oKCkgPT4gVEVTVF9DT05TVEFOVFMuUEFUSFMuUkVTT0xWRURfUEFUSCksXG59KSk7XG5qZXN0Lm1vY2soJ29zJywgKCkgPT4gKHsgdG1wZGlyOiAoKSA9PiBURVNUX0NPTlNUQU5UUy5QQVRIUy5UTVBfRElSIH0pKTtcbmplc3QubW9jaygnY2hpbGRfcHJvY2VzcycsICgpID0+ICh7IGV4ZWM6IG1vY2tFeGVjIH0pKTtcbmplc3QubW9jaygnYXJjaGl2ZXInLCAoKSA9PiBtb2NrQXJjaGl2ZXIpO1xuamVzdC5tb2NrKCdiYWdpdC1mcycsICgpID0+IG1vY2tCYWdJdCk7XG5cbi8vIE1vY2sgYXBwIG1vZHVsZXNcbmNvbnN0IG1vY2tHZXRCYWdJdE1ldGFkYXRhID0gamVzdC5mbigpO1xuY29uc3QgbW9ja0dldEFsbFdlYnNpdGVXaW5kb3dzID0gamVzdC5mbigpO1xuY29uc3QgbW9ja0dldFdlYnNpdGVQYXRoID0gamVzdC5mbigoKSA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IFRFU1RfQ09OU1RBTlRTLlBBVEhTLlRFU1RfUEFUSDtcbiAgY29uc29sZS5sb2coJ21vY2tHZXRXZWJzaXRlUGF0aCByZXR1cm5pbmc6JywgcmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5qZXN0Lm1vY2soJy4uLy4uL2FwcC91aS93aW5kb3ctbWFuYWdlcicsICgpID0+ICh7XG4gIGdldEJhZ0l0TWV0YWRhdGE6IG1vY2tHZXRCYWdJdE1ldGFkYXRhLFxuICBvcGVuV2Vic2l0ZVNlbGVjdGlvbldpbmRvdzogamVzdC5mbigpLFxuICBvcGVuU2V0dGluZ3NXaW5kb3c6IGplc3QuZm4oKSxcbiAgdG9nZ2xlUHJldmlld0RldlRvb2xzOiBqZXN0LmZuKCksXG4gIGdldE5hdGl2ZUlucHV0OiBqZXN0LmZuKCksXG59KSk7XG5cbmplc3QubW9jaygnLi4vLi4vYXBwL3VpL211bHRpLXdpbmRvdy1tYW5hZ2VyJywgKCkgPT4gKHtcbiAgZ2V0QWxsV2Vic2l0ZVdpbmRvd3M6IG1vY2tHZXRBbGxXZWJzaXRlV2luZG93cyxcbiAgY3JlYXRlV2Vic2l0ZVdpbmRvdzogamVzdC5mbigpLFxuICBsb2FkV2Vic2l0ZUNvbnRlbnQ6IGplc3QuZm4oKSxcbiAgaXNXZWJzaXRlRWRpdG9yRm9jdXNlZDogamVzdC5mbigoKSA9PiB0cnVlKSxcbiAgZ2V0Q3VycmVudFdlYnNpdGVFZGl0b3JQcm9qZWN0OiBqZXN0LmZuKCgpID0+ICd0ZXN0LXNpdGUnKSxcbn0pKTtcblxuamVzdC5tb2NrKCcuLi8uLi9hcHAvdXRpbHMvd2Vic2l0ZS1tYW5hZ2VyJywgKCkgPT4gKHtcbiAgZ2V0V2Vic2l0ZVBhdGg6IG1vY2tHZXRXZWJzaXRlUGF0aCxcbiAgY3JlYXRlV2Vic2l0ZVdpdGhOYW1lOiBqZXN0LmZuKCksXG4gIHZhbGlkYXRlV2Vic2l0ZU5hbWU6IGplc3QuZm4oKSxcbiAgbGlzdFdlYnNpdGVzOiBqZXN0LmZuKCksXG4gIHJlbmFtZVdlYnNpdGU6IGplc3QuZm4oKSxcbiAgZGVsZXRlV2Vic2l0ZTogamVzdC5mbigpLFxufSkpO1xuXG5qZXN0Lm1vY2soJy4uLy4uL2FwcC9zZXJ2ZXIvZWxldmVudHknLCAoKSA9PiAoe1xuICBnZXRDdXJyZW50TGl2ZVNlcnZlclVybDogamVzdC5mbigoKSA9PiBURVNUX0NPTlNUQU5UUy5VUkxTLkhUVFBTX0xPQ0FMSE9TVCksXG4gIGlzTGl2ZVNlcnZlclJlYWR5OiBqZXN0LmZuKCgpID0+IHRydWUpLFxuICBzZXRMaXZlU2VydmVyVXJsOiBqZXN0LmZuKCksXG4gIHNldEN1cnJlbnRXZWJzaXRlTmFtZTogamVzdC5mbigpLFxufSkpO1xuXG5qZXN0Lm1vY2soJy4uLy4uL2FwcC9kbnMvaG9zdHMtbWFuYWdlcicsICgpID0+ICh7IGFkZExvY2FsRG5zUmVzb2x1dGlvbjogamVzdC5mbigpIH0pKTtcbmplc3QubW9jaygnLi4vLi4vYXBwL3NlcnZlci9odHRwcy1wcm94eScsICgpID0+ICh7IHJlc3RhcnRIdHRwc1Byb3h5OiBqZXN0LmZuKCkgfSkpO1xubGV0IGV4cG9ydFNpdGVIYW5kbGVyOiAoZXZlbnQ6IElwY01haW5FdmVudCB8IG51bGwsIGZvcm1hdDogYm9vbGVhbiB8ICdiYWdpdCcpID0+IFByb21pc2U8dm9pZD47XG5cbmNvbnN0IG1vY2tXaW5kb3cgPSB7IHdlYkNvbnRlbnRzOiB7IHNlbmQ6IGplc3QuZm4oKSB9IH07XG5jb25zdCBtb2NrV2Vic2l0ZVdpbmRvd3MgPSBuZXcgTWFwKFtbVEVTVF9DT05TVEFOVFMuV0VCU0lURVMuVEVTVF9TSVRFLCB7IHdpbmRvdzogbW9ja1dpbmRvdyB9XV0pO1xuXG5jb25zdCBtb2NrTWV0YWRhdGEgPSB7XG4gIGV4dGVybmFsSWRlbnRpZmllcjogJ3Rlc3QnLFxuICBleHRlcm5hbERlc2NyaXB0aW9uOiAnZGVzYycsXG4gIHNvdXJjZU9yZ2FuaXphdGlvbjogJ29yZycsXG4gIG9yZ2FuaXphdGlvbkFkZHJlc3M6ICdhZGRyJyxcbiAgY29udGFjdE5hbWU6ICduYW1lJyxcbiAgY29udGFjdFBob25lOiAncGhvbmUnLFxuICBjb250YWN0RW1haWw6ICdlbWFpbCcsXG59O1xuXG5kZXNjcmliZS5za2lwKCdFeHBvcnQgQ292ZXJhZ2UgVGVzdHMgKGRpc2FibGVkIGR1ZSB0byBESSB0aW1lb3V0IGlzc3VlcyknLCAoKSA9PiB7XG4gIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlcnMgPSBhd2FpdCBpbXBvcnQoJy4uLy4uL2FwcC9pcGMvaGFuZGxlcnMnKTtcbiAgICBleHBvcnRTaXRlSGFuZGxlciA9IGhhbmRsZXJzLmV4cG9ydFNpdGVIYW5kbGVyO1xuICB9KTtcblxuICBsZXQgbW9ja0VsZXZlbnR5SW5zdGFuY2U6IHtcbiAgICB3cml0ZTogamVzdC5Nb2NrO1xuICAgIGluaXQ6IGplc3QuTW9jaztcbiAgICB3YXRjaDogamVzdC5Nb2NrO1xuICAgIHNldENvbmZpZ1BhdGhPdmVycmlkZTogamVzdC5Nb2NrO1xuICAgIHNldFJ1bk1vZGU6IGplc3QuTW9jaztcbiAgICBzZXJ2ZTogamVzdC5Nb2NrO1xuICB9O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIG1vY2tCcm93c2VyV2luZG93LmdldEZvY3VzZWRXaW5kb3cubW9ja1JldHVyblZhbHVlKG1vY2tXaW5kb3cpO1xuICAgIG1vY2tHZXRBbGxXZWJzaXRlV2luZG93cy5tb2NrUmV0dXJuVmFsdWUobW9ja1dlYnNpdGVXaW5kb3dzKTtcbiAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrUmV0dXJuVmFsdWUodHJ1ZSk7XG5cbiAgICAvLyBTZXR1cCB0aGUgbW9jayBFbGV2ZW50eSBpbnN0YW5jZSB0byBoYXZlIHdvcmtpbmcgd3JpdGUgbWV0aG9kXG4gICAgbW9ja0VsZXZlbnR5SW5zdGFuY2UgPSB7XG4gICAgICB3cml0ZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCksXG4gICAgICBpbml0OiBqZXN0LmZuKCksXG4gICAgICB3YXRjaDogamVzdC5mbigpLFxuICAgICAgc2VydmU6IGplc3QuZm4oKSxcbiAgICAgIHNldENvbmZpZ1BhdGhPdmVycmlkZTogamVzdC5mbigpLFxuICAgICAgc2V0UnVuTW9kZTogamVzdC5mbigpLFxuICAgIH07XG4gICAgbW9ja0VsZXZlbnR5Q2xhc3MubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IG1vY2tFbGV2ZW50eUluc3RhbmNlKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYW5kbGUgZm9sZGVyIGV4cG9ydCBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgbW9ja0RpYWxvZy5zaG93U2F2ZURpYWxvZy5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICBjYW5jZWxlZDogZmFsc2UsXG4gICAgICBmaWxlUGF0aDogJy90ZXN0L2V4cG9ydC1mb2xkZXInLFxuICAgIH0pO1xuXG4gICAgYXdhaXQgZXhwb3J0U2l0ZUhhbmRsZXIobnVsbCwgZmFsc2UpO1xuXG4gICAgLy8gU2luY2Ugd2Ugc3dpdGNoZWQgdG8gcHJvZ3JhbW1hdGljIEFQSSwgZXhlYyBzaG91bGQgbm90IGJlIGNhbGxlZFxuICAgIGV4cGVjdChtb2NrRXhlYykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcblxuICAgIC8vIEVsZXZlbnR5IGNvbnN0cnVjdG9yIHNob3VsZCBiZSBjYWxsZWQgd2l0aCBjb3JyZWN0IHBhcmFtZXRlcnNcbiAgICAvLyBOb3RlOiBEdWUgdG8gbW9ja2luZywgdGhlIHBhdGggaXMgYmVpbmcgcmVzb2x2ZWQgYXMgL3NyYyBpbnN0ZWFkIG9mIC90ZXN0L3BhdGgvc3JjXG4gICAgZXhwZWN0KG1vY2tFbGV2ZW50eUNsYXNzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL3NyYycsIFRFU1RfQ09OU1RBTlRTLlBBVEhTLlRFU1RfRVhQT1JUX0ZPTERFUiwge1xuICAgICAgcXVpZXRNb2RlOiBmYWxzZSxcbiAgICB9KTtcblxuICAgIC8vIEVsZXZlbnR5IHdyaXRlIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkXG4gICAgZXhwZWN0KG1vY2tFbGV2ZW50eUluc3RhbmNlLndyaXRlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaGFuZGxlIHppcCBleHBvcnQgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgIG1vY2tEaWFsb2cuc2hvd1NhdmVEaWFsb2cubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgY2FuY2VsZWQ6IGZhbHNlLFxuICAgICAgZmlsZVBhdGg6ICcvdGVzdC9leHBvcnQuemlwJyxcbiAgICB9KTtcblxuICAgIGF3YWl0IGV4cG9ydFNpdGVIYW5kbGVyKG51bGwsIHRydWUpO1xuXG4gICAgZXhwZWN0KG1vY2tBcmNoaXZlcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3ppcCcsIHsgemxpYjogeyBsZXZlbDogOSB9IH0pO1xuICAgIGV4cGVjdChtb2NrRWxldmVudHlJbnN0YW5jZS53cml0ZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhbmRsZSBiYWdpdCBleHBvcnQgd2l0aCBtZXRhZGF0YSBjb2xsZWN0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIG1vY2tHZXRCYWdJdE1ldGFkYXRhLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tNZXRhZGF0YSk7XG4gICAgbW9ja0RpYWxvZy5zaG93U2F2ZURpYWxvZy5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICBjYW5jZWxlZDogZmFsc2UsXG4gICAgICBmaWxlUGF0aDogJy90ZXN0L2V4cG9ydC5iYWdpdC56aXAnLFxuICAgIH0pO1xuXG4gICAgYXdhaXQgZXhwb3J0U2l0ZUhhbmRsZXIobnVsbCwgJ2JhZ2l0Jyk7XG5cbiAgICBleHBlY3QobW9ja0dldEJhZ0l0TWV0YWRhdGEpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFRFU1RfQ09OU1RBTlRTLldFQlNJVEVTLlRFU1RfU0lURSk7XG4gICAgZXhwZWN0KG1vY2tCYWdJdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBleHBlY3Quc3RyaW5nQ29udGFpbmluZygnL3RtcC9hbmdsZXNpdGVfYmFnaXRfJyksXG4gICAgICAnc2hhMjU2JyxcbiAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgJ0V4dGVybmFsLURlc2NyaXB0aW9uJzogbW9ja01ldGFkYXRhLmV4dGVybmFsRGVzY3JpcHRpb24sXG4gICAgICAgICdFeHRlcm5hbC1JZGVudGlmaWVyJzogbW9ja01ldGFkYXRhLmV4dGVybmFsSWRlbnRpZmllcixcbiAgICAgICAgJ1NvdXJjZS1Pcmdhbml6YXRpb24nOiBtb2NrTWV0YWRhdGEuc291cmNlT3JnYW5pemF0aW9uLFxuICAgICAgfSlcbiAgICApO1xuICAgIGV4cGVjdChtb2NrRWxldmVudHlJbnN0YW5jZS53cml0ZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhbmRsZSBiYWdpdCBtZXRhZGF0YSBjYW5jZWxsYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgbW9ja0dldEJhZ0l0TWV0YWRhdGEubW9ja1Jlc29sdmVkVmFsdWUobnVsbCk7XG5cbiAgICBhd2FpdCBleHBvcnRTaXRlSGFuZGxlcihudWxsLCAnYmFnaXQnKTtcblxuICAgIGV4cGVjdChtb2NrRGlhbG9nLnNob3dTYXZlRGlhbG9nKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhbmRsZSBzYXZlIGRpYWxvZyBjYW5jZWxsYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgbW9ja0RpYWxvZy5zaG93U2F2ZURpYWxvZy5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGNhbmNlbGVkOiB0cnVlIH0pO1xuXG4gICAgYXdhaXQgZXhwb3J0U2l0ZUhhbmRsZXIobnVsbCwgZmFsc2UpO1xuXG4gICAgZXhwZWN0KG1vY2tFeGVjKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhbmRsZSBidWlsZCBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgbW9ja0RpYWxvZy5zaG93U2F2ZURpYWxvZy5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICBjYW5jZWxlZDogZmFsc2UsXG4gICAgICBmaWxlUGF0aDogJy90ZXN0L2V4cG9ydC56aXAnLFxuICAgIH0pO1xuXG4gICAgbW9ja0VsZXZlbnR5SW5zdGFuY2Uud3JpdGUubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdCdWlsZCBmYWlsZWQnKSk7XG5cbiAgICBhd2FpdCBleHBvcnRTaXRlSGFuZGxlcihudWxsLCB0cnVlKTtcblxuICAgIGV4cGVjdChtb2NrRGlhbG9nLnNob3dNZXNzYWdlQm94KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgIG1vY2tXaW5kb3csXG4gICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgIHRpdGxlOiAnRXhwb3J0IEZhaWxlZCcsXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gYnVpbGQgd2Vic2l0ZSBmb3IgZXhwb3J0JyxcbiAgICAgIH0pXG4gICAgKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYW5kbGUgbm8gZm9jdXNlZCB3aW5kb3cnLCBhc3luYyAoKSA9PiB7XG4gICAgbW9ja0Jyb3dzZXJXaW5kb3cuZ2V0Rm9jdXNlZFdpbmRvdy5tb2NrUmV0dXJuVmFsdWUobnVsbCk7XG5cbiAgICBhd2FpdCBleHBvcnRTaXRlSGFuZGxlcihudWxsLCBmYWxzZSk7XG5cbiAgICBleHBlY3QobW9ja0RpYWxvZy5zaG93U2F2ZURpYWxvZykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYW5kbGUgbm8gd2Vic2l0ZSBzZWxlY3RlZCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IGlzV2Vic2l0ZUVkaXRvckZvY3VzZWQgfSA9IHJlcXVpcmUoJy4uLy4uL2FwcC91aS9tdWx0aS13aW5kb3ctbWFuYWdlcicpO1xuICAgIG1vY2tHZXRBbGxXZWJzaXRlV2luZG93cy5tb2NrUmV0dXJuVmFsdWUobmV3IE1hcCgpKTtcbiAgICBpc1dlYnNpdGVFZGl0b3JGb2N1c2VkLm1vY2tSZXR1cm5WYWx1ZShmYWxzZSk7XG5cbiAgICBhd2FpdCBleHBvcnRTaXRlSGFuZGxlcihudWxsLCBmYWxzZSk7XG5cbiAgICBleHBlY3QobW9ja0RpYWxvZy5zaG93TWVzc2FnZUJveCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBtb2NrV2luZG93LFxuICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICB0eXBlOiAnaW5mbycsXG4gICAgICAgIHRpdGxlOiAnTm8gV2Vic2l0ZSBTZWxlY3RlZCcsXG4gICAgICB9KVxuICAgICk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaGFuZGxlIEJhZ0l0IGV4cG9ydCB3aXRoIGVtcHR5IG1ldGFkYXRhIChhbGwgZmllbGRzIG9wdGlvbmFsKScsICgpID0+IHtcbiAgICAvLyBUZXN0IHRoYXQgQmFnSXQgbWV0YWRhdGEgdmFsaWRhdGlvbiBhY2NlcHRzIGVtcHR5IGZpZWxkc1xuICAgIGNvbnN0IGVtcHR5TWV0YWRhdGEgPSB7XG4gICAgICBleHRlcm5hbElkZW50aWZpZXI6ICcnLFxuICAgICAgZXh0ZXJuYWxEZXNjcmlwdGlvbjogJycsXG4gICAgICBzb3VyY2VPcmdhbml6YXRpb246ICcnLFxuICAgICAgb3JnYW5pemF0aW9uQWRkcmVzczogJycsXG4gICAgICBjb250YWN0TmFtZTogJycsXG4gICAgICBjb250YWN0UGhvbmU6ICcnLFxuICAgICAgY29udGFjdEVtYWlsOiAnJyxcbiAgICB9O1xuXG4gICAgLy8gVGhpcyB0ZXN0IHZlcmlmaWVzIHRoYXQgdGhlIG1ldGFkYXRhIHZhbGlkYXRpb24gbG9naWNcbiAgICAvLyBhY2NlcHRzIGVtcHR5IHZhbHVlcyBmb3IgYWxsIGZpZWxkcyBzaW5jZSB0aGV5IGFyZSBub3cgb3B0aW9uYWxcbiAgICBleHBlY3QoZW1wdHlNZXRhZGF0YS5leHRlcm5hbElkZW50aWZpZXIpLnRvQmUoJycpO1xuICAgIGV4cGVjdChlbXB0eU1ldGFkYXRhLmV4dGVybmFsRGVzY3JpcHRpb24pLnRvQmUoJycpO1xuICAgIGV4cGVjdChlbXB0eU1ldGFkYXRhLnNvdXJjZU9yZ2FuaXphdGlvbikudG9CZSgnJyk7XG5cbiAgICAvLyBBbGwgZmllbGRzIHNob3VsZCBiZSBhbGxvd2VkIHRvIGJlIGVtcHR5IChubyB2YWxpZGF0aW9uIGVycm9ycylcbiAgICBjb25zdCBoYXNSZXF1aXJlZEZpZWxkcyA9IE9iamVjdC52YWx1ZXMoZW1wdHlNZXRhZGF0YSkuc29tZSgodmFsdWUpID0+IHZhbHVlLnRyaW0oKSAhPT0gJycpO1xuICAgIGV4cGVjdChoYXNSZXF1aXJlZEZpZWxkcykudG9CZShmYWxzZSk7IC8vIENvbmZpcm1zIGFsbCBmaWVsZHMgYXJlIGVtcHR5IGFuZCB0aGF0J3Mgb2theVxuICB9KTtcblxuICBpdCgnc2hvdWxkIHN1Y2Nlc3NmdWxseSBleHBvcnQgQmFnSXQgYXJjaGl2ZSB3aXRob3V0IHBhdGggZHVwbGljYXRpb24gZXJyb3JzJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIFRoaXMgdGVzdCB2ZXJpZmllcyB0aGUgQmFnSXQgcGF0aCBmaXggYnkgZW5zdXJpbmcgZXhwb3J0IGNvbXBsZXRlcyBzdWNjZXNzZnVsbHlcbiAgICAvLyBUaGUgZml4IHJlbW92ZWQgbWFudWFsIC9kYXRhLyBwcmVmaXggdG8gcHJldmVudCBcImRhdGEvZGF0YS9cIiBkdXBsaWNhdGlvblxuXG4gICAgLy8gTW9jayBhIHN1Y2Nlc3NmdWwgQmFnSXQgZXhwb3J0XG4gICAgbW9ja0dldEJhZ0l0TWV0YWRhdGEubW9ja1Jlc29sdmVkVmFsdWUobW9ja01ldGFkYXRhKTtcbiAgICBtb2NrR2V0V2Vic2l0ZVBhdGgubW9ja1JldHVyblZhbHVlKFRFU1RfQ09OU1RBTlRTLlBBVEhTLlRFU1RfUEFUSCk7XG5cbiAgICAvLyBUaGUgdGVzdCBwYXNzZXMgaWYgbm8gZXJyb3JzIGFyZSB0aHJvd24gZHVyaW5nIGV4cG9ydFxuICAgIGF3YWl0IGV4cGVjdChleHBvcnRTaXRlSGFuZGxlcihudWxsLCAnYmFnaXQnKSkucmVzb2x2ZXMudG9CZVVuZGVmaW5lZCgpO1xuXG4gICAgLy8gVmVyaWZ5IEJhZ0l0IHdhcyBjYWxsZWQgd2l0aCBjb3JyZWN0IHBhcmFtZXRlcnNcbiAgICBleHBlY3QobW9ja0JhZ0l0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgIGV4cGVjdC5hbnkoU3RyaW5nKSwgLy8gdGVtcCBkaXJlY3RvcnkgcGF0aFxuICAgICAgJ3NoYTI1NicsXG4gICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICdFeHRlcm5hbC1EZXNjcmlwdGlvbic6IG1vY2tNZXRhZGF0YS5leHRlcm5hbERlc2NyaXB0aW9uLFxuICAgICAgICAnRXh0ZXJuYWwtSWRlbnRpZmllcic6IG1vY2tNZXRhZGF0YS5leHRlcm5hbElkZW50aWZpZXIsXG4gICAgICAgICdTb3VyY2UtT3JnYW5pemF0aW9uJzogbW9ja01ldGFkYXRhLnNvdXJjZU9yZ2FuaXphdGlvbixcbiAgICAgICAgJ0JhZ2dpbmctRGF0ZSc6IGV4cGVjdC5hbnkoU3RyaW5nKSxcbiAgICAgICAgJ0JhZy1Tb2Z0d2FyZS1BZ2VudCc6IGV4cGVjdC5zdHJpbmdDb250YWluaW5nKCdBbmdsZXNpdGUnKSxcbiAgICAgIH0pXG4gICAgKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==