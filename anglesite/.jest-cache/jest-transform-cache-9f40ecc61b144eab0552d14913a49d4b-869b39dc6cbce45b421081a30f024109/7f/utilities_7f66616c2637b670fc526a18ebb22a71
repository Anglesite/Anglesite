33ca3d0115d65e18b51ee601ae8fb5df
"use strict";

/**
 * @file Error handling utilities.
 *
 * Provides utilities for error serialization, logging, reporting, and handling.
 * with support for error recovery strategies and context enrichment.
 */
/* istanbul ignore next */
function cov_1anfcgygg5() {
  var path = "/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/core/errors/utilities.ts";
  var hash = "9c19e6ee518a942c4d615016acd15461068c7a6c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/core/errors/utilities.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 113
        }
      },
      "2": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 36
        }
      },
      "3": {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 32
        }
      },
      "4": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 34
        }
      },
      "5": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 30
        }
      },
      "6": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 26
        }
      },
      "7": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 28,
          column: 10
        }
      },
      "8": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "9": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 45
        }
      },
      "10": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 51
        }
      },
      "11": {
        start: {
          line: 43,
          column: 25
        },
        end: {
          line: 43,
          column: 53
        }
      },
      "12": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "13": {
        start: {
          line: 45,
          column: 26
        },
        end: {
          line: 45,
          column: 51
        }
      },
      "14": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 48,
          column: 13
        }
      },
      "15": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 42
        }
      },
      "16": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 62,
          column: 11
        }
      },
      "17": {
        start: {
          line: 64,
          column: 25
        },
        end: {
          line: 64,
          column: 72
        }
      },
      "18": {
        start: {
          line: 65,
          column: 31
        },
        end: {
          line: 65,
          column: 59
        }
      },
      "19": {
        start: {
          line: 66,
          column: 28
        },
        end: {
          line: 66,
          column: 60
        }
      },
      "20": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "21": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 73,
          column: 13
        }
      },
      "22": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 69,
          column: 54
        }
      },
      "23": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 69
        }
      },
      "24": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "25": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 42
        }
      },
      "26": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 42
        }
      },
      "27": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "28": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 37
        }
      },
      "29": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 55
        }
      },
      "30": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 35
        }
      },
      "31": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 26
        }
      },
      "32": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 37
        }
      },
      "33": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 52
        }
      },
      "34": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "35": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 19
        }
      },
      "36": {
        start: {
          line: 127,
          column: 24
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "37": {
        start: {
          line: 135,
          column: 22
        },
        end: {
          line: 135,
          column: 23
        }
      },
      "38": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "39": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 150,
          column: 13
        }
      },
      "40": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 83
        }
      },
      "41": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 140,
          column: 22
        }
      },
      "42": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 143,
          column: 26
        }
      },
      "43": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 149,
          column: 17
        }
      },
      "44": {
        start: {
          line: 145,
          column: 20
        },
        end: {
          line: 145,
          column: 92
        }
      },
      "45": {
        start: {
          line: 148,
          column: 20
        },
        end: {
          line: 148,
          column: 96
        }
      },
      "46": {
        start: {
          line: 148,
          column: 51
        },
        end: {
          line: 148,
          column: 94
        }
      },
      "47": {
        start: {
          line: 155,
          column: 22
        },
        end: {
          line: 155,
          column: 41
        }
      },
      "48": {
        start: {
          line: 156,
          column: 0
        },
        end: {
          line: 156,
          column: 38
        }
      },
      "49": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "50": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 64
        }
      },
      "51": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "52": {
        start: {
          line: 169,
          column: 34
        },
        end: {
          line: 169,
          column: 39
        }
      },
      "53": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 177,
          column: 17
        }
      },
      "54": {
        start: {
          line: 172,
          column: 20
        },
        end: {
          line: 175,
          column: 38
        }
      },
      "55": {
        start: {
          line: 180,
          column: 24
        },
        end: {
          line: 180,
          column: 73
        }
      },
      "56": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 185,
          column: 13
        }
      },
      "57": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 183,
          column: 119
        }
      },
      "58": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 193,
          column: 25
        }
      },
      "59": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 25
        }
      },
      "60": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "61": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 80
        }
      },
      "62": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 40
        }
      },
      "63": {
        start: {
          line: 204,
          column: 22
        },
        end: {
          line: 204,
          column: 27
        }
      },
      "64": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "65": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 208,
          column: 13
        }
      },
      "66": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 207,
          column: 31
        }
      },
      "67": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 36
        }
      },
      "68": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 211,
          column: 22
        }
      },
      "69": {
        start: {
          line: 211,
          column: 16
        },
        end: {
          line: 211,
          column: 22
        }
      },
      "70": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 213,
          column: 20
        }
      },
      "71": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "72": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 54
        }
      },
      "73": {
        start: {
          line: 223,
          column: 31
        },
        end: {
          line: 223,
          column: 56
        }
      },
      "74": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 56
        }
      },
      "75": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 63
        }
      },
      "76": {
        start: {
          line: 232,
          column: 24
        },
        end: {
          line: 232,
          column: 28
        }
      },
      "77": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "78": {
        start: {
          line: 233,
          column: 27
        },
        end: {
          line: 233,
          column: 28
        }
      },
      "79": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 248,
          column: 13
        }
      },
      "80": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 235,
          column: 58
        }
      },
      "81": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 238,
          column: 60
        }
      },
      "82": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 242,
          column: 17
        }
      },
      "83": {
        start: {
          line: 240,
          column: 20
        },
        end: {
          line: 240,
          column: 63
        }
      },
      "84": {
        start: {
          line: 241,
          column: 20
        },
        end: {
          line: 241,
          column: 36
        }
      },
      "85": {
        start: {
          line: 244,
          column: 35
        },
        end: {
          line: 244,
          column: 69
        }
      },
      "86": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 247,
          column: 17
        }
      },
      "87": {
        start: {
          line: 246,
          column: 20
        },
        end: {
          line: 246,
          column: 84
        }
      },
      "88": {
        start: {
          line: 246,
          column: 51
        },
        end: {
          line: 246,
          column: 82
        }
      },
      "89": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 24
        }
      },
      "90": {
        start: {
          line: 257,
          column: 22
        },
        end: {
          line: 257,
          column: 92
        }
      },
      "91": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "92": {
        start: {
          line: 259,
          column: 31
        },
        end: {
          line: 261,
          column: 27
        }
      },
      "93": {
        start: {
          line: 260,
          column: 39
        },
        end: {
          line: 260,
          column: 72
        }
      },
      "94": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 264,
          column: 13
        }
      },
      "95": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 263,
          column: 55
        }
      },
      "96": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "97": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 48
        }
      },
      "98": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 269,
          column: 32
        }
      },
      "99": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 285,
          column: 10
        }
      },
      "100": {
        start: {
          line: 291,
          column: 22
        },
        end: {
          line: 297,
          column: 12
        }
      },
      "101": {
        start: {
          line: 293,
          column: 16
        },
        end: {
          line: 293,
          column: 198
        }
      },
      "102": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 294,
          column: 44
        }
      },
      "103": {
        start: {
          line: 295,
          column: 16
        },
        end: {
          line: 295,
          column: 46
        }
      },
      "104": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 298,
          column: 21
        }
      },
      "105": {
        start: {
          line: 304,
          column: 24
        },
        end: {
          line: 304,
          column: 33
        }
      },
      "106": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 310,
          column: 9
        }
      },
      "107": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 308,
          column: 13
        }
      },
      "108": {
        start: {
          line: 307,
          column: 16
        },
        end: {
          line: 307,
          column: 48
        }
      },
      "109": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 52
        }
      },
      "110": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 311,
          column: 23
        }
      },
      "111": {
        start: {
          line: 317,
          column: 22
        },
        end: {
          line: 323,
          column: 9
        }
      },
      "112": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 333,
          column: 9
        }
      },
      "113": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 325,
          column: 91
        }
      },
      "114": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 326,
          column: 91
        }
      },
      "115": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 332,
          column: 13
        }
      },
      "116": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 328,
          column: 36
        }
      },
      "117": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 331,
          column: 39
        }
      },
      "118": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 334,
          column: 21
        }
      },
      "119": {
        start: {
          line: 337,
          column: 0
        },
        end: {
          line: 337,
          column: 32
        }
      },
      "120": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 346,
          column: 40
        }
      },
      "121": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 347,
          column: 58
        }
      },
      "122": {
        start: {
          line: 353,
          column: 24
        },
        end: {
          line: 353,
          column: 47
        }
      },
      "123": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 354,
          column: 58
        }
      },
      "124": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 355,
          column: 23
        }
      },
      "125": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 361,
          column: 94
        }
      },
      "126": {
        start: {
          line: 361,
          column: 62
        },
        end: {
          line: 361,
          column: 87
        }
      },
      "127": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 367,
          column: 49
        }
      },
      "128": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 373,
          column: 9
        }
      },
      "129": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 54
        }
      },
      "130": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 372,
          column: 45
        }
      },
      "131": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 379,
          column: 37
        }
      },
      "132": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 380,
          column: 37
        }
      },
      "133": {
        start: {
          line: 383,
          column: 0
        },
        end: {
          line: 383,
          column: 50
        }
      },
      "134": {
        start: {
          line: 384,
          column: 0
        },
        end: {
          line: 384,
          column: 38
        }
      },
      "135": {
        start: {
          line: 389,
          column: 4
        },
        end: {
          line: 407,
          column: 6
        }
      },
      "136": {
        start: {
          line: 390,
          column: 23
        },
        end: {
          line: 390,
          column: 39
        }
      },
      "137": {
        start: {
          line: 391,
          column: 8
        },
        end: {
          line: 405,
          column: 10
        }
      },
      "138": {
        start: {
          line: 392,
          column: 12
        },
        end: {
          line: 404,
          column: 13
        }
      },
      "139": {
        start: {
          line: 393,
          column: 16
        },
        end: {
          line: 393,
          column: 54
        }
      },
      "140": {
        start: {
          line: 396,
          column: 35
        },
        end: {
          line: 398,
          column: 18
        }
      },
      "141": {
        start: {
          line: 399,
          column: 16
        },
        end: {
          line: 399,
          column: 60
        }
      },
      "142": {
        start: {
          line: 400,
          column: 16
        },
        end: {
          line: 402,
          column: 17
        }
      },
      "143": {
        start: {
          line: 401,
          column: 20
        },
        end: {
          line: 401,
          column: 71
        }
      },
      "144": {
        start: {
          line: 403,
          column: 16
        },
        end: {
          line: 403,
          column: 33
        }
      },
      "145": {
        start: {
          line: 406,
          column: 8
        },
        end: {
          line: 406,
          column: 26
        }
      },
      "146": {
        start: {
          line: 412,
          column: 0
        },
        end: {
          line: 446,
          column: 2
        }
      },
      "147": {
        start: {
          line: 417,
          column: 22
        },
        end: {
          line: 423,
          column: 28
        }
      },
      "148": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 428,
          column: 11
        }
      },
      "149": {
        start: {
          line: 434,
          column: 25
        },
        end: {
          line: 442,
          column: 9
        }
      },
      "150": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 444,
          column: 60
        }
      },
      "151": {
        start: {
          line: 448,
          column: 0
        },
        end: {
          line: 448,
          column: 79
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 18
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 16
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 40
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 33
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 42
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 42
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 29
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 54
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        loc: {
          start: {
            line: 83,
            column: 30
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 83
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        loc: {
          start: {
            line: 93,
            column: 24
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 93
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 17
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 99
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        loc: {
          start: {
            line: 105,
            column: 19
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 105
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        },
        loc: {
          start: {
            line: 111,
            column: 21
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 111
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 117,
            column: 5
          }
        },
        loc: {
          start: {
            line: 117,
            column: 22
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 117
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        loc: {
          start: {
            line: 123,
            column: 29
          },
          end: {
            line: 152,
            column: 5
          }
        },
        line: 123
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 148,
            column: 38
          },
          end: {
            line: 148,
            column: 39
          }
        },
        loc: {
          start: {
            line: 148,
            column: 51
          },
          end: {
            line: 148,
            column: 94
          }
        },
        line: 148
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 164,
            column: 4
          },
          end: {
            line: 164,
            column: 5
          }
        },
        loc: {
          start: {
            line: 164,
            column: 32
          },
          end: {
            line: 186,
            column: 5
          }
        },
        line: 164
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 171,
            column: 16
          },
          end: {
            line: 171,
            column: 17
          }
        },
        loc: {
          start: {
            line: 171,
            column: 30
          },
          end: {
            line: 176,
            column: 17
          }
        },
        line: 171
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 182,
            column: 13
          }
        },
        loc: {
          start: {
            line: 182,
            column: 26
          },
          end: {
            line: 184,
            column: 13
          }
        },
        line: 182
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 191,
            column: 4
          },
          end: {
            line: 191,
            column: 5
          }
        },
        loc: {
          start: {
            line: 191,
            column: 35
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 191
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 203,
            column: 4
          },
          end: {
            line: 203,
            column: 5
          }
        },
        loc: {
          start: {
            line: 203,
            column: 41
          },
          end: {
            line: 214,
            column: 5
          }
        },
        line: 203
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        },
        loc: {
          start: {
            line: 218,
            column: 60
          },
          end: {
            line: 227,
            column: 5
          }
        },
        line: 218
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 231,
            column: 4
          },
          end: {
            line: 231,
            column: 5
          }
        },
        loc: {
          start: {
            line: 231,
            column: 77
          },
          end: {
            line: 252,
            column: 5
          }
        },
        line: 231
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 246,
            column: 38
          },
          end: {
            line: 246,
            column: 39
          }
        },
        loc: {
          start: {
            line: 246,
            column: 51
          },
          end: {
            line: 246,
            column: 82
          }
        },
        line: 246
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 256,
            column: 4
          },
          end: {
            line: 256,
            column: 5
          }
        },
        loc: {
          start: {
            line: 256,
            column: 47
          },
          end: {
            line: 270,
            column: 5
          }
        },
        line: 256
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 260,
            column: 21
          },
          end: {
            line: 260,
            column: 22
          }
        },
        loc: {
          start: {
            line: 260,
            column: 39
          },
          end: {
            line: 260,
            column: 72
          }
        },
        line: 260
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 274,
            column: 5
          }
        },
        loc: {
          start: {
            line: 274,
            column: 30
          },
          end: {
            line: 286,
            column: 5
          }
        },
        line: 274
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 290,
            column: 4
          },
          end: {
            line: 290,
            column: 5
          }
        },
        loc: {
          start: {
            line: 290,
            column: 38
          },
          end: {
            line: 299,
            column: 5
          }
        },
        line: 290
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        },
        loc: {
          start: {
            line: 292,
            column: 26
          },
          end: {
            line: 296,
            column: 13
          }
        },
        line: 292
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 303,
            column: 4
          },
          end: {
            line: 303,
            column: 5
          }
        },
        loc: {
          start: {
            line: 303,
            column: 35
          },
          end: {
            line: 312,
            column: 5
          }
        },
        line: 303
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 316,
            column: 4
          },
          end: {
            line: 316,
            column: 5
          }
        },
        loc: {
          start: {
            line: 316,
            column: 33
          },
          end: {
            line: 335,
            column: 5
          }
        },
        line: 316
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 345,
            column: 4
          },
          end: {
            line: 345,
            column: 5
          }
        },
        loc: {
          start: {
            line: 345,
            column: 32
          },
          end: {
            line: 348,
            column: 5
          }
        },
        line: 345
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 352,
            column: 4
          },
          end: {
            line: 352,
            column: 5
          }
        },
        loc: {
          start: {
            line: 352,
            column: 24
          },
          end: {
            line: 356,
            column: 5
          }
        },
        line: 352
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 360,
            column: 4
          },
          end: {
            line: 360,
            column: 5
          }
        },
        loc: {
          start: {
            line: 360,
            column: 30
          },
          end: {
            line: 362,
            column: 5
          }
        },
        line: 360
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 361,
            column: 40
          },
          end: {
            line: 361,
            column: 41
          }
        },
        loc: {
          start: {
            line: 361,
            column: 62
          },
          end: {
            line: 361,
            column: 87
          }
        },
        line: 361
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 366,
            column: 4
          },
          end: {
            line: 366,
            column: 5
          }
        },
        loc: {
          start: {
            line: 366,
            column: 49
          },
          end: {
            line: 374,
            column: 5
          }
        },
        line: 366
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 378,
            column: 4
          },
          end: {
            line: 378,
            column: 5
          }
        },
        loc: {
          start: {
            line: 378,
            column: 22
          },
          end: {
            line: 381,
            column: 5
          }
        },
        line: 378
      },
      "33": {
        name: "HandleErrors",
        decl: {
          start: {
            line: 388,
            column: 9
          },
          end: {
            line: 388,
            column: 21
          }
        },
        loc: {
          start: {
            line: 388,
            column: 32
          },
          end: {
            line: 408,
            column: 1
          }
        },
        line: 388
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 389,
            column: 11
          },
          end: {
            line: 389,
            column: 12
          }
        },
        loc: {
          start: {
            line: 389,
            column: 55
          },
          end: {
            line: 407,
            column: 5
          }
        },
        line: 389
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 391,
            column: 27
          },
          end: {
            line: 391,
            column: 28
          }
        },
        loc: {
          start: {
            line: 391,
            column: 52
          },
          end: {
            line: 405,
            column: 9
          }
        },
        line: 391
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 416,
            column: 19
          },
          end: {
            line: 416,
            column: 20
          }
        },
        loc: {
          start: {
            line: 416,
            column: 30
          },
          end: {
            line: 429,
            column: 5
          }
        },
        line: 416
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 433,
            column: 16
          },
          end: {
            line: 433,
            column: 17
          }
        },
        loc: {
          start: {
            line: 433,
            column: 27
          },
          end: {
            line: 445,
            column: 5
          }
        },
        line: 433
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 25
          },
          end: {
            line: 24,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 25
          },
          end: {
            line: 24,
            column: 45
          }
        }, {
          start: {
            line: 24,
            column: 49
          },
          end: {
            line: 24,
            column: 62
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "2": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "3": {
        loc: {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "4": {
        loc: {
          start: {
            line: 64,
            column: 25
          },
          end: {
            line: 64,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 25
          },
          end: {
            line: 64,
            column: 66
          }
        }, {
          start: {
            line: 64,
            column: 70
          },
          end: {
            line: 64,
            column: 72
          }
        }],
        line: 64
      },
      "5": {
        loc: {
          start: {
            line: 65,
            column: 31
          },
          end: {
            line: 65,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 31
          },
          end: {
            line: 65,
            column: 53
          }
        }, {
          start: {
            line: 65,
            column: 57
          },
          end: {
            line: 65,
            column: 59
          }
        }],
        line: 65
      },
      "6": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "7": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "8": {
        loc: {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "9": {
        loc: {
          start: {
            line: 130,
            column: 25
          },
          end: {
            line: 130,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 130,
            column: 58
          },
          end: {
            line: 130,
            column: 74
          }
        }, {
          start: {
            line: 130,
            column: 77
          },
          end: {
            line: 130,
            column: 79
          }
        }],
        line: 130
      },
      "10": {
        loc: {
          start: {
            line: 144,
            column: 16
          },
          end: {
            line: 149,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 16
          },
          end: {
            line: 149,
            column: 17
          }
        }, {
          start: {
            line: 147,
            column: 21
          },
          end: {
            line: 149,
            column: 17
          }
        }],
        line: 144
      },
      "11": {
        loc: {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "12": {
        loc: {
          start: {
            line: 166,
            column: 19
          },
          end: {
            line: 166,
            column: 63
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 166,
            column: 29
          },
          end: {
            line: 166,
            column: 55
          }
        }, {
          start: {
            line: 166,
            column: 58
          },
          end: {
            line: 166,
            column: 63
          }
        }],
        line: 166
      },
      "13": {
        loc: {
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "14": {
        loc: {
          start: {
            line: 180,
            column: 24
          },
          end: {
            line: 180,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 180,
            column: 52
          },
          end: {
            line: 180,
            column: 57
          }
        }, {
          start: {
            line: 180,
            column: 60
          },
          end: {
            line: 180,
            column: 73
          }
        }],
        line: 180
      },
      "15": {
        loc: {
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 193,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 8
          },
          end: {
            line: 193,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "16": {
        loc: {
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 196,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "17": {
        loc: {
          start: {
            line: 195,
            column: 19
          },
          end: {
            line: 195,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 195,
            column: 19
          },
          end: {
            line: 195,
            column: 53
          }
        }, {
          start: {
            line: 195,
            column: 57
          },
          end: {
            line: 195,
            column: 79
          }
        }],
        line: 195
      },
      "18": {
        loc: {
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 208,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 208,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "19": {
        loc: {
          start: {
            line: 210,
            column: 12
          },
          end: {
            line: 211,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 12
          },
          end: {
            line: 211,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 210
      },
      "20": {
        loc: {
          start: {
            line: 231,
            column: 38
          },
          end: {
            line: 231,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 231,
            column: 51
          },
          end: {
            line: 231,
            column: 52
          }
        }],
        line: 231
      },
      "21": {
        loc: {
          start: {
            line: 231,
            column: 54
          },
          end: {
            line: 231,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 231,
            column: 62
          },
          end: {
            line: 231,
            column: 66
          }
        }],
        line: 231
      },
      "22": {
        loc: {
          start: {
            line: 239,
            column: 16
          },
          end: {
            line: 242,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 16
          },
          end: {
            line: 242,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 239
      },
      "23": {
        loc: {
          start: {
            line: 244,
            column: 35
          },
          end: {
            line: 244,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 244,
            column: 35
          },
          end: {
            line: 244,
            column: 60
          }
        }, {
          start: {
            line: 244,
            column: 64
          },
          end: {
            line: 244,
            column: 69
          }
        }],
        line: 244
      },
      "24": {
        loc: {
          start: {
            line: 245,
            column: 16
          },
          end: {
            line: 247,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 16
          },
          end: {
            line: 247,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "25": {
        loc: {
          start: {
            line: 256,
            column: 25
          },
          end: {
            line: 256,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 256,
            column: 40
          },
          end: {
            line: 256,
            column: 45
          }
        }],
        line: 256
      },
      "26": {
        loc: {
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 265,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 265,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "27": {
        loc: {
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 264,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 264,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 262
      },
      "28": {
        loc: {
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "29": {
        loc: {
          start: {
            line: 266,
            column: 12
          },
          end: {
            line: 266,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 266,
            column: 12
          },
          end: {
            line: 266,
            column: 24
          }
        }, {
          start: {
            line: 266,
            column: 28
          },
          end: {
            line: 266,
            column: 39
          }
        }],
        line: 266
      },
      "30": {
        loc: {
          start: {
            line: 284,
            column: 19
          },
          end: {
            line: 284,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 284,
            column: 33
          },
          end: {
            line: 284,
            column: 79
          }
        }, {
          start: {
            line: 284,
            column: 82
          },
          end: {
            line: 284,
            column: 91
          }
        }],
        line: 284
      },
      "31": {
        loc: {
          start: {
            line: 293,
            column: 122
          },
          end: {
            line: 293,
            column: 196
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 293,
            column: 141
          },
          end: {
            line: 293,
            column: 184
          }
        }, {
          start: {
            line: 293,
            column: 187
          },
          end: {
            line: 293,
            column: 196
          }
        }],
        line: 293
      },
      "32": {
        loc: {
          start: {
            line: 306,
            column: 12
          },
          end: {
            line: 308,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 12
          },
          end: {
            line: 308,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "33": {
        loc: {
          start: {
            line: 325,
            column: 48
          },
          end: {
            line: 325,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 325,
            column: 48
          },
          end: {
            line: 325,
            column: 80
          }
        }, {
          start: {
            line: 325,
            column: 84
          },
          end: {
            line: 325,
            column: 85
          }
        }],
        line: 325
      },
      "34": {
        loc: {
          start: {
            line: 326,
            column: 48
          },
          end: {
            line: 326,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 326,
            column: 48
          },
          end: {
            line: 326,
            column: 80
          }
        }, {
          start: {
            line: 326,
            column: 84
          },
          end: {
            line: 326,
            column: 85
          }
        }],
        line: 326
      },
      "35": {
        loc: {
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 332,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 332,
            column: 13
          }
        }, {
          start: {
            line: 330,
            column: 17
          },
          end: {
            line: 332,
            column: 13
          }
        }],
        line: 327
      },
      "36": {
        loc: {
          start: {
            line: 400,
            column: 16
          },
          end: {
            line: 402,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 400,
            column: 16
          },
          end: {
            line: 402,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 400
      },
      "37": {
        loc: {
          start: {
            line: 417,
            column: 22
          },
          end: {
            line: 423,
            column: 28
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 418,
            column: 14
          },
          end: {
            line: 418,
            column: 21
          }
        }, {
          start: {
            line: 419,
            column: 14
          },
          end: {
            line: 423,
            column: 28
          }
        }],
        line: 417
      },
      "38": {
        loc: {
          start: {
            line: 419,
            column: 14
          },
          end: {
            line: 423,
            column: 28
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 420,
            column: 18
          },
          end: {
            line: 420,
            column: 25
          }
        }, {
          start: {
            line: 421,
            column: 18
          },
          end: {
            line: 423,
            column: 28
          }
        }],
        line: 419
      },
      "39": {
        loc: {
          start: {
            line: 421,
            column: 18
          },
          end: {
            line: 423,
            column: 28
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 422,
            column: 22
          },
          end: {
            line: 422,
            column: 28
          }
        }, {
          start: {
            line: 423,
            column: 22
          },
          end: {
            line: 423,
            column: 28
          }
        }],
        line: 421
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0],
      "21": [0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/core/errors/utilities.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/core/errors/utilities.ts"],
      sourcesContent: ["/**\n * @file Error handling utilities.\n *\n * Provides utilities for error serialization, logging, reporting, and handling.\n * with support for error recovery strategies and context enrichment.\n */\n\nimport { AngleError, ErrorSeverity, ErrorCategory, SerializedError } from './base';\n\n/**\n * Error handler function type.\n */\nexport type ErrorHandler = (error: AngleError) => void | Promise<void>;\n\n/**\n * Error recovery strategy function type.\n */\nexport type RecoveryStrategy<T = unknown> = (error: AngleError) => T | Promise<T>;\n\n/**\n * Error reporting configuration.\n */\nexport interface ErrorReportingConfig {\n  enabled: boolean;\n  endpoint?: string;\n  apiKey?: string;\n  includeStackTrace: boolean;\n  includeBreadcrumbs: boolean;\n  environment: string;\n  version: string;\n  maxRetries: number;\n  retryDelay: number;\n}\n\n/**\n * Error context for enriching errors with additional information.\n */\nexport interface ErrorContext {\n  operation?: string;\n  resource?: string;\n  user?: {\n    id?: string;\n    email?: string;\n  };\n  request?: {\n    id?: string;\n    url?: string;\n    method?: string;\n  };\n  website?: {\n    id?: string;\n    domain?: string;\n    path?: string;\n  };\n  [key: string]: unknown;\n}\n\n/**\n * Error breadcrumb for tracking error context.\n */\nexport interface ErrorBreadcrumb {\n  timestamp: Date;\n  level: 'debug' | 'info' | 'warning' | 'error';\n  message: string;\n  category: string;\n  data?: Record<string, unknown>;\n}\n\n/**\n * Global error registry for tracking and managing errors.\n */\nclass ErrorRegistry {\n  private handlers = new Map<string, ErrorHandler[]>();\n  private breadcrumbs: ErrorBreadcrumb[] = [];\n  private context: ErrorContext = {};\n  private config: ErrorReportingConfig = {\n    enabled: true,\n    includeStackTrace: true,\n    includeBreadcrumbs: true,\n    environment: process.env.NODE_ENV || 'development',\n    version: '1.0.0',\n    maxRetries: 3,\n    retryDelay: 1000,\n  };\n\n  /**\n   * Register an error handler for a specific error type.\n   */\n  registerHandler(errorType: string, handler: ErrorHandler): void {\n    if (!this.handlers.has(errorType)) {\n      this.handlers.set(errorType, []);\n    }\n    this.handlers.get(errorType)!.push(handler);\n  }\n\n  /**\n   * Unregister a previously registered error handler for the specified type.\n   */\n  unregisterHandler(errorType: string, handler: ErrorHandler): void {\n    const handlers = this.handlers.get(errorType);\n    if (handlers) {\n      const index = handlers.indexOf(handler);\n      if (index !== -1) {\n        handlers.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Handle an error by calling registered handlers.\n   */\n  async handleError(error: AngleError): Promise<void> {\n    // Add error to breadcrumbs\n    this.addBreadcrumb({\n      timestamp: new Date(),\n      level: 'error',\n      message: error.message,\n      category: error.category,\n      data: { code: error.code, severity: error.severity },\n    });\n\n    // Call specific handlers for this error type\n    const handlers = this.handlers.get(error.constructor.name) || [];\n    const globalHandlers = this.handlers.get('*') || [];\n    const allHandlers = [...handlers, ...globalHandlers];\n\n    for (const handler of allHandlers) {\n      try {\n        await Promise.resolve(handler(error));\n      } catch (handlerError) {\n        console.error('Error handler failed:', handlerError);\n      }\n    }\n\n    // Report error if enabled\n    if (this.config.enabled) {\n      await this.reportError(error);\n    }\n  }\n\n  /**\n   * Add a breadcrumb for context tracking.\n   */\n  addBreadcrumb(breadcrumb: ErrorBreadcrumb): void {\n    this.breadcrumbs.push(breadcrumb);\n    // Keep only last 50 breadcrumbs\n    if (this.breadcrumbs.length > 50) {\n      this.breadcrumbs.shift();\n    }\n  }\n\n  /**\n   * Set global error context.\n   */\n  setContext(context: Partial<ErrorContext>): void {\n    this.context = { ...this.context, ...context };\n  }\n\n  /**\n   * Get current error context.\n   */\n  getContext(): ErrorContext {\n    return { ...this.context };\n  }\n\n  /**\n   * Clear all accumulated error context data from the registry.\n   */\n  clearContext(): void {\n    this.context = {};\n  }\n\n  /**\n   * Get recent breadcrumbs.\n   */\n  getBreadcrumbs(): ErrorBreadcrumb[] {\n    return [...this.breadcrumbs];\n  }\n\n  /**\n   * Configure error reporting.\n   */\n  configure(config: Partial<ErrorReportingConfig>): void {\n    this.config = { ...this.config, ...config };\n  }\n\n  /**\n   * Report error to external service.\n   */\n  private async reportError(error: AngleError): Promise<void> {\n    if (!this.config.endpoint) {\n      return;\n    }\n\n    const payload = {\n      error: error.serialize(),\n      context: this.context,\n      breadcrumbs: this.config.includeBreadcrumbs ? this.breadcrumbs : [],\n      environment: this.config.environment,\n      version: this.config.version,\n      timestamp: new Date().toISOString(),\n    };\n\n    let attempt = 0;\n    while (attempt < this.config.maxRetries) {\n      try {\n        // Note: In a real implementation, you'd use fetch or axios here\n        console.log('[Error Reporting]', JSON.stringify(payload, null, 2));\n        break;\n      } catch (reportError) {\n        attempt++;\n        if (attempt >= this.config.maxRetries) {\n          console.error('Failed to report error after max retries:', reportError);\n        } else {\n          await new Promise((resolve) => setTimeout(resolve, this.config.retryDelay));\n        }\n      }\n    }\n  }\n}\n\n// Global error registry instance\nconst errorRegistry = new ErrorRegistry();\n\n/**\n * Error utilities class with static methods.\n */\nexport class ErrorUtils {\n  /**\n   * Wrap an error in an AngleError if it's not already one.\n   */\n  static wrap(error: unknown, context?: Partial<ErrorContext>): AngleError {\n    if (error instanceof AngleError) {\n      return context ? error.withContext(context) : error;\n    }\n\n    if (error instanceof Error) {\n      const errorInstance = error as Error;\n      return new (class WrappedError extends AngleError {\n        constructor() {\n          super(\n            errorInstance.message,\n            'WRAPPED_ERROR',\n            ErrorCategory.SYSTEM,\n            ErrorSeverity.MEDIUM,\n            {\n              context,\n              stack: errorInstance.stack,\n            },\n            errorInstance\n          );\n        }\n      })();\n    }\n\n    // Handle non-Error objects\n    const message = typeof error === 'string' ? error : String(error);\n    return new (class UnknownError extends AngleError {\n      constructor() {\n        super(message, 'UNKNOWN_ERROR', ErrorCategory.SYSTEM, ErrorSeverity.MEDIUM, { context });\n      }\n    })();\n  }\n\n  /**\n   * Check if an error matches a specific type or code.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static matches(error: unknown, matcher: string | (new (...args: any[]) => Error)): boolean {\n    if (!error) return false;\n\n    if (typeof matcher === 'string') {\n      return error instanceof AngleError && error.code === matcher;\n    }\n\n    return error instanceof matcher;\n  }\n\n  /**\n   * Find errors in an error chain that match a specific type.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static findInChain<T extends AngleError>(error: AngleError, errorType: new (...args: any[]) => T): T | null {\n    let current: Error = error;\n    while (current) {\n      if (current instanceof errorType) {\n        return current;\n      }\n      current = (current as Error & { cause?: Error }).cause as Error;\n      if (!current) break;\n    }\n    return null;\n  }\n\n  /**\n   * Execute a function with error handling and recovery.\n   */\n  static async withRecovery<T>(\n    operation: () => T | Promise<T>,\n    recovery: RecoveryStrategy<T>,\n    context?: ErrorContext\n  ): Promise<T> {\n    try {\n      return await Promise.resolve(operation());\n    } catch (error) {\n      const angleError = this.wrap(error, context);\n      await errorRegistry.handleError(angleError);\n      return await Promise.resolve(recovery(angleError));\n    }\n  }\n\n  /**\n   * Execute a function with retries.\n   */\n  static async withRetry<T>(\n    operation: () => T | Promise<T>,\n    maxRetries: number = 3,\n    delay: number = 1000,\n    context?: ErrorContext\n  ): Promise<T> {\n    let lastError: AngleError | null = null;\n\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await Promise.resolve(operation());\n      } catch (error) {\n        lastError = ErrorUtils.wrap(error, context);\n\n        if (attempt === maxRetries) {\n          await errorRegistry.handleError(lastError);\n          throw lastError;\n        }\n\n        // Use error-specific retry delay if available\n        const retryDelay = lastError.getRetryDelay() || delay;\n        if (retryDelay > 0) {\n          await new Promise((resolve) => setTimeout(resolve, retryDelay));\n        }\n      }\n    }\n\n    // This should never be reached, but TypeScript requires it\n    throw lastError!;\n  }\n\n  /**\n   * Format error for display.\n   */\n  static format(error: AngleError, includeStack: boolean = false): string {\n    const parts = [`[${error.severity}] ${error.category}:${error.code}`, error.message];\n\n    if (error.metadata.context) {\n      const contextStr = Object.entries(error.metadata.context)\n        .map(([key, value]) => `${key}=${JSON.stringify(value)}`)\n        .join(', ');\n      if (contextStr) {\n        parts.push(`Context: {${contextStr}}`);\n      }\n    }\n\n    if (includeStack && error.stack) {\n      parts.push(`Stack: ${error.stack}`);\n    }\n\n    return parts.join('\\n');\n  }\n\n  /**\n   * Convert error to log-friendly object.\n   */\n  static toLogObject(error: AngleError): Record<string, unknown> {\n    return {\n      name: error.name,\n      message: error.message,\n      code: error.code,\n      category: error.category,\n      severity: error.severity,\n      timestamp: error.timestamp,\n      stack: error.stack,\n      metadata: error.metadata,\n      cause: error.cause ? this.toLogObject(ErrorUtils.wrap(error.cause)) : undefined,\n    };\n  }\n\n  /**\n   * Deserialize error from JSON.\n   */\n  static fromSerialized(serialized: SerializedError): AngleError {\n    const error = new (class DeserializedError extends AngleError {\n      constructor() {\n        super(\n          serialized.message,\n          serialized.code,\n          serialized.category,\n          serialized.severity,\n          serialized.metadata,\n          serialized.cause ? ErrorUtils.fromSerialized(serialized.cause) : undefined\n        );\n        this.name = serialized.name;\n        this.stack = serialized.stack;\n      }\n    })();\n\n    return error;\n  }\n\n  /**\n   * Group errors by category.\n   */\n  static groupByCategory(errors: AngleError[]): Map<ErrorCategory, AngleError[]> {\n    const grouped = new Map<ErrorCategory, AngleError[]>();\n\n    for (const error of errors) {\n      if (!grouped.has(error.category)) {\n        grouped.set(error.category, []);\n      }\n      grouped.get(error.category)!.push(error);\n    }\n\n    return grouped;\n  }\n\n  /**\n   * Generate comprehensive statistics for an array of errors including counts by category and severity.\n   */\n  static getStatistics(errors: AngleError[]): {\n    total: number;\n    byCategory: Record<ErrorCategory, number>;\n    bySeverity: Record<ErrorSeverity, number>;\n    recoverable: number;\n    nonRecoverable: number;\n  } {\n    const stats = {\n      total: errors.length,\n      byCategory: {} as Record<ErrorCategory, number>,\n      bySeverity: {} as Record<ErrorSeverity, number>,\n      recoverable: 0,\n      nonRecoverable: 0,\n    };\n\n    for (const error of errors) {\n      stats.byCategory[error.category] = (stats.byCategory[error.category] || 0) + 1;\n      stats.bySeverity[error.severity] = (stats.bySeverity[error.severity] || 0) + 1;\n\n      if (error.isRecoverable()) {\n        stats.recoverable++;\n      } else {\n        stats.nonRecoverable++;\n      }\n    }\n\n    return stats;\n  }\n}\n\n/**\n * Error context manager for scoped error handling.\n */\nexport class ErrorContextManager {\n  private static contextStack: ErrorContext[] = [];\n\n  /**\n   * Push a new error context onto the stack.\n   */\n  static pushContext(context: ErrorContext): void {\n    this.contextStack.push(context);\n    errorRegistry.setContext(this.getMergedContext());\n  }\n\n  /**\n   * Pop the top error context from the stack.\n   */\n  static popContext(): ErrorContext | undefined {\n    const context = this.contextStack.pop();\n    errorRegistry.setContext(this.getMergedContext());\n    return context;\n  }\n\n  /**\n   * Get the current merged context from the stack.\n   */\n  static getMergedContext(): ErrorContext {\n    return this.contextStack.reduce((merged, context) => ({ ...merged, ...context }), {});\n  }\n\n  /**\n   * Execute a function with a specific error context.\n   */\n  static async withContext<T>(context: ErrorContext, operation: () => T | Promise<T>): Promise<T> {\n    ErrorContextManager.pushContext(context);\n    try {\n      return await Promise.resolve(operation());\n    } finally {\n      ErrorContextManager.popContext();\n    }\n  }\n\n  /**\n   * Clear all contexts.\n   */\n  static clearAll(): void {\n    this.contextStack.length = 0;\n    errorRegistry.clearContext();\n  }\n}\n\n// Export the global error registry for external access\nexport { errorRegistry };\n\n/**\n * Decorator for automatic error handling.\n */\nexport function HandleErrors<T = unknown>(recovery?: RecoveryStrategy<T>) {\n  return function (target: unknown, propertyName: string, descriptor: PropertyDescriptor): unknown {\n    const method = descriptor.value;\n\n    descriptor.value = async function (...args: unknown[]) {\n      try {\n        return await method.apply(this, args);\n      } catch (error) {\n        const angleError = ErrorUtils.wrap(error, {\n          operation: `${(target as { constructor: { name: string } }).constructor.name}.${propertyName}`,\n        });\n\n        await errorRegistry.handleError(angleError);\n\n        if (recovery) {\n          return await Promise.resolve(recovery(angleError));\n        }\n\n        throw angleError;\n      }\n    };\n\n    return descriptor;\n  };\n}\n\n/**\n * Pre-configured error handlers for common logging and reporting scenarios.\n */\nexport const DefaultErrorHandlers = {\n  /**\n   * Console logger handler.\n   */\n  consoleLogger: (error: AngleError) => {\n    const level =\n      error.severity === ErrorSeverity.CRITICAL\n        ? 'error'\n        : error.severity === ErrorSeverity.HIGH\n          ? 'error'\n          : error.severity === ErrorSeverity.MEDIUM\n            ? 'warn'\n            : 'info';\n\n    console[level](`[${error.category}:${error.code}] ${error.message}`, {\n      severity: error.severity,\n      metadata: error.metadata,\n      stack: error.stack,\n    });\n  },\n\n  /**\n   * File logger handler (simplified - would use actual file writing in production).\n   */\n  fileLogger: (error: AngleError) => {\n    const logEntry = {\n      timestamp: error.timestamp.toISOString(),\n      level: error.severity,\n      category: error.category,\n      code: error.code,\n      message: error.message,\n      metadata: error.metadata,\n      stack: error.stack,\n    };\n\n    // In a real implementation, this would write to a file\n    console.log('[FILE LOG]', JSON.stringify(logEntry));\n  },\n};\n\n// Register default handlers\nerrorRegistry.registerHandler('*', DefaultErrorHandlers.consoleLogger);\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9c19e6ee518a942c4d615016acd15461068c7a6c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1anfcgygg5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1anfcgygg5();
cov_1anfcgygg5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1anfcgygg5().s[1]++;
exports.DefaultErrorHandlers = exports.errorRegistry = exports.ErrorContextManager = exports.ErrorUtils = void 0;
/* istanbul ignore next */
cov_1anfcgygg5().s[2]++;
exports.HandleErrors = HandleErrors;
const base_1 =
/* istanbul ignore next */
(cov_1anfcgygg5().s[3]++, require("./base"));
/**
 * Global error registry for tracking and managing errors.
 */
class ErrorRegistry {
  constructor() {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[0]++;
    cov_1anfcgygg5().s[4]++;
    this.handlers = new Map();
    /* istanbul ignore next */
    cov_1anfcgygg5().s[5]++;
    this.breadcrumbs = [];
    /* istanbul ignore next */
    cov_1anfcgygg5().s[6]++;
    this.context = {};
    /* istanbul ignore next */
    cov_1anfcgygg5().s[7]++;
    this.config = {
      enabled: true,
      includeStackTrace: true,
      includeBreadcrumbs: true,
      environment:
      /* istanbul ignore next */
      (cov_1anfcgygg5().b[0][0]++, process.env.NODE_ENV) ||
      /* istanbul ignore next */
      (cov_1anfcgygg5().b[0][1]++, 'development'),
      version: '1.0.0',
      maxRetries: 3,
      retryDelay: 1000
    };
  }
  /**
   * Register an error handler for a specific error type.
   */
  registerHandler(errorType, handler) {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[1]++;
    cov_1anfcgygg5().s[8]++;
    if (!this.handlers.has(errorType)) {
      /* istanbul ignore next */
      cov_1anfcgygg5().b[1][0]++;
      cov_1anfcgygg5().s[9]++;
      this.handlers.set(errorType, []);
    } else
    /* istanbul ignore next */
    {
      cov_1anfcgygg5().b[1][1]++;
    }
    cov_1anfcgygg5().s[10]++;
    this.handlers.get(errorType).push(handler);
  }
  /**
   * Unregister a previously registered error handler for the specified type.
   */
  unregisterHandler(errorType, handler) {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[2]++;
    const handlers =
    /* istanbul ignore next */
    (cov_1anfcgygg5().s[11]++, this.handlers.get(errorType));
    /* istanbul ignore next */
    cov_1anfcgygg5().s[12]++;
    if (handlers) {
      /* istanbul ignore next */
      cov_1anfcgygg5().b[2][0]++;
      const index =
      /* istanbul ignore next */
      (cov_1anfcgygg5().s[13]++, handlers.indexOf(handler));
      /* istanbul ignore next */
      cov_1anfcgygg5().s[14]++;
      if (index !== -1) {
        /* istanbul ignore next */
        cov_1anfcgygg5().b[3][0]++;
        cov_1anfcgygg5().s[15]++;
        handlers.splice(index, 1);
      } else
      /* istanbul ignore next */
      {
        cov_1anfcgygg5().b[3][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1anfcgygg5().b[2][1]++;
    }
  }
  /**
   * Handle an error by calling registered handlers.
   */
  async handleError(error) {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[3]++;
    cov_1anfcgygg5().s[16]++;
    // Add error to breadcrumbs
    this.addBreadcrumb({
      timestamp: new Date(),
      level: 'error',
      message: error.message,
      category: error.category,
      data: {
        code: error.code,
        severity: error.severity
      }
    });
    // Call specific handlers for this error type
    const handlers =
    /* istanbul ignore next */
    (cov_1anfcgygg5().s[17]++,
    /* istanbul ignore next */
    (cov_1anfcgygg5().b[4][0]++, this.handlers.get(error.constructor.name)) ||
    /* istanbul ignore next */
    (cov_1anfcgygg5().b[4][1]++, []));
    const globalHandlers =
    /* istanbul ignore next */
    (cov_1anfcgygg5().s[18]++,
    /* istanbul ignore next */
    (cov_1anfcgygg5().b[5][0]++, this.handlers.get('*')) ||
    /* istanbul ignore next */
    (cov_1anfcgygg5().b[5][1]++, []));
    const allHandlers =
    /* istanbul ignore next */
    (cov_1anfcgygg5().s[19]++, [...handlers, ...globalHandlers]);
    /* istanbul ignore next */
    cov_1anfcgygg5().s[20]++;
    for (const handler of allHandlers) {
      /* istanbul ignore next */
      cov_1anfcgygg5().s[21]++;
      try {
        /* istanbul ignore next */
        cov_1anfcgygg5().s[22]++;
        await Promise.resolve(handler(error));
      } catch (handlerError) {
        /* istanbul ignore next */
        cov_1anfcgygg5().s[23]++;
        console.error('Error handler failed:', handlerError);
      }
    }
    // Report error if enabled
    /* istanbul ignore next */
    cov_1anfcgygg5().s[24]++;
    if (this.config.enabled) {
      /* istanbul ignore next */
      cov_1anfcgygg5().b[6][0]++;
      cov_1anfcgygg5().s[25]++;
      await this.reportError(error);
    } else
    /* istanbul ignore next */
    {
      cov_1anfcgygg5().b[6][1]++;
    }
  }
  /**
   * Add a breadcrumb for context tracking.
   */
  addBreadcrumb(breadcrumb) {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[4]++;
    cov_1anfcgygg5().s[26]++;
    this.breadcrumbs.push(breadcrumb);
    // Keep only last 50 breadcrumbs
    /* istanbul ignore next */
    cov_1anfcgygg5().s[27]++;
    if (this.breadcrumbs.length > 50) {
      /* istanbul ignore next */
      cov_1anfcgygg5().b[7][0]++;
      cov_1anfcgygg5().s[28]++;
      this.breadcrumbs.shift();
    } else
    /* istanbul ignore next */
    {
      cov_1anfcgygg5().b[7][1]++;
    }
  }
  /**
   * Set global error context.
   */
  setContext(context) {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[5]++;
    cov_1anfcgygg5().s[29]++;
    this.context = {
      ...this.context,
      ...context
    };
  }
  /**
   * Get current error context.
   */
  getContext() {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[6]++;
    cov_1anfcgygg5().s[30]++;
    return {
      ...this.context
    };
  }
  /**
   * Clear all accumulated error context data from the registry.
   */
  clearContext() {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[7]++;
    cov_1anfcgygg5().s[31]++;
    this.context = {};
  }
  /**
   * Get recent breadcrumbs.
   */
  getBreadcrumbs() {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[8]++;
    cov_1anfcgygg5().s[32]++;
    return [...this.breadcrumbs];
  }
  /**
   * Configure error reporting.
   */
  configure(config) {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[9]++;
    cov_1anfcgygg5().s[33]++;
    this.config = {
      ...this.config,
      ...config
    };
  }
  /**
   * Report error to external service.
   */
  async reportError(error) {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[10]++;
    cov_1anfcgygg5().s[34]++;
    if (!this.config.endpoint) {
      /* istanbul ignore next */
      cov_1anfcgygg5().b[8][0]++;
      cov_1anfcgygg5().s[35]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1anfcgygg5().b[8][1]++;
    }
    const payload =
    /* istanbul ignore next */
    (cov_1anfcgygg5().s[36]++, {
      error: error.serialize(),
      context: this.context,
      breadcrumbs: this.config.includeBreadcrumbs ?
      /* istanbul ignore next */
      (cov_1anfcgygg5().b[9][0]++, this.breadcrumbs) :
      /* istanbul ignore next */
      (cov_1anfcgygg5().b[9][1]++, []),
      environment: this.config.environment,
      version: this.config.version,
      timestamp: new Date().toISOString()
    });
    let attempt =
    /* istanbul ignore next */
    (cov_1anfcgygg5().s[37]++, 0);
    /* istanbul ignore next */
    cov_1anfcgygg5().s[38]++;
    while (attempt < this.config.maxRetries) {
      /* istanbul ignore next */
      cov_1anfcgygg5().s[39]++;
      try {
        /* istanbul ignore next */
        cov_1anfcgygg5().s[40]++;
        // Note: In a real implementation, you'd use fetch or axios here
        console.log('[Error Reporting]', JSON.stringify(payload, null, 2));
        /* istanbul ignore next */
        cov_1anfcgygg5().s[41]++;
        break;
      } catch (reportError) {
        /* istanbul ignore next */
        cov_1anfcgygg5().s[42]++;
        attempt++;
        /* istanbul ignore next */
        cov_1anfcgygg5().s[43]++;
        if (attempt >= this.config.maxRetries) {
          /* istanbul ignore next */
          cov_1anfcgygg5().b[10][0]++;
          cov_1anfcgygg5().s[44]++;
          console.error('Failed to report error after max retries:', reportError);
        } else {
          /* istanbul ignore next */
          cov_1anfcgygg5().b[10][1]++;
          cov_1anfcgygg5().s[45]++;
          await new Promise(resolve => {
            /* istanbul ignore next */
            cov_1anfcgygg5().f[11]++;
            cov_1anfcgygg5().s[46]++;
            return setTimeout(resolve, this.config.retryDelay);
          });
        }
      }
    }
  }
}
// Global error registry instance
const errorRegistry =
/* istanbul ignore next */
(cov_1anfcgygg5().s[47]++, new ErrorRegistry());
/* istanbul ignore next */
cov_1anfcgygg5().s[48]++;
exports.errorRegistry = errorRegistry;
/**
 * Error utilities class with static methods.
 */
class ErrorUtils {
  /**
   * Wrap an error in an AngleError if it's not already one.
   */
  static wrap(error, context) {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[12]++;
    cov_1anfcgygg5().s[49]++;
    if (error instanceof base_1.AngleError) {
      /* istanbul ignore next */
      cov_1anfcgygg5().b[11][0]++;
      cov_1anfcgygg5().s[50]++;
      return context ?
      /* istanbul ignore next */
      (cov_1anfcgygg5().b[12][0]++, error.withContext(context)) :
      /* istanbul ignore next */
      (cov_1anfcgygg5().b[12][1]++, error);
    } else
    /* istanbul ignore next */
    {
      cov_1anfcgygg5().b[11][1]++;
    }
    cov_1anfcgygg5().s[51]++;
    if (error instanceof Error) {
      /* istanbul ignore next */
      cov_1anfcgygg5().b[13][0]++;
      const errorInstance =
      /* istanbul ignore next */
      (cov_1anfcgygg5().s[52]++, error);
      /* istanbul ignore next */
      cov_1anfcgygg5().s[53]++;
      return new class WrappedError extends base_1.AngleError {
        constructor() {
          /* istanbul ignore next */
          cov_1anfcgygg5().f[13]++;
          cov_1anfcgygg5().s[54]++;
          super(errorInstance.message, 'WRAPPED_ERROR', base_1.ErrorCategory.SYSTEM, base_1.ErrorSeverity.MEDIUM, {
            context,
            stack: errorInstance.stack
          }, errorInstance);
        }
      }();
    } else
    /* istanbul ignore next */
    {
      cov_1anfcgygg5().b[13][1]++;
    }
    // Handle non-Error objects
    const message =
    /* istanbul ignore next */
    (cov_1anfcgygg5().s[55]++, typeof error === 'string' ?
    /* istanbul ignore next */
    (cov_1anfcgygg5().b[14][0]++, error) :
    /* istanbul ignore next */
    (cov_1anfcgygg5().b[14][1]++, String(error)));
    /* istanbul ignore next */
    cov_1anfcgygg5().s[56]++;
    return new class UnknownError extends base_1.AngleError {
      constructor() {
        /* istanbul ignore next */
        cov_1anfcgygg5().f[14]++;
        cov_1anfcgygg5().s[57]++;
        super(message, 'UNKNOWN_ERROR', base_1.ErrorCategory.SYSTEM, base_1.ErrorSeverity.MEDIUM, {
          context
        });
      }
    }();
  }
  /**
   * Check if an error matches a specific type or code.
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  static matches(error, matcher) {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[15]++;
    cov_1anfcgygg5().s[58]++;
    if (!error) {
      /* istanbul ignore next */
      cov_1anfcgygg5().b[15][0]++;
      cov_1anfcgygg5().s[59]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1anfcgygg5().b[15][1]++;
    }
    cov_1anfcgygg5().s[60]++;
    if (typeof matcher === 'string') {
      /* istanbul ignore next */
      cov_1anfcgygg5().b[16][0]++;
      cov_1anfcgygg5().s[61]++;
      return /* istanbul ignore next */(cov_1anfcgygg5().b[17][0]++, error instanceof base_1.AngleError) &&
      /* istanbul ignore next */
      (cov_1anfcgygg5().b[17][1]++, error.code === matcher);
    } else
    /* istanbul ignore next */
    {
      cov_1anfcgygg5().b[16][1]++;
    }
    cov_1anfcgygg5().s[62]++;
    return error instanceof matcher;
  }
  /**
   * Find errors in an error chain that match a specific type.
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  static findInChain(error, errorType) {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[16]++;
    let current =
    /* istanbul ignore next */
    (cov_1anfcgygg5().s[63]++, error);
    /* istanbul ignore next */
    cov_1anfcgygg5().s[64]++;
    while (current) {
      /* istanbul ignore next */
      cov_1anfcgygg5().s[65]++;
      if (current instanceof errorType) {
        /* istanbul ignore next */
        cov_1anfcgygg5().b[18][0]++;
        cov_1anfcgygg5().s[66]++;
        return current;
      } else
      /* istanbul ignore next */
      {
        cov_1anfcgygg5().b[18][1]++;
      }
      cov_1anfcgygg5().s[67]++;
      current = current.cause;
      /* istanbul ignore next */
      cov_1anfcgygg5().s[68]++;
      if (!current) {
        /* istanbul ignore next */
        cov_1anfcgygg5().b[19][0]++;
        cov_1anfcgygg5().s[69]++;
        break;
      } else
      /* istanbul ignore next */
      {
        cov_1anfcgygg5().b[19][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1anfcgygg5().s[70]++;
    return null;
  }
  /**
   * Execute a function with error handling and recovery.
   */
  static async withRecovery(operation, recovery, context) {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[17]++;
    cov_1anfcgygg5().s[71]++;
    try {
      /* istanbul ignore next */
      cov_1anfcgygg5().s[72]++;
      return await Promise.resolve(operation());
    } catch (error) {
      const angleError =
      /* istanbul ignore next */
      (cov_1anfcgygg5().s[73]++, this.wrap(error, context));
      /* istanbul ignore next */
      cov_1anfcgygg5().s[74]++;
      await errorRegistry.handleError(angleError);
      /* istanbul ignore next */
      cov_1anfcgygg5().s[75]++;
      return await Promise.resolve(recovery(angleError));
    }
  }
  /**
   * Execute a function with retries.
   */
  static async withRetry(operation, maxRetries =
  /* istanbul ignore next */
  (cov_1anfcgygg5().b[20][0]++, 3), delay =
  /* istanbul ignore next */
  (cov_1anfcgygg5().b[21][0]++, 1000), context) {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[18]++;
    let lastError =
    /* istanbul ignore next */
    (cov_1anfcgygg5().s[76]++, null);
    /* istanbul ignore next */
    cov_1anfcgygg5().s[77]++;
    for (let attempt =
    /* istanbul ignore next */
    (cov_1anfcgygg5().s[78]++, 0); attempt <= maxRetries; attempt++) {
      /* istanbul ignore next */
      cov_1anfcgygg5().s[79]++;
      try {
        /* istanbul ignore next */
        cov_1anfcgygg5().s[80]++;
        return await Promise.resolve(operation());
      } catch (error) {
        /* istanbul ignore next */
        cov_1anfcgygg5().s[81]++;
        lastError = ErrorUtils.wrap(error, context);
        /* istanbul ignore next */
        cov_1anfcgygg5().s[82]++;
        if (attempt === maxRetries) {
          /* istanbul ignore next */
          cov_1anfcgygg5().b[22][0]++;
          cov_1anfcgygg5().s[83]++;
          await errorRegistry.handleError(lastError);
          /* istanbul ignore next */
          cov_1anfcgygg5().s[84]++;
          throw lastError;
        } else
        /* istanbul ignore next */
        {
          cov_1anfcgygg5().b[22][1]++;
        }
        // Use error-specific retry delay if available
        const retryDelay =
        /* istanbul ignore next */
        (cov_1anfcgygg5().s[85]++,
        /* istanbul ignore next */
        (cov_1anfcgygg5().b[23][0]++, lastError.getRetryDelay()) ||
        /* istanbul ignore next */
        (cov_1anfcgygg5().b[23][1]++, delay));
        /* istanbul ignore next */
        cov_1anfcgygg5().s[86]++;
        if (retryDelay > 0) {
          /* istanbul ignore next */
          cov_1anfcgygg5().b[24][0]++;
          cov_1anfcgygg5().s[87]++;
          await new Promise(resolve => {
            /* istanbul ignore next */
            cov_1anfcgygg5().f[19]++;
            cov_1anfcgygg5().s[88]++;
            return setTimeout(resolve, retryDelay);
          });
        } else
        /* istanbul ignore next */
        {
          cov_1anfcgygg5().b[24][1]++;
        }
      }
    }
    // This should never be reached, but TypeScript requires it
    /* istanbul ignore next */
    cov_1anfcgygg5().s[89]++;
    throw lastError;
  }
  /**
   * Format error for display.
   */
  static format(error, includeStack =
  /* istanbul ignore next */
  (cov_1anfcgygg5().b[25][0]++, false)) {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[20]++;
    const parts =
    /* istanbul ignore next */
    (cov_1anfcgygg5().s[90]++, [`[${error.severity}] ${error.category}:${error.code}`, error.message]);
    /* istanbul ignore next */
    cov_1anfcgygg5().s[91]++;
    if (error.metadata.context) {
      /* istanbul ignore next */
      cov_1anfcgygg5().b[26][0]++;
      const contextStr =
      /* istanbul ignore next */
      (cov_1anfcgygg5().s[92]++, Object.entries(error.metadata.context).map(([key, value]) => {
        /* istanbul ignore next */
        cov_1anfcgygg5().f[21]++;
        cov_1anfcgygg5().s[93]++;
        return `${key}=${JSON.stringify(value)}`;
      }).join(', '));
      /* istanbul ignore next */
      cov_1anfcgygg5().s[94]++;
      if (contextStr) {
        /* istanbul ignore next */
        cov_1anfcgygg5().b[27][0]++;
        cov_1anfcgygg5().s[95]++;
        parts.push(`Context: {${contextStr}}`);
      } else
      /* istanbul ignore next */
      {
        cov_1anfcgygg5().b[27][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1anfcgygg5().b[26][1]++;
    }
    cov_1anfcgygg5().s[96]++;
    if (
    /* istanbul ignore next */
    (cov_1anfcgygg5().b[29][0]++, includeStack) &&
    /* istanbul ignore next */
    (cov_1anfcgygg5().b[29][1]++, error.stack)) {
      /* istanbul ignore next */
      cov_1anfcgygg5().b[28][0]++;
      cov_1anfcgygg5().s[97]++;
      parts.push(`Stack: ${error.stack}`);
    } else
    /* istanbul ignore next */
    {
      cov_1anfcgygg5().b[28][1]++;
    }
    cov_1anfcgygg5().s[98]++;
    return parts.join('\n');
  }
  /**
   * Convert error to log-friendly object.
   */
  static toLogObject(error) {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[22]++;
    cov_1anfcgygg5().s[99]++;
    return {
      name: error.name,
      message: error.message,
      code: error.code,
      category: error.category,
      severity: error.severity,
      timestamp: error.timestamp,
      stack: error.stack,
      metadata: error.metadata,
      cause: error.cause ?
      /* istanbul ignore next */
      (cov_1anfcgygg5().b[30][0]++, this.toLogObject(ErrorUtils.wrap(error.cause))) :
      /* istanbul ignore next */
      (cov_1anfcgygg5().b[30][1]++, undefined)
    };
  }
  /**
   * Deserialize error from JSON.
   */
  static fromSerialized(serialized) {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[23]++;
    const error =
    /* istanbul ignore next */
    (cov_1anfcgygg5().s[100]++, new class DeserializedError extends base_1.AngleError {
      constructor() {
        /* istanbul ignore next */
        cov_1anfcgygg5().f[24]++;
        cov_1anfcgygg5().s[101]++;
        super(serialized.message, serialized.code, serialized.category, serialized.severity, serialized.metadata, serialized.cause ?
        /* istanbul ignore next */
        (cov_1anfcgygg5().b[31][0]++, ErrorUtils.fromSerialized(serialized.cause)) :
        /* istanbul ignore next */
        (cov_1anfcgygg5().b[31][1]++, undefined));
        /* istanbul ignore next */
        cov_1anfcgygg5().s[102]++;
        this.name = serialized.name;
        /* istanbul ignore next */
        cov_1anfcgygg5().s[103]++;
        this.stack = serialized.stack;
      }
    }());
    /* istanbul ignore next */
    cov_1anfcgygg5().s[104]++;
    return error;
  }
  /**
   * Group errors by category.
   */
  static groupByCategory(errors) {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[25]++;
    const grouped =
    /* istanbul ignore next */
    (cov_1anfcgygg5().s[105]++, new Map());
    /* istanbul ignore next */
    cov_1anfcgygg5().s[106]++;
    for (const error of errors) {
      /* istanbul ignore next */
      cov_1anfcgygg5().s[107]++;
      if (!grouped.has(error.category)) {
        /* istanbul ignore next */
        cov_1anfcgygg5().b[32][0]++;
        cov_1anfcgygg5().s[108]++;
        grouped.set(error.category, []);
      } else
      /* istanbul ignore next */
      {
        cov_1anfcgygg5().b[32][1]++;
      }
      cov_1anfcgygg5().s[109]++;
      grouped.get(error.category).push(error);
    }
    /* istanbul ignore next */
    cov_1anfcgygg5().s[110]++;
    return grouped;
  }
  /**
   * Generate comprehensive statistics for an array of errors including counts by category and severity.
   */
  static getStatistics(errors) {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[26]++;
    const stats =
    /* istanbul ignore next */
    (cov_1anfcgygg5().s[111]++, {
      total: errors.length,
      byCategory: {},
      bySeverity: {},
      recoverable: 0,
      nonRecoverable: 0
    });
    /* istanbul ignore next */
    cov_1anfcgygg5().s[112]++;
    for (const error of errors) {
      /* istanbul ignore next */
      cov_1anfcgygg5().s[113]++;
      stats.byCategory[error.category] = (
      /* istanbul ignore next */
      (cov_1anfcgygg5().b[33][0]++, stats.byCategory[error.category]) ||
      /* istanbul ignore next */
      (cov_1anfcgygg5().b[33][1]++, 0)) + 1;
      /* istanbul ignore next */
      cov_1anfcgygg5().s[114]++;
      stats.bySeverity[error.severity] = (
      /* istanbul ignore next */
      (cov_1anfcgygg5().b[34][0]++, stats.bySeverity[error.severity]) ||
      /* istanbul ignore next */
      (cov_1anfcgygg5().b[34][1]++, 0)) + 1;
      /* istanbul ignore next */
      cov_1anfcgygg5().s[115]++;
      if (error.isRecoverable()) {
        /* istanbul ignore next */
        cov_1anfcgygg5().b[35][0]++;
        cov_1anfcgygg5().s[116]++;
        stats.recoverable++;
      } else {
        /* istanbul ignore next */
        cov_1anfcgygg5().b[35][1]++;
        cov_1anfcgygg5().s[117]++;
        stats.nonRecoverable++;
      }
    }
    /* istanbul ignore next */
    cov_1anfcgygg5().s[118]++;
    return stats;
  }
}
/* istanbul ignore next */
cov_1anfcgygg5().s[119]++;
exports.ErrorUtils = ErrorUtils;
/**
 * Error context manager for scoped error handling.
 */
class ErrorContextManager {
  /**
   * Push a new error context onto the stack.
   */
  static pushContext(context) {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[27]++;
    cov_1anfcgygg5().s[120]++;
    this.contextStack.push(context);
    /* istanbul ignore next */
    cov_1anfcgygg5().s[121]++;
    errorRegistry.setContext(this.getMergedContext());
  }
  /**
   * Pop the top error context from the stack.
   */
  static popContext() {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[28]++;
    const context =
    /* istanbul ignore next */
    (cov_1anfcgygg5().s[122]++, this.contextStack.pop());
    /* istanbul ignore next */
    cov_1anfcgygg5().s[123]++;
    errorRegistry.setContext(this.getMergedContext());
    /* istanbul ignore next */
    cov_1anfcgygg5().s[124]++;
    return context;
  }
  /**
   * Get the current merged context from the stack.
   */
  static getMergedContext() {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[29]++;
    cov_1anfcgygg5().s[125]++;
    return this.contextStack.reduce((merged, context) => {
      /* istanbul ignore next */
      cov_1anfcgygg5().f[30]++;
      cov_1anfcgygg5().s[126]++;
      return {
        ...merged,
        ...context
      };
    }, {});
  }
  /**
   * Execute a function with a specific error context.
   */
  static async withContext(context, operation) {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[31]++;
    cov_1anfcgygg5().s[127]++;
    ErrorContextManager.pushContext(context);
    /* istanbul ignore next */
    cov_1anfcgygg5().s[128]++;
    try {
      /* istanbul ignore next */
      cov_1anfcgygg5().s[129]++;
      return await Promise.resolve(operation());
    } finally {
      /* istanbul ignore next */
      cov_1anfcgygg5().s[130]++;
      ErrorContextManager.popContext();
    }
  }
  /**
   * Clear all contexts.
   */
  static clearAll() {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[32]++;
    cov_1anfcgygg5().s[131]++;
    this.contextStack.length = 0;
    /* istanbul ignore next */
    cov_1anfcgygg5().s[132]++;
    errorRegistry.clearContext();
  }
}
/* istanbul ignore next */
cov_1anfcgygg5().s[133]++;
exports.ErrorContextManager = ErrorContextManager;
/* istanbul ignore next */
cov_1anfcgygg5().s[134]++;
ErrorContextManager.contextStack = [];
/**
 * Decorator for automatic error handling.
 */
function HandleErrors(recovery) {
  /* istanbul ignore next */
  cov_1anfcgygg5().f[33]++;
  cov_1anfcgygg5().s[135]++;
  return function (target, propertyName, descriptor) {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[34]++;
    const method =
    /* istanbul ignore next */
    (cov_1anfcgygg5().s[136]++, descriptor.value);
    /* istanbul ignore next */
    cov_1anfcgygg5().s[137]++;
    descriptor.value = async function (...args) {
      /* istanbul ignore next */
      cov_1anfcgygg5().f[35]++;
      cov_1anfcgygg5().s[138]++;
      try {
        /* istanbul ignore next */
        cov_1anfcgygg5().s[139]++;
        return await method.apply(this, args);
      } catch (error) {
        const angleError =
        /* istanbul ignore next */
        (cov_1anfcgygg5().s[140]++, ErrorUtils.wrap(error, {
          operation: `${target.constructor.name}.${propertyName}`
        }));
        /* istanbul ignore next */
        cov_1anfcgygg5().s[141]++;
        await errorRegistry.handleError(angleError);
        /* istanbul ignore next */
        cov_1anfcgygg5().s[142]++;
        if (recovery) {
          /* istanbul ignore next */
          cov_1anfcgygg5().b[36][0]++;
          cov_1anfcgygg5().s[143]++;
          return await Promise.resolve(recovery(angleError));
        } else
        /* istanbul ignore next */
        {
          cov_1anfcgygg5().b[36][1]++;
        }
        cov_1anfcgygg5().s[144]++;
        throw angleError;
      }
    };
    /* istanbul ignore next */
    cov_1anfcgygg5().s[145]++;
    return descriptor;
  };
}
/**
 * Pre-configured error handlers for common logging and reporting scenarios.
 */
/* istanbul ignore next */
cov_1anfcgygg5().s[146]++;
exports.DefaultErrorHandlers = {
  /**
   * Console logger handler.
   */
  consoleLogger: error => {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[36]++;
    const level =
    /* istanbul ignore next */
    (cov_1anfcgygg5().s[147]++, error.severity === base_1.ErrorSeverity.CRITICAL ?
    /* istanbul ignore next */
    (cov_1anfcgygg5().b[37][0]++, 'error') :
    /* istanbul ignore next */
    (cov_1anfcgygg5().b[37][1]++, error.severity === base_1.ErrorSeverity.HIGH ?
    /* istanbul ignore next */
    (cov_1anfcgygg5().b[38][0]++, 'error') :
    /* istanbul ignore next */
    (cov_1anfcgygg5().b[38][1]++, error.severity === base_1.ErrorSeverity.MEDIUM ?
    /* istanbul ignore next */
    (cov_1anfcgygg5().b[39][0]++, 'warn') :
    /* istanbul ignore next */
    (cov_1anfcgygg5().b[39][1]++, 'info'))));
    /* istanbul ignore next */
    cov_1anfcgygg5().s[148]++;
    console[level](`[${error.category}:${error.code}] ${error.message}`, {
      severity: error.severity,
      metadata: error.metadata,
      stack: error.stack
    });
  },
  /**
   * File logger handler (simplified - would use actual file writing in production).
   */
  fileLogger: error => {
    /* istanbul ignore next */
    cov_1anfcgygg5().f[37]++;
    const logEntry =
    /* istanbul ignore next */
    (cov_1anfcgygg5().s[149]++, {
      timestamp: error.timestamp.toISOString(),
      level: error.severity,
      category: error.category,
      code: error.code,
      message: error.message,
      metadata: error.metadata,
      stack: error.stack
    });
    // In a real implementation, this would write to a file
    /* istanbul ignore next */
    cov_1anfcgygg5().s[150]++;
    console.log('[FILE LOG]', JSON.stringify(logEntry));
  }
};
// Register default handlers
/* istanbul ignore next */
cov_1anfcgygg5().s[151]++;
errorRegistry.registerHandler('*', exports.DefaultErrorHandlers.consoleLogger);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,