{"version":3,"names":["cov_1anfcgygg5","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","HandleErrors","base_1","require","ErrorRegistry","constructor","handlers","Map","breadcrumbs","context","config","enabled","includeStackTrace","includeBreadcrumbs","environment","process","env","NODE_ENV","maxRetries","retryDelay","registerHandler","errorType","handler","has","set","get","push","unregisterHandler","index","indexOf","splice","handleError","error","addBreadcrumb","timestamp","Date","level","message","category","data","code","severity","globalHandlers","allHandlers","Promise","resolve","handlerError","console","reportError","breadcrumb","length","shift","setContext","getContext","clearContext","getBreadcrumbs","configure","endpoint","payload","serialize","toISOString","attempt","log","JSON","stringify","setTimeout","errorRegistry","ErrorUtils","wrap","AngleError","withContext","Error","errorInstance","WrappedError","ErrorCategory","SYSTEM","ErrorSeverity","MEDIUM","stack","String","UnknownError","matches","matcher","findInChain","current","cause","withRecovery","operation","recovery","angleError","withRetry","delay","lastError","getRetryDelay","format","includeStack","parts","metadata","contextStr","Object","entries","map","key","value","join","toLogObject","fromSerialized","serialized","DeserializedError","groupByCategory","errors","grouped","getStatistics","stats","total","byCategory","bySeverity","recoverable","nonRecoverable","isRecoverable","ErrorContextManager","pushContext","contextStack","getMergedContext","popContext","pop","reduce","merged","clearAll","target","propertyName","descriptor","method","args","apply","DefaultErrorHandlers","consoleLogger","CRITICAL","HIGH","fileLogger","logEntry"],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/core/errors/utilities.ts"],"sourcesContent":["/**\n * @file Error handling utilities.\n *\n * Provides utilities for error serialization, logging, reporting, and handling.\n * with support for error recovery strategies and context enrichment.\n */\n\nimport { AngleError, ErrorSeverity, ErrorCategory, SerializedError } from './base';\n\n/**\n * Error handler function type.\n */\nexport type ErrorHandler = (error: AngleError) => void | Promise<void>;\n\n/**\n * Error recovery strategy function type.\n */\nexport type RecoveryStrategy<T = unknown> = (error: AngleError) => T | Promise<T>;\n\n/**\n * Error reporting configuration.\n */\nexport interface ErrorReportingConfig {\n  enabled: boolean;\n  endpoint?: string;\n  apiKey?: string;\n  includeStackTrace: boolean;\n  includeBreadcrumbs: boolean;\n  environment: string;\n  version: string;\n  maxRetries: number;\n  retryDelay: number;\n}\n\n/**\n * Error context for enriching errors with additional information.\n */\nexport interface ErrorContext {\n  operation?: string;\n  resource?: string;\n  user?: {\n    id?: string;\n    email?: string;\n  };\n  request?: {\n    id?: string;\n    url?: string;\n    method?: string;\n  };\n  website?: {\n    id?: string;\n    domain?: string;\n    path?: string;\n  };\n  [key: string]: unknown;\n}\n\n/**\n * Error breadcrumb for tracking error context.\n */\nexport interface ErrorBreadcrumb {\n  timestamp: Date;\n  level: 'debug' | 'info' | 'warning' | 'error';\n  message: string;\n  category: string;\n  data?: Record<string, unknown>;\n}\n\n/**\n * Global error registry for tracking and managing errors.\n */\nclass ErrorRegistry {\n  private handlers = new Map<string, ErrorHandler[]>();\n  private breadcrumbs: ErrorBreadcrumb[] = [];\n  private context: ErrorContext = {};\n  private config: ErrorReportingConfig = {\n    enabled: true,\n    includeStackTrace: true,\n    includeBreadcrumbs: true,\n    environment: process.env.NODE_ENV || 'development',\n    version: '1.0.0',\n    maxRetries: 3,\n    retryDelay: 1000,\n  };\n\n  /**\n   * Register an error handler for a specific error type.\n   */\n  registerHandler(errorType: string, handler: ErrorHandler): void {\n    if (!this.handlers.has(errorType)) {\n      this.handlers.set(errorType, []);\n    }\n    this.handlers.get(errorType)!.push(handler);\n  }\n\n  /**\n   * Unregister a previously registered error handler for the specified type.\n   */\n  unregisterHandler(errorType: string, handler: ErrorHandler): void {\n    const handlers = this.handlers.get(errorType);\n    if (handlers) {\n      const index = handlers.indexOf(handler);\n      if (index !== -1) {\n        handlers.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Handle an error by calling registered handlers.\n   */\n  async handleError(error: AngleError): Promise<void> {\n    // Add error to breadcrumbs\n    this.addBreadcrumb({\n      timestamp: new Date(),\n      level: 'error',\n      message: error.message,\n      category: error.category,\n      data: { code: error.code, severity: error.severity },\n    });\n\n    // Call specific handlers for this error type\n    const handlers = this.handlers.get(error.constructor.name) || [];\n    const globalHandlers = this.handlers.get('*') || [];\n    const allHandlers = [...handlers, ...globalHandlers];\n\n    for (const handler of allHandlers) {\n      try {\n        await Promise.resolve(handler(error));\n      } catch (handlerError) {\n        console.error('Error handler failed:', handlerError);\n      }\n    }\n\n    // Report error if enabled\n    if (this.config.enabled) {\n      await this.reportError(error);\n    }\n  }\n\n  /**\n   * Add a breadcrumb for context tracking.\n   */\n  addBreadcrumb(breadcrumb: ErrorBreadcrumb): void {\n    this.breadcrumbs.push(breadcrumb);\n    // Keep only last 50 breadcrumbs\n    if (this.breadcrumbs.length > 50) {\n      this.breadcrumbs.shift();\n    }\n  }\n\n  /**\n   * Set global error context.\n   */\n  setContext(context: Partial<ErrorContext>): void {\n    this.context = { ...this.context, ...context };\n  }\n\n  /**\n   * Get current error context.\n   */\n  getContext(): ErrorContext {\n    return { ...this.context };\n  }\n\n  /**\n   * Clear all accumulated error context data from the registry.\n   */\n  clearContext(): void {\n    this.context = {};\n  }\n\n  /**\n   * Get recent breadcrumbs.\n   */\n  getBreadcrumbs(): ErrorBreadcrumb[] {\n    return [...this.breadcrumbs];\n  }\n\n  /**\n   * Configure error reporting.\n   */\n  configure(config: Partial<ErrorReportingConfig>): void {\n    this.config = { ...this.config, ...config };\n  }\n\n  /**\n   * Report error to external service.\n   */\n  private async reportError(error: AngleError): Promise<void> {\n    if (!this.config.endpoint) {\n      return;\n    }\n\n    const payload = {\n      error: error.serialize(),\n      context: this.context,\n      breadcrumbs: this.config.includeBreadcrumbs ? this.breadcrumbs : [],\n      environment: this.config.environment,\n      version: this.config.version,\n      timestamp: new Date().toISOString(),\n    };\n\n    let attempt = 0;\n    while (attempt < this.config.maxRetries) {\n      try {\n        // Note: In a real implementation, you'd use fetch or axios here\n        console.log('[Error Reporting]', JSON.stringify(payload, null, 2));\n        break;\n      } catch (reportError) {\n        attempt++;\n        if (attempt >= this.config.maxRetries) {\n          console.error('Failed to report error after max retries:', reportError);\n        } else {\n          await new Promise((resolve) => setTimeout(resolve, this.config.retryDelay));\n        }\n      }\n    }\n  }\n}\n\n// Global error registry instance\nconst errorRegistry = new ErrorRegistry();\n\n/**\n * Error utilities class with static methods.\n */\nexport class ErrorUtils {\n  /**\n   * Wrap an error in an AngleError if it's not already one.\n   */\n  static wrap(error: unknown, context?: Partial<ErrorContext>): AngleError {\n    if (error instanceof AngleError) {\n      return context ? error.withContext(context) : error;\n    }\n\n    if (error instanceof Error) {\n      const errorInstance = error as Error;\n      return new (class WrappedError extends AngleError {\n        constructor() {\n          super(\n            errorInstance.message,\n            'WRAPPED_ERROR',\n            ErrorCategory.SYSTEM,\n            ErrorSeverity.MEDIUM,\n            {\n              context,\n              stack: errorInstance.stack,\n            },\n            errorInstance\n          );\n        }\n      })();\n    }\n\n    // Handle non-Error objects\n    const message = typeof error === 'string' ? error : String(error);\n    return new (class UnknownError extends AngleError {\n      constructor() {\n        super(message, 'UNKNOWN_ERROR', ErrorCategory.SYSTEM, ErrorSeverity.MEDIUM, { context });\n      }\n    })();\n  }\n\n  /**\n   * Check if an error matches a specific type or code.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static matches(error: unknown, matcher: string | (new (...args: any[]) => Error)): boolean {\n    if (!error) return false;\n\n    if (typeof matcher === 'string') {\n      return error instanceof AngleError && error.code === matcher;\n    }\n\n    return error instanceof matcher;\n  }\n\n  /**\n   * Find errors in an error chain that match a specific type.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static findInChain<T extends AngleError>(error: AngleError, errorType: new (...args: any[]) => T): T | null {\n    let current: Error = error;\n    while (current) {\n      if (current instanceof errorType) {\n        return current;\n      }\n      current = (current as Error & { cause?: Error }).cause as Error;\n      if (!current) break;\n    }\n    return null;\n  }\n\n  /**\n   * Execute a function with error handling and recovery.\n   */\n  static async withRecovery<T>(\n    operation: () => T | Promise<T>,\n    recovery: RecoveryStrategy<T>,\n    context?: ErrorContext\n  ): Promise<T> {\n    try {\n      return await Promise.resolve(operation());\n    } catch (error) {\n      const angleError = this.wrap(error, context);\n      await errorRegistry.handleError(angleError);\n      return await Promise.resolve(recovery(angleError));\n    }\n  }\n\n  /**\n   * Execute a function with retries.\n   */\n  static async withRetry<T>(\n    operation: () => T | Promise<T>,\n    maxRetries: number = 3,\n    delay: number = 1000,\n    context?: ErrorContext\n  ): Promise<T> {\n    let lastError: AngleError | null = null;\n\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await Promise.resolve(operation());\n      } catch (error) {\n        lastError = ErrorUtils.wrap(error, context);\n\n        if (attempt === maxRetries) {\n          await errorRegistry.handleError(lastError);\n          throw lastError;\n        }\n\n        // Use error-specific retry delay if available\n        const retryDelay = lastError.getRetryDelay() || delay;\n        if (retryDelay > 0) {\n          await new Promise((resolve) => setTimeout(resolve, retryDelay));\n        }\n      }\n    }\n\n    // This should never be reached, but TypeScript requires it\n    throw lastError!;\n  }\n\n  /**\n   * Format error for display.\n   */\n  static format(error: AngleError, includeStack: boolean = false): string {\n    const parts = [`[${error.severity}] ${error.category}:${error.code}`, error.message];\n\n    if (error.metadata.context) {\n      const contextStr = Object.entries(error.metadata.context)\n        .map(([key, value]) => `${key}=${JSON.stringify(value)}`)\n        .join(', ');\n      if (contextStr) {\n        parts.push(`Context: {${contextStr}}`);\n      }\n    }\n\n    if (includeStack && error.stack) {\n      parts.push(`Stack: ${error.stack}`);\n    }\n\n    return parts.join('\\n');\n  }\n\n  /**\n   * Convert error to log-friendly object.\n   */\n  static toLogObject(error: AngleError): Record<string, unknown> {\n    return {\n      name: error.name,\n      message: error.message,\n      code: error.code,\n      category: error.category,\n      severity: error.severity,\n      timestamp: error.timestamp,\n      stack: error.stack,\n      metadata: error.metadata,\n      cause: error.cause ? this.toLogObject(ErrorUtils.wrap(error.cause)) : undefined,\n    };\n  }\n\n  /**\n   * Deserialize error from JSON.\n   */\n  static fromSerialized(serialized: SerializedError): AngleError {\n    const error = new (class DeserializedError extends AngleError {\n      constructor() {\n        super(\n          serialized.message,\n          serialized.code,\n          serialized.category,\n          serialized.severity,\n          serialized.metadata,\n          serialized.cause ? ErrorUtils.fromSerialized(serialized.cause) : undefined\n        );\n        this.name = serialized.name;\n        this.stack = serialized.stack;\n      }\n    })();\n\n    return error;\n  }\n\n  /**\n   * Group errors by category.\n   */\n  static groupByCategory(errors: AngleError[]): Map<ErrorCategory, AngleError[]> {\n    const grouped = new Map<ErrorCategory, AngleError[]>();\n\n    for (const error of errors) {\n      if (!grouped.has(error.category)) {\n        grouped.set(error.category, []);\n      }\n      grouped.get(error.category)!.push(error);\n    }\n\n    return grouped;\n  }\n\n  /**\n   * Generate comprehensive statistics for an array of errors including counts by category and severity.\n   */\n  static getStatistics(errors: AngleError[]): {\n    total: number;\n    byCategory: Record<ErrorCategory, number>;\n    bySeverity: Record<ErrorSeverity, number>;\n    recoverable: number;\n    nonRecoverable: number;\n  } {\n    const stats = {\n      total: errors.length,\n      byCategory: {} as Record<ErrorCategory, number>,\n      bySeverity: {} as Record<ErrorSeverity, number>,\n      recoverable: 0,\n      nonRecoverable: 0,\n    };\n\n    for (const error of errors) {\n      stats.byCategory[error.category] = (stats.byCategory[error.category] || 0) + 1;\n      stats.bySeverity[error.severity] = (stats.bySeverity[error.severity] || 0) + 1;\n\n      if (error.isRecoverable()) {\n        stats.recoverable++;\n      } else {\n        stats.nonRecoverable++;\n      }\n    }\n\n    return stats;\n  }\n}\n\n/**\n * Error context manager for scoped error handling.\n */\nexport class ErrorContextManager {\n  private static contextStack: ErrorContext[] = [];\n\n  /**\n   * Push a new error context onto the stack.\n   */\n  static pushContext(context: ErrorContext): void {\n    this.contextStack.push(context);\n    errorRegistry.setContext(this.getMergedContext());\n  }\n\n  /**\n   * Pop the top error context from the stack.\n   */\n  static popContext(): ErrorContext | undefined {\n    const context = this.contextStack.pop();\n    errorRegistry.setContext(this.getMergedContext());\n    return context;\n  }\n\n  /**\n   * Get the current merged context from the stack.\n   */\n  static getMergedContext(): ErrorContext {\n    return this.contextStack.reduce((merged, context) => ({ ...merged, ...context }), {});\n  }\n\n  /**\n   * Execute a function with a specific error context.\n   */\n  static async withContext<T>(context: ErrorContext, operation: () => T | Promise<T>): Promise<T> {\n    ErrorContextManager.pushContext(context);\n    try {\n      return await Promise.resolve(operation());\n    } finally {\n      ErrorContextManager.popContext();\n    }\n  }\n\n  /**\n   * Clear all contexts.\n   */\n  static clearAll(): void {\n    this.contextStack.length = 0;\n    errorRegistry.clearContext();\n  }\n}\n\n// Export the global error registry for external access\nexport { errorRegistry };\n\n/**\n * Decorator for automatic error handling.\n */\nexport function HandleErrors<T = unknown>(recovery?: RecoveryStrategy<T>) {\n  return function (target: unknown, propertyName: string, descriptor: PropertyDescriptor): unknown {\n    const method = descriptor.value;\n\n    descriptor.value = async function (...args: unknown[]) {\n      try {\n        return await method.apply(this, args);\n      } catch (error) {\n        const angleError = ErrorUtils.wrap(error, {\n          operation: `${(target as { constructor: { name: string } }).constructor.name}.${propertyName}`,\n        });\n\n        await errorRegistry.handleError(angleError);\n\n        if (recovery) {\n          return await Promise.resolve(recovery(angleError));\n        }\n\n        throw angleError;\n      }\n    };\n\n    return descriptor;\n  };\n}\n\n/**\n * Pre-configured error handlers for common logging and reporting scenarios.\n */\nexport const DefaultErrorHandlers = {\n  /**\n   * Console logger handler.\n   */\n  consoleLogger: (error: AngleError) => {\n    const level =\n      error.severity === ErrorSeverity.CRITICAL\n        ? 'error'\n        : error.severity === ErrorSeverity.HIGH\n          ? 'error'\n          : error.severity === ErrorSeverity.MEDIUM\n            ? 'warn'\n            : 'info';\n\n    console[level](`[${error.category}:${error.code}] ${error.message}`, {\n      severity: error.severity,\n      metadata: error.metadata,\n      stack: error.stack,\n    });\n  },\n\n  /**\n   * File logger handler (simplified - would use actual file writing in production).\n   */\n  fileLogger: (error: AngleError) => {\n    const logEntry = {\n      timestamp: error.timestamp.toISOString(),\n      level: error.severity,\n      category: error.category,\n      code: error.code,\n      message: error.message,\n      metadata: error.metadata,\n      stack: error.stack,\n    };\n\n    // In a real implementation, this would write to a file\n    console.log('[FILE LOG]', JSON.stringify(logEntry));\n  },\n};\n\n// Register default handlers\nerrorRegistry.registerHandler('*', DefaultErrorHandlers.consoleLogger);\n"],"mappings":";;AAAA;;;;;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAA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","ignoreList":[]}