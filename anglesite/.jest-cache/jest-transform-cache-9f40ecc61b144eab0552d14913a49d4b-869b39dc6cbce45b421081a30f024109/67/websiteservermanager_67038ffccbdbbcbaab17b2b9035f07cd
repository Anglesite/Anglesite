c6a1c2520a36372f456dabd923924d41
"use strict";

/* istanbul ignore next */
function cov_1o17l5pc7l() {
  var path = "/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/server/website-server-manager.ts";
  var hash = "96014fb07219076439e972765eba391f4609e5c6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/server/website-server-manager.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 91
        }
      },
      "37": {
        start: {
          line: 37,
          column: 0
        },
        end: {
          line: 37,
          column: 64
        }
      },
      "38": {
        start: {
          line: 38,
          column: 0
        },
        end: {
          line: 38,
          column: 56
        }
      },
      "39": {
        start: {
          line: 53,
          column: 13
        },
        end: {
          line: 53,
          column: 42
        }
      },
      "40": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 40
        }
      },
      "41": {
        start: {
          line: 55,
          column: 17
        },
        end: {
          line: 55,
          column: 34
        }
      },
      "42": {
        start: {
          line: 56,
          column: 29
        },
        end: {
          line: 56,
          column: 60
        }
      },
      "43": {
        start: {
          line: 61,
          column: 0
        },
        end: {
          line: 67,
          column: 60
        }
      },
      "44": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 62,
          column: 39
        }
      },
      "45": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 63,
          column: 41
        }
      },
      "46": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 64,
          column: 39
        }
      },
      "47": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 65,
          column: 41
        }
      },
      "48": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 66,
          column: 35
        }
      },
      "49": {
        start: {
          line: 71,
          column: 23
        },
        end: {
          line: 77,
          column: 1
        }
      },
      "50": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 16
        }
      },
      "51": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 37
        }
      },
      "52": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 33
        }
      },
      "53": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 40
        }
      },
      "54": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 36
        }
      },
      "55": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 72
        }
      },
      "56": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 55
        }
      },
      "57": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 37
        }
      },
      "58": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 68
        }
      },
      "59": {
        start: {
          line: 108,
          column: 30
        },
        end: {
          line: 108,
          column: 86
        }
      },
      "60": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 62
        }
      },
      "61": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "62": {
        start: {
          line: 119,
          column: 12
        },
        end: {
          line: 119,
          column: 63
        }
      },
      "63": {
        start: {
          line: 122,
          column: 31
        },
        end: {
          line: 122,
          column: 60
        }
      },
      "64": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "65": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 127,
          column: 13
        }
      },
      "66": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 103
        }
      },
      "67": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 126,
          column: 38
        }
      },
      "68": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 130,
          column: 13
        }
      },
      "69": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 129,
          column: 81
        }
      },
      "70": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 134,
          column: 13
        }
      },
      "71": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 51
        }
      },
      "72": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "73": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 68
        }
      },
      "74": {
        start: {
          line: 141,
          column: 21
        },
        end: {
          line: 141,
          column: 46
        }
      },
      "75": {
        start: {
          line: 143,
          column: 30
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "76": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 53
        }
      },
      "77": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 38
        }
      },
      "78": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 50
        }
      },
      "79": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 55
        }
      },
      "80": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 73
        }
      },
      "81": {
        start: {
          line: 157,
          column: 24
        },
        end: {
          line: 157,
          column: 28
        }
      },
      "82": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 186,
          column: 9
        }
      },
      "83": {
        start: {
          line: 158,
          column: 27
        },
        end: {
          line: 158,
          column: 28
        }
      },
      "84": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 185,
          column: 13
        }
      },
      "85": {
        start: {
          line: 161,
          column: 31
        },
        end: {
          line: 161,
          column: 90
        }
      },
      "86": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 163,
          column: 46
        }
      },
      "87": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 164,
          column: 58
        }
      },
      "88": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 96
        }
      },
      "89": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 166,
          column: 52
        }
      },
      "90": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 167,
          column: 72
        }
      },
      "91": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 168,
          column: 156
        }
      },
      "92": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 169,
          column: 37
        }
      },
      "93": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 172,
          column: 86
        }
      },
      "94": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 173,
          column: 51
        }
      },
      "95": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 175,
          column: 56
        }
      },
      "96": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 176,
          column: 52
        }
      },
      "97": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 177,
          column: 66
        }
      },
      "98": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 178,
          column: 150
        }
      },
      "99": {
        start: {
          line: 180,
          column: 16
        },
        end: {
          line: 184,
          column: 17
        }
      },
      "100": {
        start: {
          line: 181,
          column: 20
        },
        end: {
          line: 181,
          column: 109
        }
      },
      "101": {
        start: {
          line: 182,
          column: 20
        },
        end: {
          line: 182,
          column: 66
        }
      },
      "102": {
        start: {
          line: 183,
          column: 20
        },
        end: {
          line: 183,
          column: 63
        }
      },
      "103": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 188,
          column: 41
        }
      },
      "104": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 189,
          column: 54
        }
      },
      "105": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "106": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 28
        }
      },
      "107": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 70
        }
      },
      "108": {
        start: {
          line: 203,
          column: 30
        },
        end: {
          line: 203,
          column: 59
        }
      },
      "109": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "110": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 72
        }
      },
      "111": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 19
        }
      },
      "112": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "113": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 68
        }
      },
      "114": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 19
        }
      },
      "115": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "116": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 69
        }
      },
      "117": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 19
        }
      },
      "118": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 51
        }
      },
      "119": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 50
        }
      },
      "120": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 57
        }
      },
      "121": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 240,
          column: 9
        }
      },
      "122": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 222,
          column: 13
        }
      },
      "123": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 221,
          column: 65
        }
      },
      "124": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 59
        }
      },
      "125": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 54
        }
      },
      "126": {
        start: {
          line: 226,
          column: 12
        },
        end: {
          line: 226,
          column: 45
        }
      },
      "127": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 53
        }
      },
      "128": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 72
        }
      },
      "129": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 73
        }
      },
      "130": {
        start: {
          line: 232,
          column: 32
        },
        end: {
          line: 232,
          column: 89
        }
      },
      "131": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 52
        }
      },
      "132": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 50
        }
      },
      "133": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 64
        }
      },
      "134": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 92
        }
      },
      "135": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 59
        }
      },
      "136": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 45
        }
      },
      "137": {
        start: {
          line: 248,
          column: 30
        },
        end: {
          line: 248,
          column: 59
        }
      },
      "138": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "139": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 75
        }
      },
      "140": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 59
        }
      },
      "141": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 43
        }
      },
      "142": {
        start: {
          line: 254,
          column: 26
        },
        end: {
          line: 254,
          column: 96
        }
      },
      "143": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 255,
          column: 58
        }
      },
      "144": {
        start: {
          line: 263,
          column: 30
        },
        end: {
          line: 263,
          column: 59
        }
      },
      "145": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 264,
          column: 90
        }
      },
      "146": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 272,
          column: 45
        }
      },
      "147": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 279,
          column: 37
        }
      },
      "148": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 286,
          column: 37
        }
      },
      "149": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 294,
          column: 92
        }
      },
      "150": {
        start: {
          line: 294,
          column: 68
        },
        end: {
          line: 294,
          column: 90
        }
      },
      "151": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 301,
          column: 66
        }
      },
      "152": {
        start: {
          line: 309,
          column: 23
        },
        end: {
          line: 309,
          column: 52
        }
      },
      "153": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 310,
          column: 62
        }
      },
      "154": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 317,
          column: 35
        }
      },
      "155": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 318,
          column: 60
        }
      },
      "156": {
        start: {
          line: 319,
          column: 29
        },
        end: {
          line: 321,
          column: 11
        }
      },
      "157": {
        start: {
          line: 319,
          column: 82
        },
        end: {
          line: 321,
          column: 10
        }
      },
      "158": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 86
        }
      },
      "159": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 322,
          column: 40
        }
      },
      "160": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 323,
          column: 29
        }
      },
      "161": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 324,
          column: 36
        }
      },
      "162": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 325,
          column: 59
        }
      },
      "163": {
        start: {
          line: 332,
          column: 24
        },
        end: {
          line: 332,
          column: 57
        }
      },
      "164": {
        start: {
          line: 333,
          column: 20
        },
        end: {
          line: 333,
          column: 30
        }
      },
      "165": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 346,
          column: 10
        }
      },
      "166": {
        start: {
          line: 341,
          column: 16
        },
        end: {
          line: 343,
          column: 17
        }
      },
      "167": {
        start: {
          line: 342,
          column: 20
        },
        end: {
          line: 342,
          column: 89
        }
      },
      "168": {
        start: {
          line: 344,
          column: 16
        },
        end: {
          line: 344,
          column: 27
        }
      },
      "169": {
        start: {
          line: 353,
          column: 19
        },
        end: {
          line: 353,
          column: 40
        }
      },
      "170": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 360,
          column: 9
        }
      },
      "171": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 19
        }
      },
      "172": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 359,
          column: 13
        }
      },
      "173": {
        start: {
          line: 358,
          column: 16
        },
        end: {
          line: 358,
          column: 69
        }
      },
      "174": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 361,
          column: 20
        }
      },
      "175": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 375,
          column: 11
        }
      },
      "176": {
        start: {
          line: 370,
          column: 27
        },
        end: {
          line: 370,
          column: 45
        }
      },
      "177": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 373,
          column: 15
        }
      },
      "178": {
        start: {
          line: 372,
          column: 16
        },
        end: {
          line: 372,
          column: 50
        }
      },
      "179": {
        start: {
          line: 372,
          column: 35
        },
        end: {
          line: 372,
          column: 48
        }
      },
      "180": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 374,
          column: 53
        }
      },
      "181": {
        start: {
          line: 374,
          column: 37
        },
        end: {
          line: 374,
          column: 51
        }
      },
      "182": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 397,
          column: 9
        }
      },
      "183": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 387,
          column: 13
        }
      },
      "184": {
        start: {
          line: 386,
          column: 16
        },
        end: {
          line: 386,
          column: 29
        }
      },
      "185": {
        start: {
          line: 389,
          column: 28
        },
        end: {
          line: 389,
          column: 57
        }
      },
      "186": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 392,
          column: 13
        }
      },
      "187": {
        start: {
          line: 391,
          column: 16
        },
        end: {
          line: 391,
          column: 29
        }
      },
      "188": {
        start: {
          line: 393,
          column: 12
        },
        end: {
          line: 393,
          column: 24
        }
      },
      "189": {
        start: {
          line: 396,
          column: 12
        },
        end: {
          line: 396,
          column: 25
        }
      },
      "190": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 420,
          column: 11
        }
      },
      "191": {
        start: {
          line: 408,
          column: 28
        },
        end: {
          line: 410,
          column: 42
        }
      },
      "192": {
        start: {
          line: 409,
          column: 16
        },
        end: {
          line: 409,
          column: 100
        }
      },
      "193": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 419,
          column: 15
        }
      },
      "194": {
        start: {
          line: 413,
          column: 16
        },
        end: {
          line: 413,
          column: 38
        }
      },
      "195": {
        start: {
          line: 414,
          column: 16
        },
        end: {
          line: 414,
          column: 32
        }
      },
      "196": {
        start: {
          line: 417,
          column: 16
        },
        end: {
          line: 417,
          column: 38
        }
      },
      "197": {
        start: {
          line: 418,
          column: 16
        },
        end: {
          line: 418,
          column: 30
        }
      },
      "198": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 441,
          column: 11
        }
      },
      "199": {
        start: {
          line: 429,
          column: 28
        },
        end: {
          line: 431,
          column: 43
        }
      },
      "200": {
        start: {
          line: 430,
          column: 16
        },
        end: {
          line: 430,
          column: 102
        }
      },
      "201": {
        start: {
          line: 432,
          column: 12
        },
        end: {
          line: 440,
          column: 15
        }
      },
      "202": {
        start: {
          line: 434,
          column: 16
        },
        end: {
          line: 434,
          column: 38
        }
      },
      "203": {
        start: {
          line: 435,
          column: 16
        },
        end: {
          line: 435,
          column: 26
        }
      },
      "204": {
        start: {
          line: 438,
          column: 16
        },
        end: {
          line: 438,
          column: 38
        }
      },
      "205": {
        start: {
          line: 439,
          column: 16
        },
        end: {
          line: 439,
          column: 30
        }
      },
      "206": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 449,
          column: 65
        }
      },
      "207": {
        start: {
          line: 449,
          column: 40
        },
        end: {
          line: 449,
          column: 63
        }
      },
      "208": {
        start: {
          line: 458,
          column: 8
        },
        end: {
          line: 459,
          column: 19
        }
      },
      "209": {
        start: {
          line: 459,
          column: 12
        },
        end: {
          line: 459,
          column: 19
        }
      },
      "210": {
        start: {
          line: 460,
          column: 21
        },
        end: {
          line: 460,
          column: 36
        }
      },
      "211": {
        start: {
          line: 462,
          column: 8
        },
        end: {
          line: 475,
          column: 9
        }
      },
      "212": {
        start: {
          line: 464,
          column: 16
        },
        end: {
          line: 464,
          column: 60
        }
      },
      "213": {
        start: {
          line: 465,
          column: 16
        },
        end: {
          line: 465,
          column: 22
        }
      },
      "214": {
        start: {
          line: 468,
          column: 16
        },
        end: {
          line: 468,
          column: 48
        }
      },
      "215": {
        start: {
          line: 469,
          column: 16
        },
        end: {
          line: 469,
          column: 22
        }
      },
      "216": {
        start: {
          line: 471,
          column: 16
        },
        end: {
          line: 471,
          column: 49
        }
      },
      "217": {
        start: {
          line: 472,
          column: 16
        },
        end: {
          line: 472,
          column: 22
        }
      },
      "218": {
        start: {
          line: 474,
          column: 16
        },
        end: {
          line: 474,
          column: 48
        }
      },
      "219": {
        start: {
          line: 477,
          column: 8
        },
        end: {
          line: 477,
          column: 61
        }
      },
      "220": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 484,
          column: 57
        }
      },
      "221": {
        start: {
          line: 486,
          column: 29
        },
        end: {
          line: 486,
          column: 70
        }
      },
      "222": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 494,
          column: 9
        }
      },
      "223": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 493,
          column: 13
        }
      },
      "224": {
        start: {
          line: 489,
          column: 16
        },
        end: {
          line: 489,
          column: 58
        }
      },
      "225": {
        start: {
          line: 492,
          column: 16
        },
        end: {
          line: 492,
          column: 114
        }
      },
      "226": {
        start: {
          line: 500,
          column: 8
        },
        end: {
          line: 507,
          column: 10
        }
      },
      "227": {
        start: {
          line: 513,
          column: 8
        },
        end: {
          line: 526,
          column: 9
        }
      },
      "228": {
        start: {
          line: 515,
          column: 16
        },
        end: {
          line: 515,
          column: 34
        }
      },
      "229": {
        start: {
          line: 517,
          column: 16
        },
        end: {
          line: 517,
          column: 33
        }
      },
      "230": {
        start: {
          line: 519,
          column: 16
        },
        end: {
          line: 519,
          column: 34
        }
      },
      "231": {
        start: {
          line: 521,
          column: 16
        },
        end: {
          line: 521,
          column: 33
        }
      },
      "232": {
        start: {
          line: 523,
          column: 16
        },
        end: {
          line: 523,
          column: 31
        }
      },
      "233": {
        start: {
          line: 525,
          column: 16
        },
        end: {
          line: 525,
          column: 33
        }
      },
      "234": {
        start: {
          line: 532,
          column: 8
        },
        end: {
          line: 532,
          column: 67
        }
      },
      "235": {
        start: {
          line: 533,
          column: 8
        },
        end: {
          line: 533,
          column: 36
        }
      },
      "236": {
        start: {
          line: 543,
          column: 8
        },
        end: {
          line: 567,
          column: 9
        }
      },
      "237": {
        start: {
          line: 544,
          column: 28
        },
        end: {
          line: 544,
          column: 60
        }
      },
      "238": {
        start: {
          line: 545,
          column: 12
        },
        end: {
          line: 557,
          column: 15
        }
      },
      "239": {
        start: {
          line: 546,
          column: 16
        },
        end: {
          line: 556,
          column: 19
        }
      },
      "240": {
        start: {
          line: 547,
          column: 20
        },
        end: {
          line: 547,
          column: 96
        }
      },
      "241": {
        start: {
          line: 548,
          column: 20
        },
        end: {
          line: 555,
          column: 21
        }
      },
      "242": {
        start: {
          line: 549,
          column: 24
        },
        end: {
          line: 549,
          column: 52
        }
      },
      "243": {
        start: {
          line: 550,
          column: 24
        },
        end: {
          line: 550,
          column: 40
        }
      },
      "244": {
        start: {
          line: 553,
          column: 24
        },
        end: {
          line: 553,
          column: 97
        }
      },
      "245": {
        start: {
          line: 554,
          column: 24
        },
        end: {
          line: 554,
          column: 40
        }
      },
      "246": {
        start: {
          line: 559,
          column: 12
        },
        end: {
          line: 562,
          column: 15
        }
      },
      "247": {
        start: {
          line: 560,
          column: 16
        },
        end: {
          line: 560,
          column: 85
        }
      },
      "248": {
        start: {
          line: 561,
          column: 16
        },
        end: {
          line: 561,
          column: 69
        }
      },
      "249": {
        start: {
          line: 561,
          column: 52
        },
        end: {
          line: 561,
          column: 67
        }
      },
      "250": {
        start: {
          line: 563,
          column: 12
        },
        end: {
          line: 566,
          column: 15
        }
      },
      "251": {
        start: {
          line: 564,
          column: 16
        },
        end: {
          line: 564,
          column: 79
        }
      },
      "252": {
        start: {
          line: 565,
          column: 16
        },
        end: {
          line: 565,
          column: 69
        }
      },
      "253": {
        start: {
          line: 565,
          column: 52
        },
        end: {
          line: 565,
          column: 67
        }
      },
      "254": {
        start: {
          line: 570,
          column: 0
        },
        end: {
          line: 570,
          column: 52
        }
      },
      "255": {
        start: {
          line: 575,
          column: 4
        },
        end: {
          line: 575,
          column: 67
        }
      },
      "256": {
        start: {
          line: 582,
          column: 4
        },
        end: {
          line: 586,
          column: 43
        }
      },
      "257": {
        start: {
          line: 592,
          column: 0
        },
        end: {
          line: 617,
          column: 2
        }
      },
      "258": {
        start: {
          line: 594,
          column: 8
        },
        end: {
          line: 594,
          column: 89
        }
      },
      "259": {
        start: {
          line: 597,
          column: 8
        },
        end: {
          line: 597,
          column: 89
        }
      },
      "260": {
        start: {
          line: 600,
          column: 8
        },
        end: {
          line: 600,
          column: 89
        }
      },
      "261": {
        start: {
          line: 603,
          column: 8
        },
        end: {
          line: 603,
          column: 89
        }
      },
      "262": {
        start: {
          line: 606,
          column: 8
        },
        end: {
          line: 606,
          column: 89
        }
      },
      "263": {
        start: {
          line: 609,
          column: 8
        },
        end: {
          line: 609,
          column: 89
        }
      },
      "264": {
        start: {
          line: 612,
          column: 8
        },
        end: {
          line: 612,
          column: 89
        }
      },
      "265": {
        start: {
          line: 615,
          column: 8
        },
        end: {
          line: 615,
          column: 89
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 61,
            column: 1
          },
          end: {
            line: 61,
            column: 2
          }
        },
        loc: {
          start: {
            line: 61,
            column: 24
          },
          end: {
            line: 67,
            column: 1
          }
        },
        line: 61
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 49
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 85
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        loc: {
          start: {
            line: 98,
            column: 51
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 98
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 107,
            column: 5
          }
        },
        loc: {
          start: {
            line: 107,
            column: 48
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 107
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 117,
            column: 5
          }
        },
        loc: {
          start: {
            line: 117,
            column: 56
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 117
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        loc: {
          start: {
            line: 202,
            column: 34
          },
          end: {
            line: 241,
            column: 5
          }
        },
        line: 202
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 247,
            column: 4
          },
          end: {
            line: 247,
            column: 5
          }
        },
        loc: {
          start: {
            line: 247,
            column: 37
          },
          end: {
            line: 256,
            column: 5
          }
        },
        line: 247
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 262,
            column: 4
          },
          end: {
            line: 262,
            column: 5
          }
        },
        loc: {
          start: {
            line: 262,
            column: 31
          },
          end: {
            line: 265,
            column: 5
          }
        },
        line: 262
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 271,
            column: 4
          },
          end: {
            line: 271,
            column: 5
          }
        },
        loc: {
          start: {
            line: 271,
            column: 27
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 271
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 278,
            column: 5
          }
        },
        loc: {
          start: {
            line: 278,
            column: 20
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 278
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 285,
            column: 4
          },
          end: {
            line: 285,
            column: 5
          }
        },
        loc: {
          start: {
            line: 285,
            column: 27
          },
          end: {
            line: 287,
            column: 5
          }
        },
        line: 285
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 293,
            column: 4
          },
          end: {
            line: 293,
            column: 5
          }
        },
        loc: {
          start: {
            line: 293,
            column: 29
          },
          end: {
            line: 295,
            column: 5
          }
        },
        line: 293
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 294,
            column: 56
          },
          end: {
            line: 294,
            column: 57
          }
        },
        loc: {
          start: {
            line: 294,
            column: 68
          },
          end: {
            line: 294,
            column: 90
          }
        },
        line: 294
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 300,
            column: 4
          },
          end: {
            line: 300,
            column: 5
          }
        },
        loc: {
          start: {
            line: 300,
            column: 29
          },
          end: {
            line: 302,
            column: 5
          }
        },
        line: 300
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 308,
            column: 4
          },
          end: {
            line: 308,
            column: 5
          }
        },
        loc: {
          start: {
            line: 308,
            column: 33
          },
          end: {
            line: 311,
            column: 5
          }
        },
        line: 308
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 316,
            column: 4
          },
          end: {
            line: 316,
            column: 5
          }
        },
        loc: {
          start: {
            line: 316,
            column: 27
          },
          end: {
            line: 326,
            column: 5
          }
        },
        line: 316
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 319,
            column: 65
          },
          end: {
            line: 319,
            column: 66
          }
        },
        loc: {
          start: {
            line: 319,
            column: 82
          },
          end: {
            line: 321,
            column: 10
          }
        },
        line: 319
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 319,
            column: 117
          },
          end: {
            line: 319,
            column: 118
          }
        },
        loc: {
          start: {
            line: 319,
            column: 128
          },
          end: {
            line: 321,
            column: 9
          }
        },
        line: 319
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 331,
            column: 4
          },
          end: {
            line: 331,
            column: 5
          }
        },
        loc: {
          start: {
            line: 331,
            column: 20
          },
          end: {
            line: 347,
            column: 5
          }
        },
        line: 331
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 340,
            column: 35
          },
          end: {
            line: 340,
            column: 36
          }
        },
        loc: {
          start: {
            line: 340,
            column: 52
          },
          end: {
            line: 345,
            column: 13
          }
        },
        line: 340
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 352,
            column: 4
          },
          end: {
            line: 352,
            column: 5
          }
        },
        loc: {
          start: {
            line: 352,
            column: 25
          },
          end: {
            line: 362,
            column: 5
          }
        },
        line: 352
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 368,
            column: 4
          },
          end: {
            line: 368,
            column: 5
          }
        },
        loc: {
          start: {
            line: 368,
            column: 32
          },
          end: {
            line: 376,
            column: 5
          }
        },
        line: 368
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 369,
            column: 27
          },
          end: {
            line: 369,
            column: 28
          }
        },
        loc: {
          start: {
            line: 369,
            column: 40
          },
          end: {
            line: 375,
            column: 9
          }
        },
        line: 369
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 371,
            column: 32
          },
          end: {
            line: 371,
            column: 33
          }
        },
        loc: {
          start: {
            line: 371,
            column: 38
          },
          end: {
            line: 373,
            column: 13
          }
        },
        line: 371
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 372,
            column: 29
          },
          end: {
            line: 372,
            column: 30
          }
        },
        loc: {
          start: {
            line: 372,
            column: 35
          },
          end: {
            line: 372,
            column: 48
          }
        },
        line: 372
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 374,
            column: 31
          },
          end: {
            line: 374,
            column: 32
          }
        },
        loc: {
          start: {
            line: 374,
            column: 37
          },
          end: {
            line: 374,
            column: 51
          }
        },
        line: 374
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 382,
            column: 4
          },
          end: {
            line: 382,
            column: 5
          }
        },
        loc: {
          start: {
            line: 382,
            column: 43
          },
          end: {
            line: 398,
            column: 5
          }
        },
        line: 382
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 406,
            column: 4
          },
          end: {
            line: 406,
            column: 5
          }
        },
        loc: {
          start: {
            line: 406,
            column: 59
          },
          end: {
            line: 421,
            column: 5
          }
        },
        line: 406
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 407,
            column: 27
          },
          end: {
            line: 407,
            column: 28
          }
        },
        loc: {
          start: {
            line: 407,
            column: 48
          },
          end: {
            line: 420,
            column: 9
          }
        },
        line: 407
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 408,
            column: 39
          },
          end: {
            line: 408,
            column: 40
          }
        },
        loc: {
          start: {
            line: 408,
            column: 45
          },
          end: {
            line: 410,
            column: 13
          }
        },
        line: 408
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 412,
            column: 22
          },
          end: {
            line: 412,
            column: 23
          }
        },
        loc: {
          start: {
            line: 412,
            column: 34
          },
          end: {
            line: 415,
            column: 13
          }
        },
        line: 412
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 416,
            column: 23
          },
          end: {
            line: 416,
            column: 24
          }
        },
        loc: {
          start: {
            line: 416,
            column: 34
          },
          end: {
            line: 419,
            column: 13
          }
        },
        line: 416
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 427,
            column: 4
          },
          end: {
            line: 427,
            column: 5
          }
        },
        loc: {
          start: {
            line: 427,
            column: 34
          },
          end: {
            line: 442,
            column: 5
          }
        },
        line: 427
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 428,
            column: 27
          },
          end: {
            line: 428,
            column: 28
          }
        },
        loc: {
          start: {
            line: 428,
            column: 48
          },
          end: {
            line: 441,
            column: 9
          }
        },
        line: 428
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 429,
            column: 39
          },
          end: {
            line: 429,
            column: 40
          }
        },
        loc: {
          start: {
            line: 429,
            column: 45
          },
          end: {
            line: 431,
            column: 13
          }
        },
        line: 429
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 433,
            column: 22
          },
          end: {
            line: 433,
            column: 23
          }
        },
        loc: {
          start: {
            line: 433,
            column: 28
          },
          end: {
            line: 436,
            column: 13
          }
        },
        line: 433
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 437,
            column: 23
          },
          end: {
            line: 437,
            column: 24
          }
        },
        loc: {
          start: {
            line: 437,
            column: 34
          },
          end: {
            line: 440,
            column: 13
          }
        },
        line: 437
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 448,
            column: 4
          },
          end: {
            line: 448,
            column: 5
          }
        },
        loc: {
          start: {
            line: 448,
            column: 14
          },
          end: {
            line: 450,
            column: 5
          }
        },
        line: 448
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 449,
            column: 27
          },
          end: {
            line: 449,
            column: 28
          }
        },
        loc: {
          start: {
            line: 449,
            column: 40
          },
          end: {
            line: 449,
            column: 63
          }
        },
        line: 449
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 457,
            column: 4
          },
          end: {
            line: 457,
            column: 5
          }
        },
        loc: {
          start: {
            line: 457,
            column: 46
          },
          end: {
            line: 478,
            column: 5
          }
        },
        line: 457
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 483,
            column: 4
          },
          end: {
            line: 483,
            column: 5
          }
        },
        loc: {
          start: {
            line: 483,
            column: 35
          },
          end: {
            line: 495,
            column: 5
          }
        },
        line: 483
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 499,
            column: 4
          },
          end: {
            line: 499,
            column: 5
          }
        },
        loc: {
          start: {
            line: 499,
            column: 46
          },
          end: {
            line: 508,
            column: 5
          }
        },
        line: 499
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 512,
            column: 4
          },
          end: {
            line: 512,
            column: 5
          }
        },
        loc: {
          start: {
            line: 512,
            column: 30
          },
          end: {
            line: 527,
            column: 5
          }
        },
        line: 512
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 531,
            column: 4
          },
          end: {
            line: 531,
            column: 5
          }
        },
        loc: {
          start: {
            line: 531,
            column: 20
          },
          end: {
            line: 534,
            column: 5
          }
        },
        line: 531
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 539,
            column: 4
          },
          end: {
            line: 539,
            column: 5
          }
        },
        loc: {
          start: {
            line: 539,
            column: 28
          },
          end: {
            line: 568,
            column: 5
          }
        },
        line: 539
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 545,
            column: 28
          },
          end: {
            line: 545,
            column: 29
          }
        },
        loc: {
          start: {
            line: 545,
            column: 40
          },
          end: {
            line: 557,
            column: 13
          }
        },
        line: 545
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 546,
            column: 35
          },
          end: {
            line: 546,
            column: 36
          }
        },
        loc: {
          start: {
            line: 546,
            column: 47
          },
          end: {
            line: 556,
            column: 17
          }
        },
        line: 546
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 559,
            column: 44
          },
          end: {
            line: 559,
            column: 45
          }
        },
        loc: {
          start: {
            line: 559,
            column: 55
          },
          end: {
            line: 562,
            column: 13
          }
        },
        line: 559
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 561,
            column: 46
          },
          end: {
            line: 561,
            column: 47
          }
        },
        loc: {
          start: {
            line: 561,
            column: 52
          },
          end: {
            line: 561,
            column: 67
          }
        },
        line: 561
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 563,
            column: 45
          },
          end: {
            line: 563,
            column: 46
          }
        },
        loc: {
          start: {
            line: 563,
            column: 57
          },
          end: {
            line: 566,
            column: 13
          }
        },
        line: 563
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 565,
            column: 46
          },
          end: {
            line: 565,
            column: 47
          }
        },
        loc: {
          start: {
            line: 565,
            column: 52
          },
          end: {
            line: 565,
            column: 67
          }
        },
        line: 565
      },
      "60": {
        name: "createWebsiteServerManager",
        decl: {
          start: {
            line: 574,
            column: 9
          },
          end: {
            line: 574,
            column: 35
          }
        },
        loc: {
          start: {
            line: 574,
            column: 69
          },
          end: {
            line: 576,
            column: 1
          }
        },
        line: 574
      },
      "61": {
        name: "isWebsiteServerManager",
        decl: {
          start: {
            line: 581,
            column: 9
          },
          end: {
            line: 581,
            column: 31
          }
        },
        loc: {
          start: {
            line: 581,
            column: 37
          },
          end: {
            line: 587,
            column: 1
          }
        },
        line: 581
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 593,
            column: 17
          },
          end: {
            line: 593,
            column: 18
          }
        },
        loc: {
          start: {
            line: 593,
            column: 23
          },
          end: {
            line: 595,
            column: 5
          }
        },
        line: 593
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 596,
            column: 16
          },
          end: {
            line: 596,
            column: 17
          }
        },
        loc: {
          start: {
            line: 596,
            column: 22
          },
          end: {
            line: 598,
            column: 5
          }
        },
        line: 596
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 599,
            column: 19
          },
          end: {
            line: 599,
            column: 20
          }
        },
        loc: {
          start: {
            line: 599,
            column: 25
          },
          end: {
            line: 601,
            column: 5
          }
        },
        line: 599
      },
      "65": {
        name: "(anonymous_65)",
        decl: {
          start: {
            line: 602,
            column: 15
          },
          end: {
            line: 602,
            column: 16
          }
        },
        loc: {
          start: {
            line: 602,
            column: 21
          },
          end: {
            line: 604,
            column: 5
          }
        },
        line: 602
      },
      "66": {
        name: "(anonymous_66)",
        decl: {
          start: {
            line: 605,
            column: 20
          },
          end: {
            line: 605,
            column: 21
          }
        },
        loc: {
          start: {
            line: 605,
            column: 26
          },
          end: {
            line: 607,
            column: 5
          }
        },
        line: 605
      },
      "67": {
        name: "(anonymous_67)",
        decl: {
          start: {
            line: 608,
            column: 13
          },
          end: {
            line: 608,
            column: 14
          }
        },
        loc: {
          start: {
            line: 608,
            column: 19
          },
          end: {
            line: 610,
            column: 5
          }
        },
        line: 608
      },
      "68": {
        name: "(anonymous_68)",
        decl: {
          start: {
            line: 611,
            column: 8
          },
          end: {
            line: 611,
            column: 9
          }
        },
        loc: {
          start: {
            line: 611,
            column: 14
          },
          end: {
            line: 613,
            column: 5
          }
        },
        line: 611
      },
      "69": {
        name: "(anonymous_69)",
        decl: {
          start: {
            line: 614,
            column: 10
          },
          end: {
            line: 614,
            column: 11
          }
        },
        loc: {
          start: {
            line: 614,
            column: 16
          },
          end: {
            line: 616,
            column: 5
          }
        },
        line: 614
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 67,
            column: 3
          },
          end: {
            line: 67,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 67,
            column: 3
          },
          end: {
            line: 67,
            column: 14
          }
        }, {
          start: {
            line: 67,
            column: 19
          },
          end: {
            line: 67,
            column: 57
          }
        }],
        line: 67
      },
      "18": {
        loc: {
          start: {
            line: 85,
            column: 36
          },
          end: {
            line: 85,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 85,
            column: 45
          },
          end: {
            line: 85,
            column: 47
          }
        }],
        line: 85
      },
      "19": {
        loc: {
          start: {
            line: 98,
            column: 38
          },
          end: {
            line: 98,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 98,
            column: 47
          },
          end: {
            line: 98,
            column: 49
          }
        }],
        line: 98
      },
      "20": {
        loc: {
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 8
          },
          end: {
            line: 120,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "21": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "22": {
        loc: {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 127,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 127,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "23": {
        loc: {
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 130,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 130,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "24": {
        loc: {
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "25": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "26": {
        loc: {
          start: {
            line: 165,
            column: 42
          },
          end: {
            line: 165,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 42
          },
          end: {
            line: 165,
            column: 58
          }
        }, {
          start: {
            line: 165,
            column: 62
          },
          end: {
            line: 165,
            column: 95
          }
        }],
        line: 165
      },
      "27": {
        loc: {
          start: {
            line: 168,
            column: 98
          },
          end: {
            line: 168,
            column: 144
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 168,
            column: 112
          },
          end: {
            line: 168,
            column: 139
          }
        }, {
          start: {
            line: 168,
            column: 142
          },
          end: {
            line: 168,
            column: 144
          }
        }],
        line: 168
      },
      "28": {
        loc: {
          start: {
            line: 172,
            column: 28
          },
          end: {
            line: 172,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 172,
            column: 53
          },
          end: {
            line: 172,
            column: 58
          }
        }, {
          start: {
            line: 172,
            column: 61
          },
          end: {
            line: 172,
            column: 85
          }
        }],
        line: 172
      },
      "29": {
        loc: {
          start: {
            line: 180,
            column: 16
          },
          end: {
            line: 184,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 16
          },
          end: {
            line: 184,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "30": {
        loc: {
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        }, {
          start: {
            line: 193,
            column: 13
          },
          end: {
            line: 195,
            column: 9
          }
        }],
        line: 190
      },
      "31": {
        loc: {
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "32": {
        loc: {
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "33": {
        loc: {
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "34": {
        loc: {
          start: {
            line: 220,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "35": {
        loc: {
          start: {
            line: 232,
            column: 32
          },
          end: {
            line: 232,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 232,
            column: 57
          },
          end: {
            line: 232,
            column: 62
          }
        }, {
          start: {
            line: 232,
            column: 65
          },
          end: {
            line: 232,
            column: 89
          }
        }],
        line: 232
      },
      "36": {
        loc: {
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "37": {
        loc: {
          start: {
            line: 264,
            column: 15
          },
          end: {
            line: 264,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 264,
            column: 31
          },
          end: {
            line: 264,
            column: 77
          }
        }, {
          start: {
            line: 264,
            column: 80
          },
          end: {
            line: 264,
            column: 89
          }
        }],
        line: 264
      },
      "38": {
        loc: {
          start: {
            line: 310,
            column: 15
          },
          end: {
            line: 310,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 310,
            column: 15
          },
          end: {
            line: 310,
            column: 52
          }
        }, {
          start: {
            line: 310,
            column: 56
          },
          end: {
            line: 310,
            column: 61
          }
        }],
        line: 310
      },
      "39": {
        loc: {
          start: {
            line: 341,
            column: 16
          },
          end: {
            line: 343,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 341,
            column: 16
          },
          end: {
            line: 343,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 341
      },
      "40": {
        loc: {
          start: {
            line: 341,
            column: 20
          },
          end: {
            line: 341,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 341,
            column: 20
          },
          end: {
            line: 341,
            column: 36
          }
        }, {
          start: {
            line: 341,
            column: 40
          },
          end: {
            line: 341,
            column: 76
          }
        }],
        line: 341
      },
      "41": {
        loc: {
          start: {
            line: 354,
            column: 15
          },
          end: {
            line: 354,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 354,
            column: 15
          },
          end: {
            line: 354,
            column: 44
          }
        }, {
          start: {
            line: 354,
            column: 48
          },
          end: {
            line: 354,
            column: 83
          }
        }],
        line: 354
      },
      "42": {
        loc: {
          start: {
            line: 357,
            column: 12
          },
          end: {
            line: 359,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 12
          },
          end: {
            line: 359,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "43": {
        loc: {
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 387,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 387,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 385
      },
      "44": {
        loc: {
          start: {
            line: 390,
            column: 12
          },
          end: {
            line: 392,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 390,
            column: 12
          },
          end: {
            line: 392,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 390
      },
      "45": {
        loc: {
          start: {
            line: 457,
            column: 30
          },
          end: {
            line: 457,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 457,
            column: 38
          },
          end: {
            line: 457,
            column: 44
          }
        }],
        line: 457
      },
      "46": {
        loc: {
          start: {
            line: 458,
            column: 8
          },
          end: {
            line: 459,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 458,
            column: 8
          },
          end: {
            line: 459,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 458
      },
      "47": {
        loc: {
          start: {
            line: 462,
            column: 8
          },
          end: {
            line: 475,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 463,
            column: 12
          },
          end: {
            line: 465,
            column: 22
          }
        }, {
          start: {
            line: 466,
            column: 12
          },
          end: {
            line: 466,
            column: 24
          }
        }, {
          start: {
            line: 467,
            column: 12
          },
          end: {
            line: 469,
            column: 22
          }
        }, {
          start: {
            line: 470,
            column: 12
          },
          end: {
            line: 472,
            column: 22
          }
        }, {
          start: {
            line: 473,
            column: 12
          },
          end: {
            line: 474,
            column: 48
          }
        }],
        line: 462
      },
      "48": {
        loc: {
          start: {
            line: 513,
            column: 8
          },
          end: {
            line: 526,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 514,
            column: 12
          },
          end: {
            line: 515,
            column: 34
          }
        }, {
          start: {
            line: 516,
            column: 12
          },
          end: {
            line: 517,
            column: 33
          }
        }, {
          start: {
            line: 518,
            column: 12
          },
          end: {
            line: 519,
            column: 34
          }
        }, {
          start: {
            line: 520,
            column: 12
          },
          end: {
            line: 521,
            column: 33
          }
        }, {
          start: {
            line: 522,
            column: 12
          },
          end: {
            line: 523,
            column: 31
          }
        }, {
          start: {
            line: 524,
            column: 12
          },
          end: {
            line: 525,
            column: 33
          }
        }],
        line: 513
      },
      "49": {
        loc: {
          start: {
            line: 543,
            column: 8
          },
          end: {
            line: 567,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 543,
            column: 8
          },
          end: {
            line: 567,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 543
      },
      "50": {
        loc: {
          start: {
            line: 574,
            column: 56
          },
          end: {
            line: 574,
            column: 67
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 574,
            column: 65
          },
          end: {
            line: 574,
            column: 67
          }
        }],
        line: 574
      },
      "51": {
        loc: {
          start: {
            line: 582,
            column: 12
          },
          end: {
            line: 586,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 582,
            column: 12
          },
          end: {
            line: 582,
            column: 15
          }
        }, {
          start: {
            line: 583,
            column: 8
          },
          end: {
            line: 583,
            column: 45
          }
        }, {
          start: {
            line: 584,
            column: 8
          },
          end: {
            line: 584,
            column: 44
          }
        }, {
          start: {
            line: 585,
            column: 8
          },
          end: {
            line: 585,
            column: 47
          }
        }, {
          start: {
            line: 586,
            column: 8
          },
          end: {
            line: 586,
            column: 41
          }
        }],
        line: 582
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0],
      "19": [0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0],
      "46": [0, 0],
      "47": [0, 0, 0, 0, 0],
      "48": [0, 0, 0, 0, 0, 0],
      "49": [0, 0],
      "50": [0],
      "51": [0, 0, 0, 0, 0]
    },
    inputSourceMap: {
      file: "/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/server/website-server-manager.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/server/website-server-manager.ts"],
      sourcesContent: ["/**\n * @file DI-compatible Centralized Website Server Management\n *\n * Refactored version that implements IWebsiteServerManager interface and uses\n * dependency injection for better testability and maintainability.\n *\n * Features:\n * - Centralized server lifecycle management\n * - Port management and conflict resolution\n * - State tracking and persistence\n * - Graceful cleanup and shutdown\n * - Event-driven architecture with logging\n * - Error handling and recovery\n */\nimport * as path from 'path';\nimport * as net from 'net';\nimport { EventEmitter } from 'events';\nimport { WebsiteServer, startWebsiteServer as createWebsiteServer, stopWebsiteServer } from './per-website-server';\nimport { IWebsiteServerManager, ILogger, IFileSystem, WebsiteServerInfo } from '../core/interfaces';\n\n/**\n * Server state enumeration for tracking server lifecycle\n */\nexport enum ServerState {\n  STOPPED = 'stopped',\n  STARTING = 'starting',\n  RUNNING = 'running',\n  STOPPING = 'stopping',\n  ERROR = 'error',\n}\n\n/**\n * Server information interface for tracking managed servers\n */\nexport interface ManagedServer {\n  websiteName: string;\n  websitePath: string;\n  port: number;\n  actualUrl?: string;\n  state: ServerState;\n  server?: WebsiteServer;\n  startedAt?: Date;\n  lastError?: Error;\n  retryCount: number;\n}\n\n/**\n * Server manager events for observing server lifecycle\n */\nexport interface ServerManagerEvents {\n  'server-starting': (websiteName: string) => void;\n  'server-started': (websiteName: string, server: ManagedServer) => void;\n  'server-stopping': (websiteName: string) => void;\n  'server-stopped': (websiteName: string) => void;\n  'server-error': (websiteName: string, error: Error) => void;\n  'server-log': (websiteName: string, message: string, level: string) => void;\n  'port-allocated': (websiteName: string, port: number) => void;\n  'port-released': (websiteName: string, port: number) => void;\n}\n\n/**\n * Configuration options for the server manager\n */\nexport interface ServerManagerConfig {\n  /** Starting port for automatic port allocation */\n  startPort: number;\n  /** Maximum number of retry attempts for server start failures */\n  maxRetries: number;\n  /** Timeout in milliseconds for server startup */\n  startupTimeout: number;\n  /** Grace period in milliseconds for server shutdown */\n  shutdownTimeout: number;\n  /** Enable detailed logging */\n  enableLogging: boolean;\n}\n\n/**\n * Default configuration for the server manager\n */\nconst DEFAULT_CONFIG: ServerManagerConfig = {\n  startPort: 8081,\n  maxRetries: 3,\n  startupTimeout: 30000, // 30 seconds\n  shutdownTimeout: 10000, // 10 seconds\n  enableLogging: true,\n};\n\n/**\n * DI-compatible WebsiteServerManager class\n *\n * Provides comprehensive server management capabilities for website development servers\n * including lifecycle management, port allocation, state tracking, and cleanup.\n */\nexport class WebsiteServerManager extends EventEmitter implements IWebsiteServerManager {\n  private servers = new Map<string, ManagedServer>();\n  private allocatedPorts = new Set<number>();\n  private config: ServerManagerConfig;\n  private isShuttingDown = false;\n  private readonly logger: ILogger;\n\n  constructor(\n    logger: ILogger,\n    private readonly fileSystem: IFileSystem,\n    config: Partial<ServerManagerConfig> = {}\n  ) {\n    super();\n    this.logger = logger.child({ service: 'WebsiteServerManager' });\n    this.config = { ...DEFAULT_CONFIG, ...config };\n    this.setupGracefulShutdown();\n  }\n\n  /**\n   * Static factory method for DI container integration.\n   */\n  static create(\n    logger: ILogger,\n    fileSystem: IFileSystem,\n    config: Partial<ServerManagerConfig> = {}\n  ): WebsiteServerManager {\n    return new WebsiteServerManager(logger, fileSystem, config);\n  }\n\n  /**\n   * Start a website server for the specified website (DI interface compatibility).\n   * @param websiteName Unique identifier for the website to process\n   * @param websitePath File system path to the website directory\n   * @returns Promise resolving to the website server info\n   */\n  async startServer(websiteName: string, websitePath: string): Promise<WebsiteServerInfo> {\n    const managedServer = await this.startServerWithPath(websiteName, websitePath);\n    return this.convertToWebsiteServerInfo(managedServer);\n  }\n\n  /**\n   * Start a website server for the specified website with explicit path.\n   * @param websiteName Unique identifier for the website to process\n   * @param websitePath File system path to the website directory\n   * @returns Promise resolving to the managed server info\n   */\n  async startServerWithPath(websiteName: string, websitePath: string): Promise<ManagedServer> {\n    if (this.isShuttingDown) {\n      throw new Error('Server manager is shutting down');\n    }\n\n    // Check if server already exists\n    const existingServer = this.servers.get(websiteName);\n    if (existingServer) {\n      if (existingServer.state === ServerState.RUNNING) {\n        this.log(websiteName, `Server already running at ${existingServer.actualUrl}`, 'info');\n        return existingServer;\n      }\n\n      if (existingServer.state === ServerState.STARTING) {\n        throw new Error(`Server for ${websiteName} is already starting`);\n      }\n\n      // Stop existing server if in error state\n      if (existingServer.state === ServerState.ERROR) {\n        await this.stopServer(websiteName);\n      }\n    }\n\n    // Validate website path\n    if (!(await this.validateWebsitePath(websitePath))) {\n      throw new Error(`Invalid website path: ${websitePath}`);\n    }\n\n    // Allocate port\n    const port = await this.allocatePort();\n\n    // Create managed server entry\n    const managedServer: ManagedServer = {\n      websiteName,\n      websitePath,\n      port,\n      state: ServerState.STARTING,\n      retryCount: 0,\n      startedAt: new Date(),\n    };\n\n    this.servers.set(websiteName, managedServer);\n    this.allocatedPorts.add(port);\n\n    this.emit('server-starting', websiteName);\n    this.emit('port-allocated', websiteName, port);\n    this.log(websiteName, `Starting server on port ${port}`, 'info');\n\n    // Try to start the server with retries\n    let lastError: Error | null = null;\n\n    for (let attempt = 0; attempt <= this.config.maxRetries; attempt++) {\n      try {\n        // Start the actual server with timeout\n        const server = await this.startWithTimeout(websitePath, websiteName, port);\n\n        // Update managed server with success info\n        managedServer.server = server;\n        managedServer.state = ServerState.RUNNING;\n        managedServer.actualUrl = server.actualUrl || `http://localhost:${server.port}`;\n        managedServer.lastError = undefined;\n\n        this.emit('server-started', websiteName, managedServer);\n        this.log(\n          websiteName,\n          `Server started successfully at ${managedServer.actualUrl}${attempt > 0 ? ` after ${attempt} retries` : ''}`,\n          'info'\n        );\n\n        return managedServer;\n      } catch (error) {\n        lastError = error instanceof Error ? error : new Error(String(error));\n        managedServer.retryCount = attempt;\n\n        // Update state to error and emit error (but don't release port yet if retrying)\n        managedServer.state = ServerState.ERROR;\n        managedServer.lastError = lastError;\n\n        this.emit('server-error', websiteName, lastError);\n        this.log(\n          websiteName,\n          `Failed to start server (attempt ${attempt + 1}/${this.config.maxRetries + 1}): ${lastError.message}`,\n          'error'\n        );\n\n        // If we have more attempts left, retry with backoff\n        if (attempt < this.config.maxRetries) {\n          this.log(websiteName, `Retrying server start in ${Math.pow(2, attempt)}s...`, 'warning');\n          await this.delay(1000 * Math.pow(2, attempt));\n          managedServer.state = ServerState.STARTING;\n        }\n      }\n    }\n\n    // All attempts failed - clean up and throw\n    this.allocatedPorts.delete(port);\n    this.emit('port-released', websiteName, port);\n\n    if (lastError) {\n      throw lastError;\n    } else {\n      throw new Error('Server start failed for unknown reason');\n    }\n  }\n\n  /**\n   * Stop a website server.\n   * @param websiteName Unique identifier for the website server to stop\n   * @returns Promise that resolves when server is stopped\n   */\n  async stopServer(websiteName: string): Promise<void> {\n    const managedServer = this.servers.get(websiteName);\n    if (!managedServer) {\n      this.log(websiteName, 'No server found to stop', 'warning');\n      return;\n    }\n\n    if (managedServer.state === ServerState.STOPPED) {\n      this.log(websiteName, 'Server already stopped', 'info');\n      return;\n    }\n\n    if (managedServer.state === ServerState.STOPPING) {\n      this.log(websiteName, 'Server already stopping', 'info');\n      return;\n    }\n\n    managedServer.state = ServerState.STOPPING;\n    this.emit('server-stopping', websiteName);\n    this.log(websiteName, 'Stopping server', 'info');\n\n    try {\n      if (managedServer.server) {\n        await this.stopWithTimeout(managedServer.server);\n      }\n\n      // Clean up resources\n      this.allocatedPorts.delete(managedServer.port);\n      managedServer.state = ServerState.STOPPED;\n      managedServer.server = undefined;\n\n      this.emit('server-stopped', websiteName);\n      this.emit('port-released', websiteName, managedServer.port);\n      this.log(websiteName, 'Server stopped successfully', 'info');\n    } catch (error) {\n      const serverError = error instanceof Error ? error : new Error(String(error));\n      managedServer.state = ServerState.ERROR;\n      managedServer.lastError = serverError;\n\n      this.emit('server-error', websiteName, serverError);\n      this.log(websiteName, `Error stopping server: ${serverError.message}`, 'error');\n\n      // Still clean up resources even on error\n      this.allocatedPorts.delete(managedServer.port);\n      managedServer.server = undefined;\n    }\n  }\n\n  /**\n   * Restart a website server (DI interface compatibility).\n   * @param websiteName Unique identifier for the website server to restart\n   * @returns Promise resolving to the website server info\n   */\n  async restartServer(websiteName: string): Promise<WebsiteServerInfo> {\n    const managedServer = this.servers.get(websiteName);\n    if (!managedServer) {\n      throw new Error(`No server found for website: ${websiteName}`);\n    }\n\n    this.log(websiteName, 'Restarting server', 'info');\n\n    await this.stopServer(websiteName);\n    const restarted = await this.startServerWithPath(websiteName, managedServer.websitePath);\n    return this.convertToWebsiteServerInfo(restarted);\n  }\n\n  /**\n   * Get server information for a specific website (DI interface compatibility).\n   * @param websiteName Unique identifier for the website to query\n   * @returns Website server info or undefined if not found\n   */\n  getServerInfo(websiteName: string): WebsiteServerInfo | undefined {\n    const managedServer = this.servers.get(websiteName);\n    return managedServer ? this.convertToWebsiteServerInfo(managedServer) : undefined;\n  }\n\n  /**\n   * Get server information for a specific website (legacy method).\n   * @param websiteName Unique identifier for the website to query\n   * @returns Managed server info or undefined if not found\n   */\n  getServer(websiteName: string): ManagedServer | undefined {\n    return this.servers.get(websiteName);\n  }\n\n  /**\n   * Get all currently managed servers (DI interface compatibility).\n   * @returns ReadonlyMap of website names to managed server info\n   */\n  getAllServers(): ReadonlyMap<string, ManagedServer> {\n    return new Map(this.servers);\n  }\n\n  /**\n   * Get all currently managed servers (legacy method).\n   * @returns Map of website names to managed server info\n   */\n  getAllManagedServers(): ReadonlyMap<string, ManagedServer> {\n    return new Map(this.servers);\n  }\n\n  /**\n   * Filter and retrieve servers that match a specific operational state.\n   * @param state The specific server state to filter managed servers by\n   * @returns Array of managed servers in the specified state\n   */\n  getServersByState(state: ServerState): ManagedServer[] {\n    return Array.from(this.servers.values()).filter((server) => server.state === state);\n  }\n\n  /**\n   * Count the total number of servers currently in running state.\n   * @returns Number of currently running servers\n   */\n  getRunningServersCount(): number {\n    return this.getServersByState(ServerState.RUNNING).length;\n  }\n\n  /**\n   * Check if a server is running for a website.\n   * @param websiteName Unique identifier for the website to check status for\n   * @returns True if server is running, false otherwise\n   */\n  isServerRunning(websiteName: string): boolean {\n    const server = this.servers.get(websiteName);\n    return server?.state === ServerState.RUNNING || false;\n  }\n\n  /**\n   * Stop all servers and clean up resources.\n   * @returns Promise that resolves when all servers are stopped\n   */\n  async stopAllServers(): Promise<void> {\n    this.isShuttingDown = true;\n    this.log('manager', 'Stopping all servers', 'info');\n\n    const stopPromises = Array.from(this.servers.keys()).map((websiteName) =>\n      this.stopServer(websiteName).catch((error) => {\n        this.log(websiteName, `Error during shutdown: ${error.message}`, 'error');\n      })\n    );\n\n    await Promise.all(stopPromises);\n\n    this.servers.clear();\n    this.allocatedPorts.clear();\n    this.log('manager', 'All servers stopped', 'info');\n  }\n\n  /**\n   * Compile comprehensive operational metrics and performance statistics for all managed servers.\n   * @returns Comprehensive statistics object with server counts, ports, and uptime data\n   */\n  getStatistics(): {\n    totalServers: number;\n    runningServers: number;\n    stoppedServers: number;\n    errorServers: number;\n    allocatedPorts: number[];\n    uptime: { [websiteName: string]: number };\n  } {\n    const servers = Array.from(this.servers.values());\n    const now = new Date();\n\n    return {\n      totalServers: servers.length,\n      runningServers: this.getServersByState(ServerState.RUNNING).length,\n      stoppedServers: this.getServersByState(ServerState.STOPPED).length,\n      errorServers: this.getServersByState(ServerState.ERROR).length,\n      allocatedPorts: Array.from(this.allocatedPorts).sort(),\n      uptime: servers.reduce(\n        (acc, server) => {\n          if (server.startedAt && server.state === ServerState.RUNNING) {\n            acc[server.websiteName] = now.getTime() - server.startedAt.getTime();\n          }\n          return acc;\n        },\n        {} as { [websiteName: string]: number }\n      ),\n    };\n  }\n\n  /**\n   * Find an available port starting from the configured start port.\n   * @returns Promise resolving to an available port number\n   */\n  private async allocatePort(): Promise<number> {\n    let port = this.config.startPort;\n\n    while (this.allocatedPorts.has(port) || !(await this.isPortAvailable(port))) {\n      port++;\n      // Prevent infinite loop by limiting port range\n      if (port > this.config.startPort + 1000) {\n        throw new Error('No available ports found in range');\n      }\n    }\n\n    return port;\n  }\n\n  /**\n   * Check if a port is available for use.\n   * @param port Network port number to check for availability\n   * @returns Promise resolving to true if port is available\n   */\n  private async isPortAvailable(port: number): Promise<boolean> {\n    return new Promise((resolve) => {\n      const server = net.createServer();\n      server.listen(port, () => {\n        server.close(() => resolve(true));\n      });\n      server.on('error', () => resolve(false));\n    });\n  }\n\n  /**\n   * Validate that a website path exists and contains required files.\n   * @param websitePath Path to validate\n   * @returns Promise resolving to true if path is valid\n   */\n  private async validateWebsitePath(websitePath: string): Promise<boolean> {\n    try {\n      // Check if main directory exists\n      if (!(await this.fileSystem.exists(websitePath))) {\n        return false;\n      }\n\n      // Check if src directory exists (required for Anglesite websites)\n      const srcPath = path.join(websitePath, 'src');\n      if (!(await this.fileSystem.exists(srcPath))) {\n        return false;\n      }\n\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Start a website server with timeout.\n   * @param websitePath Path to the website directory\n   * @param websiteName Unique identifier for the website to start\n   * @param port Port to use for the server\n   * @returns Promise resolving to the website server\n   */\n  private async startWithTimeout(websitePath: string, websiteName: string, port: number): Promise<WebsiteServer> {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error(`Server startup timed out after ${this.config.startupTimeout}ms`));\n      }, this.config.startupTimeout);\n\n      createWebsiteServer(websitePath, websiteName, port)\n        .then((server) => {\n          clearTimeout(timeout);\n          resolve(server);\n        })\n        .catch((error) => {\n          clearTimeout(timeout);\n          reject(error);\n        });\n    });\n  }\n\n  /**\n   * Stop a website server with timeout.\n   * @param server WebsiteServer instance to gracefully shutdown\n   * @returns Promise that resolves when server is stopped\n   */\n  private async stopWithTimeout(server: WebsiteServer): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error(`Server shutdown timed out after ${this.config.shutdownTimeout}ms`));\n      }, this.config.shutdownTimeout);\n\n      stopWebsiteServer(server)\n        .then(() => {\n          clearTimeout(timeout);\n          resolve();\n        })\n        .catch((error) => {\n          clearTimeout(timeout);\n          reject(error);\n        });\n    });\n  }\n\n  /**\n   * Delay utility for retry logic.\n   * @param ms Milliseconds to delay\n   * @returns Promise that resolves after the delay\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Log messages with injected logger and emit events.\n   * @param websiteName Website name or 'manager' for manager logs\n   * @param message Log message content\n   * @param level Log level (info, warning, error)\n   */\n  private log(websiteName: string, message: string, level: string = 'info'): void {\n    if (!this.config.enableLogging) return;\n\n    const meta = { websiteName };\n\n    // Log with injected logger based on level\n    switch (level) {\n      case 'error':\n        this.logger.error(message, undefined, meta);\n        break;\n      case 'warn':\n      case 'warning':\n        this.logger.warn(message, meta);\n        break;\n      case 'debug':\n        this.logger.debug(message, meta);\n        break;\n      default:\n        this.logger.info(message, meta);\n    }\n\n    // Emit log event for external subscribers\n    this.emit('server-log', websiteName, message, level);\n  }\n\n  /**\n   * Clean up orphaned servers (DI interface compatibility).\n   * @returns Promise that resolves when cleanup is complete\n   */\n  async cleanupOrphanedServers(): Promise<void> {\n    this.logger.info('Cleaning up orphaned servers');\n    // For now, just stop servers in error state\n    const errorServers = this.getServersByState(ServerState.ERROR);\n    for (const server of errorServers) {\n      try {\n        await this.stopServer(server.websiteName);\n      } catch (error) {\n        this.logger.warn('Failed to cleanup orphaned server', { websiteName: server.websiteName, error });\n      }\n    }\n  }\n\n  /**\n   * Convert ManagedServer to WebsiteServerInfo for interface compatibility.\n   */\n  private convertToWebsiteServerInfo(managedServer: ManagedServer): WebsiteServerInfo {\n    return {\n      name: managedServer.websiteName,\n      port: managedServer.port,\n      status: this.convertServerState(managedServer.state),\n      url: managedServer.actualUrl,\n      error: managedServer.lastError?.message,\n      pid: undefined, // TODO: Add PID tracking to WebsiteServer interface\n    };\n  }\n\n  /**\n   * Convert ServerState to the interface-expected status.\n   */\n  private convertServerState(state: ServerState): 'starting' | 'running' | 'stopping' | 'stopped' | 'error' {\n    switch (state) {\n      case ServerState.STARTING:\n        return 'starting';\n      case ServerState.RUNNING:\n        return 'running';\n      case ServerState.STOPPING:\n        return 'stopping';\n      case ServerState.STOPPED:\n        return 'stopped';\n      case ServerState.ERROR:\n        return 'error';\n      default:\n        return 'stopped';\n    }\n  }\n\n  /**\n   * Dispose of the server manager service.\n   */\n  async dispose(): Promise<void> {\n    this.logger.info('Disposing WebsiteServerManager service');\n    await this.stopAllServers();\n  }\n\n  /**\n   * Set up graceful shutdown handlers.\n   * Note: Only set up process handlers for the singleton instance.\n   */\n  private setupGracefulShutdown(): void {\n    // Only set up process handlers if this is likely the singleton instance\n    // (to avoid memory leaks in tests)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (this === (globalThis as any).__anglesiteServerManager) {\n      const signals = ['SIGTERM', 'SIGINT', 'SIGQUIT'] as const;\n\n      signals.forEach((signal) => {\n        process.on(signal, async () => {\n          this.log('manager', `Received ${signal}, shutting down gracefully`, 'info');\n          try {\n            await this.stopAllServers();\n            process.exit(0);\n          } catch (error) {\n            this.log('manager', `Error during graceful shutdown: ${error}`, 'error');\n            process.exit(1);\n          }\n        });\n      });\n\n      // Handle uncaught exceptions\n      process.on('uncaughtException', (error) => {\n        this.log('manager', `Uncaught exception: ${error.message}`, 'error');\n        this.stopAllServers().finally(() => process.exit(1));\n      });\n\n      process.on('unhandledRejection', (reason) => {\n        this.log('manager', `Unhandled rejection: ${reason}`, 'error');\n        this.stopAllServers().finally(() => process.exit(1));\n      });\n    }\n  }\n}\n\n/**\n * Factory function for creating WebsiteServerManager with proper dependencies.\n */\nexport function createWebsiteServerManager(\n  logger: ILogger,\n  fileSystem: IFileSystem,\n  config: Partial<ServerManagerConfig> = {}\n): IWebsiteServerManager {\n  return WebsiteServerManager.create(logger, fileSystem, config);\n}\n\n/**\n * Type guard to check if an object is a website server manager.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isWebsiteServerManager(obj: any): obj is WebsiteServerManager {\n  return (\n    obj &&\n    typeof obj.startServer === 'function' &&\n    typeof obj.stopServer === 'function' &&\n    typeof obj.getAllServers === 'function' &&\n    typeof obj.dispose === 'function'\n  );\n}\n\n/**\n * @deprecated Legacy singleton export for backward compatibility during transition period\n * Use DI container instead\n */\nexport const websiteServerManager = {\n  startServer: (): never => {\n    throw new Error('websiteServerManager is deprecated. Use DI container instead.');\n  },\n  stopServer: (): never => {\n    throw new Error('websiteServerManager is deprecated. Use DI container instead.');\n  },\n  getAllServers: (): never => {\n    throw new Error('websiteServerManager is deprecated. Use DI container instead.');\n  },\n  getServer: (): never => {\n    throw new Error('websiteServerManager is deprecated. Use DI container instead.');\n  },\n  stopAllServers: (): never => {\n    throw new Error('websiteServerManager is deprecated. Use DI container instead.');\n  },\n  dispose: (): never => {\n    throw new Error('websiteServerManager is deprecated. Use DI container instead.');\n  },\n  on: (): never => {\n    throw new Error('websiteServerManager is deprecated. Use DI container instead.');\n  },\n  emit: (): never => {\n    throw new Error('websiteServerManager is deprecated. Use DI container instead.');\n  },\n};\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "96014fb07219076439e972765eba391f4609e5c6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1o17l5pc7l = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1o17l5pc7l();
var __createBinding =
/* istanbul ignore next */
(cov_1o17l5pc7l().s[0]++,
/* istanbul ignore next */
(cov_1o17l5pc7l().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1o17l5pc7l().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_1o17l5pc7l().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_1o17l5pc7l().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1o17l5pc7l().f[0]++;
  cov_1o17l5pc7l().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().b[2][0]++;
    cov_1o17l5pc7l().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1o17l5pc7l().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_1o17l5pc7l().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_1o17l5pc7l().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_1o17l5pc7l().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_1o17l5pc7l().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_1o17l5pc7l().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_1o17l5pc7l().b[5][1]++,
  /* istanbul ignore next */
  (cov_1o17l5pc7l().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_1o17l5pc7l().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().b[3][0]++;
    cov_1o17l5pc7l().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_1o17l5pc7l().f[1]++;
        cov_1o17l5pc7l().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_1o17l5pc7l().b[3][1]++;
  }
  cov_1o17l5pc7l().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_1o17l5pc7l().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1o17l5pc7l().f[2]++;
  cov_1o17l5pc7l().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().b[7][0]++;
    cov_1o17l5pc7l().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1o17l5pc7l().b[7][1]++;
  }
  cov_1o17l5pc7l().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_1o17l5pc7l().s[11]++,
/* istanbul ignore next */
(cov_1o17l5pc7l().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_1o17l5pc7l().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_1o17l5pc7l().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_1o17l5pc7l().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_1o17l5pc7l().f[3]++;
  cov_1o17l5pc7l().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_1o17l5pc7l().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_1o17l5pc7l().f[4]++;
  cov_1o17l5pc7l().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_1o17l5pc7l().s[14]++,
/* istanbul ignore next */
(cov_1o17l5pc7l().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_1o17l5pc7l().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_1o17l5pc7l().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_1o17l5pc7l().f[5]++;
  cov_1o17l5pc7l().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[6]++;
    cov_1o17l5pc7l().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_1o17l5pc7l().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_1o17l5pc7l().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_1o17l5pc7l().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_1o17l5pc7l().s[17]++, []);
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_1o17l5pc7l().b[12][0]++;
          cov_1o17l5pc7l().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_1o17l5pc7l().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_1o17l5pc7l().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[8]++;
    cov_1o17l5pc7l().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_1o17l5pc7l().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_1o17l5pc7l().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_1o17l5pc7l().b[13][0]++;
      cov_1o17l5pc7l().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_1o17l5pc7l().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_1o17l5pc7l().s[26]++, {});
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_1o17l5pc7l().b[15][0]++;
      cov_1o17l5pc7l().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_1o17l5pc7l().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_1o17l5pc7l().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_1o17l5pc7l().b[16][0]++;
          cov_1o17l5pc7l().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_1o17l5pc7l().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_1o17l5pc7l().b[15][1]++;
    }
    cov_1o17l5pc7l().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_1o17l5pc7l().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1o17l5pc7l().s[36]++;
exports.websiteServerManager = exports.WebsiteServerManager = exports.ServerState = void 0;
/* istanbul ignore next */
cov_1o17l5pc7l().s[37]++;
exports.createWebsiteServerManager = createWebsiteServerManager;
/* istanbul ignore next */
cov_1o17l5pc7l().s[38]++;
exports.isWebsiteServerManager = isWebsiteServerManager;
/**
 * @file DI-compatible Centralized Website Server Management
 *
 * Refactored version that implements IWebsiteServerManager interface and uses
 * dependency injection for better testability and maintainability.
 *
 * Features:
 * - Centralized server lifecycle management
 * - Port management and conflict resolution
 * - State tracking and persistence
 * - Graceful cleanup and shutdown
 * - Event-driven architecture with logging
 * - Error handling and recovery
 */
const path =
/* istanbul ignore next */
(cov_1o17l5pc7l().s[39]++, __importStar(require("path")));
const net =
/* istanbul ignore next */
(cov_1o17l5pc7l().s[40]++, __importStar(require("net")));
const events_1 =
/* istanbul ignore next */
(cov_1o17l5pc7l().s[41]++, require("events"));
const per_website_server_1 =
/* istanbul ignore next */
(cov_1o17l5pc7l().s[42]++, require("./per-website-server"));
/**
 * Server state enumeration for tracking server lifecycle
 */
var ServerState;
/* istanbul ignore next */
cov_1o17l5pc7l().s[43]++;
(function (ServerState) {
  /* istanbul ignore next */
  cov_1o17l5pc7l().f[9]++;
  cov_1o17l5pc7l().s[44]++;
  ServerState["STOPPED"] = "stopped";
  /* istanbul ignore next */
  cov_1o17l5pc7l().s[45]++;
  ServerState["STARTING"] = "starting";
  /* istanbul ignore next */
  cov_1o17l5pc7l().s[46]++;
  ServerState["RUNNING"] = "running";
  /* istanbul ignore next */
  cov_1o17l5pc7l().s[47]++;
  ServerState["STOPPING"] = "stopping";
  /* istanbul ignore next */
  cov_1o17l5pc7l().s[48]++;
  ServerState["ERROR"] = "error";
})(
/* istanbul ignore next */
(cov_1o17l5pc7l().b[17][0]++, ServerState) ||
/* istanbul ignore next */
(cov_1o17l5pc7l().b[17][1]++, exports.ServerState = ServerState = {}));
/**
 * Default configuration for the server manager
 */
const DEFAULT_CONFIG =
/* istanbul ignore next */
(cov_1o17l5pc7l().s[49]++, {
  startPort: 8081,
  maxRetries: 3,
  startupTimeout: 30000,
  // 30 seconds
  shutdownTimeout: 10000,
  // 10 seconds
  enableLogging: true
});
/**
 * DI-compatible WebsiteServerManager class
 *
 * Provides comprehensive server management capabilities for website development servers
 * including lifecycle management, port allocation, state tracking, and cleanup.
 */
class WebsiteServerManager extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  constructor(logger, fileSystem, config =
  /* istanbul ignore next */
  (cov_1o17l5pc7l().b[18][0]++, {})) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[10]++;
    cov_1o17l5pc7l().s[50]++;
    super();
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[51]++;
    this.fileSystem = fileSystem;
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[52]++;
    this.servers = new Map();
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[53]++;
    this.allocatedPorts = new Set();
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[54]++;
    this.isShuttingDown = false;
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[55]++;
    this.logger = logger.child({
      service: 'WebsiteServerManager'
    });
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[56]++;
    this.config = {
      ...DEFAULT_CONFIG,
      ...config
    };
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[57]++;
    this.setupGracefulShutdown();
  }
  /**
   * Static factory method for DI container integration.
   */
  static create(logger, fileSystem, config =
  /* istanbul ignore next */
  (cov_1o17l5pc7l().b[19][0]++, {})) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[11]++;
    cov_1o17l5pc7l().s[58]++;
    return new WebsiteServerManager(logger, fileSystem, config);
  }
  /**
   * Start a website server for the specified website (DI interface compatibility).
   * @param websiteName Unique identifier for the website to process
   * @param websitePath File system path to the website directory
   * @returns Promise resolving to the website server info
   */
  async startServer(websiteName, websitePath) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[12]++;
    const managedServer =
    /* istanbul ignore next */
    (cov_1o17l5pc7l().s[59]++, await this.startServerWithPath(websiteName, websitePath));
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[60]++;
    return this.convertToWebsiteServerInfo(managedServer);
  }
  /**
   * Start a website server for the specified website with explicit path.
   * @param websiteName Unique identifier for the website to process
   * @param websitePath File system path to the website directory
   * @returns Promise resolving to the managed server info
   */
  async startServerWithPath(websiteName, websitePath) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[13]++;
    cov_1o17l5pc7l().s[61]++;
    if (this.isShuttingDown) {
      /* istanbul ignore next */
      cov_1o17l5pc7l().b[20][0]++;
      cov_1o17l5pc7l().s[62]++;
      throw new Error('Server manager is shutting down');
    } else
    /* istanbul ignore next */
    {
      cov_1o17l5pc7l().b[20][1]++;
    }
    // Check if server already exists
    const existingServer =
    /* istanbul ignore next */
    (cov_1o17l5pc7l().s[63]++, this.servers.get(websiteName));
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[64]++;
    if (existingServer) {
      /* istanbul ignore next */
      cov_1o17l5pc7l().b[21][0]++;
      cov_1o17l5pc7l().s[65]++;
      if (existingServer.state === ServerState.RUNNING) {
        /* istanbul ignore next */
        cov_1o17l5pc7l().b[22][0]++;
        cov_1o17l5pc7l().s[66]++;
        this.log(websiteName, `Server already running at ${existingServer.actualUrl}`, 'info');
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[67]++;
        return existingServer;
      } else
      /* istanbul ignore next */
      {
        cov_1o17l5pc7l().b[22][1]++;
      }
      cov_1o17l5pc7l().s[68]++;
      if (existingServer.state === ServerState.STARTING) {
        /* istanbul ignore next */
        cov_1o17l5pc7l().b[23][0]++;
        cov_1o17l5pc7l().s[69]++;
        throw new Error(`Server for ${websiteName} is already starting`);
      } else
      /* istanbul ignore next */
      {
        cov_1o17l5pc7l().b[23][1]++;
      }
      // Stop existing server if in error state
      cov_1o17l5pc7l().s[70]++;
      if (existingServer.state === ServerState.ERROR) {
        /* istanbul ignore next */
        cov_1o17l5pc7l().b[24][0]++;
        cov_1o17l5pc7l().s[71]++;
        await this.stopServer(websiteName);
      } else
      /* istanbul ignore next */
      {
        cov_1o17l5pc7l().b[24][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1o17l5pc7l().b[21][1]++;
    }
    // Validate website path
    cov_1o17l5pc7l().s[72]++;
    if (!(await this.validateWebsitePath(websitePath))) {
      /* istanbul ignore next */
      cov_1o17l5pc7l().b[25][0]++;
      cov_1o17l5pc7l().s[73]++;
      throw new Error(`Invalid website path: ${websitePath}`);
    } else
    /* istanbul ignore next */
    {
      cov_1o17l5pc7l().b[25][1]++;
    }
    // Allocate port
    const port =
    /* istanbul ignore next */
    (cov_1o17l5pc7l().s[74]++, await this.allocatePort());
    // Create managed server entry
    const managedServer =
    /* istanbul ignore next */
    (cov_1o17l5pc7l().s[75]++, {
      websiteName,
      websitePath,
      port,
      state: ServerState.STARTING,
      retryCount: 0,
      startedAt: new Date()
    });
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[76]++;
    this.servers.set(websiteName, managedServer);
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[77]++;
    this.allocatedPorts.add(port);
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[78]++;
    this.emit('server-starting', websiteName);
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[79]++;
    this.emit('port-allocated', websiteName, port);
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[80]++;
    this.log(websiteName, `Starting server on port ${port}`, 'info');
    // Try to start the server with retries
    let lastError =
    /* istanbul ignore next */
    (cov_1o17l5pc7l().s[81]++, null);
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[82]++;
    for (let attempt =
    /* istanbul ignore next */
    (cov_1o17l5pc7l().s[83]++, 0); attempt <= this.config.maxRetries; attempt++) {
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[84]++;
      try {
        // Start the actual server with timeout
        const server =
        /* istanbul ignore next */
        (cov_1o17l5pc7l().s[85]++, await this.startWithTimeout(websitePath, websiteName, port));
        // Update managed server with success info
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[86]++;
        managedServer.server = server;
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[87]++;
        managedServer.state = ServerState.RUNNING;
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[88]++;
        managedServer.actualUrl =
        /* istanbul ignore next */
        (cov_1o17l5pc7l().b[26][0]++, server.actualUrl) ||
        /* istanbul ignore next */
        (cov_1o17l5pc7l().b[26][1]++, `http://localhost:${server.port}`);
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[89]++;
        managedServer.lastError = undefined;
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[90]++;
        this.emit('server-started', websiteName, managedServer);
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[91]++;
        this.log(websiteName, `Server started successfully at ${managedServer.actualUrl}${attempt > 0 ?
        /* istanbul ignore next */
        (cov_1o17l5pc7l().b[27][0]++, ` after ${attempt} retries`) :
        /* istanbul ignore next */
        (cov_1o17l5pc7l().b[27][1]++, '')}`, 'info');
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[92]++;
        return managedServer;
      } catch (error) {
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[93]++;
        lastError = error instanceof Error ?
        /* istanbul ignore next */
        (cov_1o17l5pc7l().b[28][0]++, error) :
        /* istanbul ignore next */
        (cov_1o17l5pc7l().b[28][1]++, new Error(String(error)));
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[94]++;
        managedServer.retryCount = attempt;
        // Update state to error and emit error (but don't release port yet if retrying)
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[95]++;
        managedServer.state = ServerState.ERROR;
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[96]++;
        managedServer.lastError = lastError;
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[97]++;
        this.emit('server-error', websiteName, lastError);
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[98]++;
        this.log(websiteName, `Failed to start server (attempt ${attempt + 1}/${this.config.maxRetries + 1}): ${lastError.message}`, 'error');
        // If we have more attempts left, retry with backoff
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[99]++;
        if (attempt < this.config.maxRetries) {
          /* istanbul ignore next */
          cov_1o17l5pc7l().b[29][0]++;
          cov_1o17l5pc7l().s[100]++;
          this.log(websiteName, `Retrying server start in ${Math.pow(2, attempt)}s...`, 'warning');
          /* istanbul ignore next */
          cov_1o17l5pc7l().s[101]++;
          await this.delay(1000 * Math.pow(2, attempt));
          /* istanbul ignore next */
          cov_1o17l5pc7l().s[102]++;
          managedServer.state = ServerState.STARTING;
        } else
        /* istanbul ignore next */
        {
          cov_1o17l5pc7l().b[29][1]++;
        }
      }
    }
    // All attempts failed - clean up and throw
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[103]++;
    this.allocatedPorts.delete(port);
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[104]++;
    this.emit('port-released', websiteName, port);
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[105]++;
    if (lastError) {
      /* istanbul ignore next */
      cov_1o17l5pc7l().b[30][0]++;
      cov_1o17l5pc7l().s[106]++;
      throw lastError;
    } else {
      /* istanbul ignore next */
      cov_1o17l5pc7l().b[30][1]++;
      cov_1o17l5pc7l().s[107]++;
      throw new Error('Server start failed for unknown reason');
    }
  }
  /**
   * Stop a website server.
   * @param websiteName Unique identifier for the website server to stop
   * @returns Promise that resolves when server is stopped
   */
  async stopServer(websiteName) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[14]++;
    const managedServer =
    /* istanbul ignore next */
    (cov_1o17l5pc7l().s[108]++, this.servers.get(websiteName));
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[109]++;
    if (!managedServer) {
      /* istanbul ignore next */
      cov_1o17l5pc7l().b[31][0]++;
      cov_1o17l5pc7l().s[110]++;
      this.log(websiteName, 'No server found to stop', 'warning');
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[111]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1o17l5pc7l().b[31][1]++;
    }
    cov_1o17l5pc7l().s[112]++;
    if (managedServer.state === ServerState.STOPPED) {
      /* istanbul ignore next */
      cov_1o17l5pc7l().b[32][0]++;
      cov_1o17l5pc7l().s[113]++;
      this.log(websiteName, 'Server already stopped', 'info');
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[114]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1o17l5pc7l().b[32][1]++;
    }
    cov_1o17l5pc7l().s[115]++;
    if (managedServer.state === ServerState.STOPPING) {
      /* istanbul ignore next */
      cov_1o17l5pc7l().b[33][0]++;
      cov_1o17l5pc7l().s[116]++;
      this.log(websiteName, 'Server already stopping', 'info');
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[117]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1o17l5pc7l().b[33][1]++;
    }
    cov_1o17l5pc7l().s[118]++;
    managedServer.state = ServerState.STOPPING;
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[119]++;
    this.emit('server-stopping', websiteName);
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[120]++;
    this.log(websiteName, 'Stopping server', 'info');
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[121]++;
    try {
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[122]++;
      if (managedServer.server) {
        /* istanbul ignore next */
        cov_1o17l5pc7l().b[34][0]++;
        cov_1o17l5pc7l().s[123]++;
        await this.stopWithTimeout(managedServer.server);
      } else
      /* istanbul ignore next */
      {
        cov_1o17l5pc7l().b[34][1]++;
      }
      // Clean up resources
      cov_1o17l5pc7l().s[124]++;
      this.allocatedPorts.delete(managedServer.port);
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[125]++;
      managedServer.state = ServerState.STOPPED;
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[126]++;
      managedServer.server = undefined;
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[127]++;
      this.emit('server-stopped', websiteName);
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[128]++;
      this.emit('port-released', websiteName, managedServer.port);
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[129]++;
      this.log(websiteName, 'Server stopped successfully', 'info');
    } catch (error) {
      const serverError =
      /* istanbul ignore next */
      (cov_1o17l5pc7l().s[130]++, error instanceof Error ?
      /* istanbul ignore next */
      (cov_1o17l5pc7l().b[35][0]++, error) :
      /* istanbul ignore next */
      (cov_1o17l5pc7l().b[35][1]++, new Error(String(error))));
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[131]++;
      managedServer.state = ServerState.ERROR;
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[132]++;
      managedServer.lastError = serverError;
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[133]++;
      this.emit('server-error', websiteName, serverError);
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[134]++;
      this.log(websiteName, `Error stopping server: ${serverError.message}`, 'error');
      // Still clean up resources even on error
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[135]++;
      this.allocatedPorts.delete(managedServer.port);
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[136]++;
      managedServer.server = undefined;
    }
  }
  /**
   * Restart a website server (DI interface compatibility).
   * @param websiteName Unique identifier for the website server to restart
   * @returns Promise resolving to the website server info
   */
  async restartServer(websiteName) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[15]++;
    const managedServer =
    /* istanbul ignore next */
    (cov_1o17l5pc7l().s[137]++, this.servers.get(websiteName));
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[138]++;
    if (!managedServer) {
      /* istanbul ignore next */
      cov_1o17l5pc7l().b[36][0]++;
      cov_1o17l5pc7l().s[139]++;
      throw new Error(`No server found for website: ${websiteName}`);
    } else
    /* istanbul ignore next */
    {
      cov_1o17l5pc7l().b[36][1]++;
    }
    cov_1o17l5pc7l().s[140]++;
    this.log(websiteName, 'Restarting server', 'info');
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[141]++;
    await this.stopServer(websiteName);
    const restarted =
    /* istanbul ignore next */
    (cov_1o17l5pc7l().s[142]++, await this.startServerWithPath(websiteName, managedServer.websitePath));
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[143]++;
    return this.convertToWebsiteServerInfo(restarted);
  }
  /**
   * Get server information for a specific website (DI interface compatibility).
   * @param websiteName Unique identifier for the website to query
   * @returns Website server info or undefined if not found
   */
  getServerInfo(websiteName) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[16]++;
    const managedServer =
    /* istanbul ignore next */
    (cov_1o17l5pc7l().s[144]++, this.servers.get(websiteName));
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[145]++;
    return managedServer ?
    /* istanbul ignore next */
    (cov_1o17l5pc7l().b[37][0]++, this.convertToWebsiteServerInfo(managedServer)) :
    /* istanbul ignore next */
    (cov_1o17l5pc7l().b[37][1]++, undefined);
  }
  /**
   * Get server information for a specific website (legacy method).
   * @param websiteName Unique identifier for the website to query
   * @returns Managed server info or undefined if not found
   */
  getServer(websiteName) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[17]++;
    cov_1o17l5pc7l().s[146]++;
    return this.servers.get(websiteName);
  }
  /**
   * Get all currently managed servers (DI interface compatibility).
   * @returns ReadonlyMap of website names to managed server info
   */
  getAllServers() {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[18]++;
    cov_1o17l5pc7l().s[147]++;
    return new Map(this.servers);
  }
  /**
   * Get all currently managed servers (legacy method).
   * @returns Map of website names to managed server info
   */
  getAllManagedServers() {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[19]++;
    cov_1o17l5pc7l().s[148]++;
    return new Map(this.servers);
  }
  /**
   * Filter and retrieve servers that match a specific operational state.
   * @param state The specific server state to filter managed servers by
   * @returns Array of managed servers in the specified state
   */
  getServersByState(state) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[20]++;
    cov_1o17l5pc7l().s[149]++;
    return Array.from(this.servers.values()).filter(server => {
      /* istanbul ignore next */
      cov_1o17l5pc7l().f[21]++;
      cov_1o17l5pc7l().s[150]++;
      return server.state === state;
    });
  }
  /**
   * Count the total number of servers currently in running state.
   * @returns Number of currently running servers
   */
  getRunningServersCount() {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[22]++;
    cov_1o17l5pc7l().s[151]++;
    return this.getServersByState(ServerState.RUNNING).length;
  }
  /**
   * Check if a server is running for a website.
   * @param websiteName Unique identifier for the website to check status for
   * @returns True if server is running, false otherwise
   */
  isServerRunning(websiteName) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[23]++;
    const server =
    /* istanbul ignore next */
    (cov_1o17l5pc7l().s[152]++, this.servers.get(websiteName));
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[153]++;
    return /* istanbul ignore next */(cov_1o17l5pc7l().b[38][0]++, server?.state === ServerState.RUNNING) ||
    /* istanbul ignore next */
    (cov_1o17l5pc7l().b[38][1]++, false);
  }
  /**
   * Stop all servers and clean up resources.
   * @returns Promise that resolves when all servers are stopped
   */
  async stopAllServers() {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[24]++;
    cov_1o17l5pc7l().s[154]++;
    this.isShuttingDown = true;
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[155]++;
    this.log('manager', 'Stopping all servers', 'info');
    const stopPromises =
    /* istanbul ignore next */
    (cov_1o17l5pc7l().s[156]++, Array.from(this.servers.keys()).map(websiteName => {
      /* istanbul ignore next */
      cov_1o17l5pc7l().f[25]++;
      cov_1o17l5pc7l().s[157]++;
      return this.stopServer(websiteName).catch(error => {
        /* istanbul ignore next */
        cov_1o17l5pc7l().f[26]++;
        cov_1o17l5pc7l().s[158]++;
        this.log(websiteName, `Error during shutdown: ${error.message}`, 'error');
      });
    }));
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[159]++;
    await Promise.all(stopPromises);
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[160]++;
    this.servers.clear();
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[161]++;
    this.allocatedPorts.clear();
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[162]++;
    this.log('manager', 'All servers stopped', 'info');
  }
  /**
   * Compile comprehensive operational metrics and performance statistics for all managed servers.
   * @returns Comprehensive statistics object with server counts, ports, and uptime data
   */
  getStatistics() {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[27]++;
    const servers =
    /* istanbul ignore next */
    (cov_1o17l5pc7l().s[163]++, Array.from(this.servers.values()));
    const now =
    /* istanbul ignore next */
    (cov_1o17l5pc7l().s[164]++, new Date());
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[165]++;
    return {
      totalServers: servers.length,
      runningServers: this.getServersByState(ServerState.RUNNING).length,
      stoppedServers: this.getServersByState(ServerState.STOPPED).length,
      errorServers: this.getServersByState(ServerState.ERROR).length,
      allocatedPorts: Array.from(this.allocatedPorts).sort(),
      uptime: servers.reduce((acc, server) => {
        /* istanbul ignore next */
        cov_1o17l5pc7l().f[28]++;
        cov_1o17l5pc7l().s[166]++;
        if (
        /* istanbul ignore next */
        (cov_1o17l5pc7l().b[40][0]++, server.startedAt) &&
        /* istanbul ignore next */
        (cov_1o17l5pc7l().b[40][1]++, server.state === ServerState.RUNNING)) {
          /* istanbul ignore next */
          cov_1o17l5pc7l().b[39][0]++;
          cov_1o17l5pc7l().s[167]++;
          acc[server.websiteName] = now.getTime() - server.startedAt.getTime();
        } else
        /* istanbul ignore next */
        {
          cov_1o17l5pc7l().b[39][1]++;
        }
        cov_1o17l5pc7l().s[168]++;
        return acc;
      }, {})
    };
  }
  /**
   * Find an available port starting from the configured start port.
   * @returns Promise resolving to an available port number
   */
  async allocatePort() {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[29]++;
    let port =
    /* istanbul ignore next */
    (cov_1o17l5pc7l().s[169]++, this.config.startPort);
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[170]++;
    while (
    /* istanbul ignore next */
    (cov_1o17l5pc7l().b[41][0]++, this.allocatedPorts.has(port)) ||
    /* istanbul ignore next */
    (cov_1o17l5pc7l().b[41][1]++, !(await this.isPortAvailable(port)))) {
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[171]++;
      port++;
      // Prevent infinite loop by limiting port range
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[172]++;
      if (port > this.config.startPort + 1000) {
        /* istanbul ignore next */
        cov_1o17l5pc7l().b[42][0]++;
        cov_1o17l5pc7l().s[173]++;
        throw new Error('No available ports found in range');
      } else
      /* istanbul ignore next */
      {
        cov_1o17l5pc7l().b[42][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[174]++;
    return port;
  }
  /**
   * Check if a port is available for use.
   * @param port Network port number to check for availability
   * @returns Promise resolving to true if port is available
   */
  async isPortAvailable(port) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[30]++;
    cov_1o17l5pc7l().s[175]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_1o17l5pc7l().f[31]++;
      const server =
      /* istanbul ignore next */
      (cov_1o17l5pc7l().s[176]++, net.createServer());
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[177]++;
      server.listen(port, () => {
        /* istanbul ignore next */
        cov_1o17l5pc7l().f[32]++;
        cov_1o17l5pc7l().s[178]++;
        server.close(() => {
          /* istanbul ignore next */
          cov_1o17l5pc7l().f[33]++;
          cov_1o17l5pc7l().s[179]++;
          return resolve(true);
        });
      });
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[180]++;
      server.on('error', () => {
        /* istanbul ignore next */
        cov_1o17l5pc7l().f[34]++;
        cov_1o17l5pc7l().s[181]++;
        return resolve(false);
      });
    });
  }
  /**
   * Validate that a website path exists and contains required files.
   * @param websitePath Path to validate
   * @returns Promise resolving to true if path is valid
   */
  async validateWebsitePath(websitePath) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[35]++;
    cov_1o17l5pc7l().s[182]++;
    try {
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[183]++;
      // Check if main directory exists
      if (!(await this.fileSystem.exists(websitePath))) {
        /* istanbul ignore next */
        cov_1o17l5pc7l().b[43][0]++;
        cov_1o17l5pc7l().s[184]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_1o17l5pc7l().b[43][1]++;
      }
      // Check if src directory exists (required for Anglesite websites)
      const srcPath =
      /* istanbul ignore next */
      (cov_1o17l5pc7l().s[185]++, path.join(websitePath, 'src'));
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[186]++;
      if (!(await this.fileSystem.exists(srcPath))) {
        /* istanbul ignore next */
        cov_1o17l5pc7l().b[44][0]++;
        cov_1o17l5pc7l().s[187]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_1o17l5pc7l().b[44][1]++;
      }
      cov_1o17l5pc7l().s[188]++;
      return true;
    } catch {
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[189]++;
      return false;
    }
  }
  /**
   * Start a website server with timeout.
   * @param websitePath Path to the website directory
   * @param websiteName Unique identifier for the website to start
   * @param port Port to use for the server
   * @returns Promise resolving to the website server
   */
  async startWithTimeout(websitePath, websiteName, port) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[36]++;
    cov_1o17l5pc7l().s[190]++;
    return new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_1o17l5pc7l().f[37]++;
      const timeout =
      /* istanbul ignore next */
      (cov_1o17l5pc7l().s[191]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_1o17l5pc7l().f[38]++;
        cov_1o17l5pc7l().s[192]++;
        reject(new Error(`Server startup timed out after ${this.config.startupTimeout}ms`));
      }, this.config.startupTimeout));
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[193]++;
      (0, per_website_server_1.startWebsiteServer)(websitePath, websiteName, port).then(server => {
        /* istanbul ignore next */
        cov_1o17l5pc7l().f[39]++;
        cov_1o17l5pc7l().s[194]++;
        clearTimeout(timeout);
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[195]++;
        resolve(server);
      }).catch(error => {
        /* istanbul ignore next */
        cov_1o17l5pc7l().f[40]++;
        cov_1o17l5pc7l().s[196]++;
        clearTimeout(timeout);
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[197]++;
        reject(error);
      });
    });
  }
  /**
   * Stop a website server with timeout.
   * @param server WebsiteServer instance to gracefully shutdown
   * @returns Promise that resolves when server is stopped
   */
  async stopWithTimeout(server) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[41]++;
    cov_1o17l5pc7l().s[198]++;
    return new Promise((resolve, reject) => {
      /* istanbul ignore next */
      cov_1o17l5pc7l().f[42]++;
      const timeout =
      /* istanbul ignore next */
      (cov_1o17l5pc7l().s[199]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_1o17l5pc7l().f[43]++;
        cov_1o17l5pc7l().s[200]++;
        reject(new Error(`Server shutdown timed out after ${this.config.shutdownTimeout}ms`));
      }, this.config.shutdownTimeout));
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[201]++;
      (0, per_website_server_1.stopWebsiteServer)(server).then(() => {
        /* istanbul ignore next */
        cov_1o17l5pc7l().f[44]++;
        cov_1o17l5pc7l().s[202]++;
        clearTimeout(timeout);
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[203]++;
        resolve();
      }).catch(error => {
        /* istanbul ignore next */
        cov_1o17l5pc7l().f[45]++;
        cov_1o17l5pc7l().s[204]++;
        clearTimeout(timeout);
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[205]++;
        reject(error);
      });
    });
  }
  /**
   * Delay utility for retry logic.
   * @param ms Milliseconds to delay
   * @returns Promise that resolves after the delay
   */
  delay(ms) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[46]++;
    cov_1o17l5pc7l().s[206]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_1o17l5pc7l().f[47]++;
      cov_1o17l5pc7l().s[207]++;
      return setTimeout(resolve, ms);
    });
  }
  /**
   * Log messages with injected logger and emit events.
   * @param websiteName Website name or 'manager' for manager logs
   * @param message Log message content
   * @param level Log level (info, warning, error)
   */
  log(websiteName, message, level =
  /* istanbul ignore next */
  (cov_1o17l5pc7l().b[45][0]++, 'info')) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[48]++;
    cov_1o17l5pc7l().s[208]++;
    if (!this.config.enableLogging) {
      /* istanbul ignore next */
      cov_1o17l5pc7l().b[46][0]++;
      cov_1o17l5pc7l().s[209]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1o17l5pc7l().b[46][1]++;
    }
    const meta =
    /* istanbul ignore next */
    (cov_1o17l5pc7l().s[210]++, {
      websiteName
    });
    // Log with injected logger based on level
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[211]++;
    switch (level) {
      case 'error':
        /* istanbul ignore next */
        cov_1o17l5pc7l().b[47][0]++;
        cov_1o17l5pc7l().s[212]++;
        this.logger.error(message, undefined, meta);
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[213]++;
        break;
      case 'warn':
        /* istanbul ignore next */
        cov_1o17l5pc7l().b[47][1]++;
      case 'warning':
        /* istanbul ignore next */
        cov_1o17l5pc7l().b[47][2]++;
        cov_1o17l5pc7l().s[214]++;
        this.logger.warn(message, meta);
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[215]++;
        break;
      case 'debug':
        /* istanbul ignore next */
        cov_1o17l5pc7l().b[47][3]++;
        cov_1o17l5pc7l().s[216]++;
        this.logger.debug(message, meta);
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[217]++;
        break;
      default:
        /* istanbul ignore next */
        cov_1o17l5pc7l().b[47][4]++;
        cov_1o17l5pc7l().s[218]++;
        this.logger.info(message, meta);
    }
    // Emit log event for external subscribers
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[219]++;
    this.emit('server-log', websiteName, message, level);
  }
  /**
   * Clean up orphaned servers (DI interface compatibility).
   * @returns Promise that resolves when cleanup is complete
   */
  async cleanupOrphanedServers() {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[49]++;
    cov_1o17l5pc7l().s[220]++;
    this.logger.info('Cleaning up orphaned servers');
    // For now, just stop servers in error state
    const errorServers =
    /* istanbul ignore next */
    (cov_1o17l5pc7l().s[221]++, this.getServersByState(ServerState.ERROR));
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[222]++;
    for (const server of errorServers) {
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[223]++;
      try {
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[224]++;
        await this.stopServer(server.websiteName);
      } catch (error) {
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[225]++;
        this.logger.warn('Failed to cleanup orphaned server', {
          websiteName: server.websiteName,
          error
        });
      }
    }
  }
  /**
   * Convert ManagedServer to WebsiteServerInfo for interface compatibility.
   */
  convertToWebsiteServerInfo(managedServer) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[50]++;
    cov_1o17l5pc7l().s[226]++;
    return {
      name: managedServer.websiteName,
      port: managedServer.port,
      status: this.convertServerState(managedServer.state),
      url: managedServer.actualUrl,
      error: managedServer.lastError?.message,
      pid: undefined // TODO: Add PID tracking to WebsiteServer interface
    };
  }
  /**
   * Convert ServerState to the interface-expected status.
   */
  convertServerState(state) {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[51]++;
    cov_1o17l5pc7l().s[227]++;
    switch (state) {
      case ServerState.STARTING:
        /* istanbul ignore next */
        cov_1o17l5pc7l().b[48][0]++;
        cov_1o17l5pc7l().s[228]++;
        return 'starting';
      case ServerState.RUNNING:
        /* istanbul ignore next */
        cov_1o17l5pc7l().b[48][1]++;
        cov_1o17l5pc7l().s[229]++;
        return 'running';
      case ServerState.STOPPING:
        /* istanbul ignore next */
        cov_1o17l5pc7l().b[48][2]++;
        cov_1o17l5pc7l().s[230]++;
        return 'stopping';
      case ServerState.STOPPED:
        /* istanbul ignore next */
        cov_1o17l5pc7l().b[48][3]++;
        cov_1o17l5pc7l().s[231]++;
        return 'stopped';
      case ServerState.ERROR:
        /* istanbul ignore next */
        cov_1o17l5pc7l().b[48][4]++;
        cov_1o17l5pc7l().s[232]++;
        return 'error';
      default:
        /* istanbul ignore next */
        cov_1o17l5pc7l().b[48][5]++;
        cov_1o17l5pc7l().s[233]++;
        return 'stopped';
    }
  }
  /**
   * Dispose of the server manager service.
   */
  async dispose() {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[52]++;
    cov_1o17l5pc7l().s[234]++;
    this.logger.info('Disposing WebsiteServerManager service');
    /* istanbul ignore next */
    cov_1o17l5pc7l().s[235]++;
    await this.stopAllServers();
  }
  /**
   * Set up graceful shutdown handlers.
   * Note: Only set up process handlers for the singleton instance.
   */
  setupGracefulShutdown() {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[53]++;
    cov_1o17l5pc7l().s[236]++;
    // Only set up process handlers if this is likely the singleton instance
    // (to avoid memory leaks in tests)
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    if (this === globalThis.__anglesiteServerManager) {
      /* istanbul ignore next */
      cov_1o17l5pc7l().b[49][0]++;
      const signals =
      /* istanbul ignore next */
      (cov_1o17l5pc7l().s[237]++, ['SIGTERM', 'SIGINT', 'SIGQUIT']);
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[238]++;
      signals.forEach(signal => {
        /* istanbul ignore next */
        cov_1o17l5pc7l().f[54]++;
        cov_1o17l5pc7l().s[239]++;
        process.on(signal, async () => {
          /* istanbul ignore next */
          cov_1o17l5pc7l().f[55]++;
          cov_1o17l5pc7l().s[240]++;
          this.log('manager', `Received ${signal}, shutting down gracefully`, 'info');
          /* istanbul ignore next */
          cov_1o17l5pc7l().s[241]++;
          try {
            /* istanbul ignore next */
            cov_1o17l5pc7l().s[242]++;
            await this.stopAllServers();
            /* istanbul ignore next */
            cov_1o17l5pc7l().s[243]++;
            process.exit(0);
          } catch (error) {
            /* istanbul ignore next */
            cov_1o17l5pc7l().s[244]++;
            this.log('manager', `Error during graceful shutdown: ${error}`, 'error');
            /* istanbul ignore next */
            cov_1o17l5pc7l().s[245]++;
            process.exit(1);
          }
        });
      });
      // Handle uncaught exceptions
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[246]++;
      process.on('uncaughtException', error => {
        /* istanbul ignore next */
        cov_1o17l5pc7l().f[56]++;
        cov_1o17l5pc7l().s[247]++;
        this.log('manager', `Uncaught exception: ${error.message}`, 'error');
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[248]++;
        this.stopAllServers().finally(() => {
          /* istanbul ignore next */
          cov_1o17l5pc7l().f[57]++;
          cov_1o17l5pc7l().s[249]++;
          return process.exit(1);
        });
      });
      /* istanbul ignore next */
      cov_1o17l5pc7l().s[250]++;
      process.on('unhandledRejection', reason => {
        /* istanbul ignore next */
        cov_1o17l5pc7l().f[58]++;
        cov_1o17l5pc7l().s[251]++;
        this.log('manager', `Unhandled rejection: ${reason}`, 'error');
        /* istanbul ignore next */
        cov_1o17l5pc7l().s[252]++;
        this.stopAllServers().finally(() => {
          /* istanbul ignore next */
          cov_1o17l5pc7l().f[59]++;
          cov_1o17l5pc7l().s[253]++;
          return process.exit(1);
        });
      });
    } else
    /* istanbul ignore next */
    {
      cov_1o17l5pc7l().b[49][1]++;
    }
  }
}
/* istanbul ignore next */
cov_1o17l5pc7l().s[254]++;
exports.WebsiteServerManager = WebsiteServerManager;
/**
 * Factory function for creating WebsiteServerManager with proper dependencies.
 */
function createWebsiteServerManager(logger, fileSystem, config =
/* istanbul ignore next */
(cov_1o17l5pc7l().b[50][0]++, {})) {
  /* istanbul ignore next */
  cov_1o17l5pc7l().f[60]++;
  cov_1o17l5pc7l().s[255]++;
  return WebsiteServerManager.create(logger, fileSystem, config);
}
/**
 * Type guard to check if an object is a website server manager.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function isWebsiteServerManager(obj) {
  /* istanbul ignore next */
  cov_1o17l5pc7l().f[61]++;
  cov_1o17l5pc7l().s[256]++;
  return /* istanbul ignore next */(cov_1o17l5pc7l().b[51][0]++, obj) &&
  /* istanbul ignore next */
  (cov_1o17l5pc7l().b[51][1]++, typeof obj.startServer === 'function') &&
  /* istanbul ignore next */
  (cov_1o17l5pc7l().b[51][2]++, typeof obj.stopServer === 'function') &&
  /* istanbul ignore next */
  (cov_1o17l5pc7l().b[51][3]++, typeof obj.getAllServers === 'function') &&
  /* istanbul ignore next */
  (cov_1o17l5pc7l().b[51][4]++, typeof obj.dispose === 'function');
}
/**
 * @deprecated Legacy singleton export for backward compatibility during transition period
 * Use DI container instead
 */
/* istanbul ignore next */
cov_1o17l5pc7l().s[257]++;
exports.websiteServerManager = {
  startServer: () => {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[62]++;
    cov_1o17l5pc7l().s[258]++;
    throw new Error('websiteServerManager is deprecated. Use DI container instead.');
  },
  stopServer: () => {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[63]++;
    cov_1o17l5pc7l().s[259]++;
    throw new Error('websiteServerManager is deprecated. Use DI container instead.');
  },
  getAllServers: () => {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[64]++;
    cov_1o17l5pc7l().s[260]++;
    throw new Error('websiteServerManager is deprecated. Use DI container instead.');
  },
  getServer: () => {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[65]++;
    cov_1o17l5pc7l().s[261]++;
    throw new Error('websiteServerManager is deprecated. Use DI container instead.');
  },
  stopAllServers: () => {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[66]++;
    cov_1o17l5pc7l().s[262]++;
    throw new Error('websiteServerManager is deprecated. Use DI container instead.');
  },
  dispose: () => {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[67]++;
    cov_1o17l5pc7l().s[263]++;
    throw new Error('websiteServerManager is deprecated. Use DI container instead.');
  },
  on: () => {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[68]++;
    cov_1o17l5pc7l().s[264]++;
    throw new Error('websiteServerManager is deprecated. Use DI container instead.');
  },
  emit: () => {
    /* istanbul ignore next */
    cov_1o17l5pc7l().f[69]++;
    cov_1o17l5pc7l().s[265]++;
    throw new Error('websiteServerManager is deprecated. Use DI container instead.');
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,