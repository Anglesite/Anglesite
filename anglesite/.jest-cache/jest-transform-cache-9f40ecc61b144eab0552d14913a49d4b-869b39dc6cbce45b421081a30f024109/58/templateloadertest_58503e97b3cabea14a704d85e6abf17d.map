{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/ui/template-loader.test.ts","mappings":"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","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/ui/template-loader.test.ts"],"sourcesContent":["/**\n * @file Tests for template-loader.ts\n */\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n// Mock electron before importing template-loader\njest.mock('electron', () => ({\n  app: {\n    isPackaged: false,\n  },\n}));\n\nimport { loadTemplate, loadTemplateAsDataUrl } from '../../app/ui/template-loader';\n\n// Mock fs module\njest.mock('fs');\nconst mockFs = fs as jest.Mocked<typeof fs>;\n\n// Mock path module\njest.mock('path');\nconst mockPath = path as jest.Mocked<typeof path>;\n\ndescribe('template-loader', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('loadTemplate', () => {\n    it('should load template file successfully', () => {\n      const templateName = 'test-template';\n      const templatePath = '/app/ui/templates/test-template.html';\n      const templateContent = '<html><title>{{title}}</title><body><h1>{{heading}}</h1></body></html>';\n\n      mockPath.join.mockReturnValue(templatePath);\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue(templateContent);\n\n      const variables = { title: 'Test Title', heading: 'Test Heading' };\n      const result = loadTemplate(templateName, variables);\n\n      expect(mockPath.join).toHaveBeenCalledWith(expect.any(String), 'templates', 'test-template.html');\n      expect(mockFs.existsSync).toHaveBeenCalledWith(templatePath);\n      expect(mockFs.readFileSync).toHaveBeenCalledWith(templatePath, 'utf8');\n      expect(result).toBe('<html><title>Test Title</title><body><h1>Test Heading</h1></body></html>');\n    });\n\n    it('should load template without variables', () => {\n      const templateName = 'simple-template';\n      const templatePath = '/app/ui/templates/simple-template.html';\n      const templateContent = '<html><title>Static Title</title></html>';\n\n      mockPath.join.mockReturnValue(templatePath);\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue(templateContent);\n\n      const result = loadTemplate(templateName);\n\n      expect(result).toBe('<html><title>Static Title</title></html>');\n    });\n\n    it('should replace multiple occurrences of the same variable', () => {\n      const templateName = 'multi-var-template';\n      const templatePath = '/app/ui/templates/multi-var-template.html';\n      const templateContent =\n        '<html><title>{{name}}</title><body><h1>{{name}}</h1><p>Welcome to {{name}}</p></body></html>';\n\n      mockPath.join.mockReturnValue(templatePath);\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue(templateContent);\n\n      const variables = { name: 'My App' };\n      const result = loadTemplate(templateName, variables);\n\n      expect(result).toBe('<html><title>My App</title><body><h1>My App</h1><p>Welcome to My App</p></body></html>');\n    });\n\n    it('should leave unreplaced variables in template', () => {\n      const templateName = 'partial-template';\n      const templatePath = '/app/ui/templates/partial-template.html';\n      const templateContent = '<html><title>{{title}}</title><body><h1>{{heading}}</h1></body></html>';\n\n      mockPath.join.mockReturnValue(templatePath);\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue(templateContent);\n\n      const variables = { title: 'Test Title' }; // Only provide one variable\n      const result = loadTemplate(templateName, variables);\n\n      expect(result).toBe('<html><title>Test Title</title><body><h1>{{heading}}</h1></body></html>');\n    });\n\n    it('should handle empty variables object', () => {\n      const templateName = 'no-vars-template';\n      const templatePath = '/app/ui/templates/no-vars-template.html';\n      const templateContent = '<html><title>{{title}}</title></html>';\n\n      mockPath.join.mockReturnValue(templatePath);\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue(templateContent);\n\n      const result = loadTemplate(templateName, {});\n\n      expect(result).toBe('<html><title>{{title}}</title></html>');\n    });\n\n    it('should throw error when template file does not exist', () => {\n      const templateName = 'missing-template';\n      const templatePath = '/app/ui/templates/missing-template.html';\n\n      mockPath.join.mockReturnValue(templatePath);\n      mockFs.existsSync.mockReturnValue(false);\n\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      expect(() => loadTemplate(templateName)).toThrow(\n        'Template file not found: /app/ui/templates/missing-template.html'\n      );\n\n      consoleSpy.mockRestore();\n    });\n\n    it('should throw error when file read fails', () => {\n      const templateName = 'read-error-template';\n      const templatePath = '/app/ui/templates/read-error-template.html';\n      const readError = new Error('Permission denied');\n\n      mockPath.join.mockReturnValue(templatePath);\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockImplementation(() => {\n        throw readError;\n      });\n\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      expect(() => loadTemplate(templateName)).toThrow('Permission denied');\n\n      consoleSpy.mockRestore();\n    });\n\n    it('should handle special characters in variables', () => {\n      const templateName = 'special-chars-template';\n      const templatePath = '/app/ui/templates/special-chars-template.html';\n      const templateContent = '<html><title>{{title}}</title><meta content=\"{{description}}\"></html>';\n\n      mockPath.join.mockReturnValue(templatePath);\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue(templateContent);\n\n      const variables = {\n        title: 'Test & <Special> \"Characters\"',\n        description: 'A test with special chars: &<>\"\\'`',\n      };\n      const result = loadTemplate(templateName, variables);\n\n      expect(result).toBe(\n        '<html><title>Test & <Special> \"Characters\"</title><meta content=\"A test with special chars: &<>\"\\'`\"></html>'\n      );\n    });\n  });\n\n  describe('loadTemplateAsDataUrl', () => {\n    it('should return proper data URL', () => {\n      const templateName = 'data-url-template';\n      const templatePath = '/app/ui/templates/data-url-template.html';\n      const templateContent = '<html><title>{{title}}</title></html>';\n\n      mockPath.join.mockReturnValue(templatePath);\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue(templateContent);\n\n      const variables = { title: 'Data URL Test' };\n      const result = loadTemplateAsDataUrl(templateName, variables);\n\n      const expectedHtml = '<html><title>Data URL Test</title></html>';\n      const expectedDataUrl = `data:text/html;charset=utf-8,${encodeURIComponent(expectedHtml)}`;\n\n      expect(result).toBe(expectedDataUrl);\n    });\n\n    it('should return proper data URL without variables', () => {\n      const templateName = 'simple-data-url-template';\n      const templatePath = '/app/ui/templates/simple-data-url-template.html';\n      const templateContent = '<html><title>Static</title></html>';\n\n      mockPath.join.mockReturnValue(templatePath);\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue(templateContent);\n\n      const result = loadTemplateAsDataUrl(templateName);\n\n      const expectedDataUrl = `data:text/html;charset=utf-8,${encodeURIComponent(templateContent)}`;\n\n      expect(result).toBe(expectedDataUrl);\n    });\n\n    it('should properly encode special characters in data URL', () => {\n      const templateName = 'special-encoding-template';\n      const templatePath = '/app/ui/templates/special-encoding-template.html';\n      const templateContent = '<html><title>{{title}}</title></html>';\n\n      mockPath.join.mockReturnValue(templatePath);\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue(templateContent);\n\n      const variables = { title: 'Test & <Special> Characters 🚀' };\n      const result = loadTemplateAsDataUrl(templateName, variables);\n\n      const expectedHtml = '<html><title>Test & <Special> Characters 🚀</title></html>';\n      const expectedDataUrl = `data:text/html;charset=utf-8,${encodeURIComponent(expectedHtml)}`;\n\n      expect(result).toBe(expectedDataUrl);\n      expect(result).toContain('Test%20%26%20%3CSpecial%3E%20Characters%20%F0%9F%9A%80');\n    });\n\n    it('should handle loadTemplate errors', () => {\n      const templateName = 'error-template';\n      const templatePath = '/app/ui/templates/error-template.html';\n\n      mockPath.join.mockReturnValue(templatePath);\n      mockFs.existsSync.mockReturnValue(false);\n\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      expect(() => loadTemplateAsDataUrl(templateName)).toThrow(\n        'Template file not found: /app/ui/templates/error-template.html'\n      );\n\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('edge cases', () => {\n    it('should handle empty template content', () => {\n      const templateName = 'empty-template';\n      const templatePath = '/app/ui/templates/empty-template.html';\n      const templateContent = '';\n\n      mockPath.join.mockReturnValue(templatePath);\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue(templateContent);\n\n      const result = loadTemplate(templateName);\n\n      expect(result).toBe('');\n    });\n\n    it('should handle template names with special characters', () => {\n      const templateName = 'template-with-dashes_and_underscores';\n      const templatePath = '/app/ui/templates/template-with-dashes_and_underscores.html';\n      const templateContent = '<html></html>';\n\n      mockPath.join.mockReturnValue(templatePath);\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue(templateContent);\n\n      const result = loadTemplate(templateName);\n\n      expect(mockPath.join).toHaveBeenCalledWith(\n        expect.any(String),\n        'templates',\n        'template-with-dashes_and_underscores.html'\n      );\n      expect(result).toBe('<html></html>');\n    });\n\n    it('should handle variables with empty string values', () => {\n      const templateName = 'empty-var-template';\n      const templatePath = '/app/ui/templates/empty-var-template.html';\n      const templateContent = '<html><title>{{title}}</title><h1>{{heading}}</h1></html>';\n\n      mockPath.join.mockReturnValue(templatePath);\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue(templateContent);\n\n      const variables = { title: '', heading: 'Not Empty' };\n      const result = loadTemplate(templateName, variables);\n\n      expect(result).toBe('<html><title></title><h1>Not Empty</h1></html>');\n    });\n\n    it('should verify template replacement behavior', () => {\n      const templateName = 'malformed-template';\n      const templatePath = '/app/ui/templates/malformed-template.html';\n      const templateContent = '<html><title>{title}</title><h1>{{title}</h1><p>{{title</p></html>';\n\n      mockPath.join.mockReturnValue(templatePath);\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.readFileSync.mockReturnValue(templateContent);\n\n      const variables = { title: 'Test Title' };\n      const result = loadTemplate(templateName, variables);\n\n      // Just test that the template loading process works with various patterns\n      expect(result).toContain('{title}'); // Single braces not replaced\n      expect(result).toContain('{{title'); // Incomplete pattern exists\n      expect(typeof result).toBe('string'); // Function returns a string\n      expect(result.length).toBeGreaterThan(0); // Result is not empty\n    });\n  });\n});\n"],"version":3}