5f1d5faa9519bb27f8ac2450b53c343c
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Mock electron before importing template-loader
jest.mock('electron', () => ({
    app: {
        isPackaged: false,
    },
}));
// Mock fs module
jest.mock('fs');
// Mock path module
jest.mock('path');
/**
 * @file Tests for template-loader.ts
 */
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const template_loader_1 = require("../../app/ui/template-loader");
const mockFs = fs;
const mockPath = path;
describe('template-loader', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    describe('loadTemplate', () => {
        it('should load template file successfully', () => {
            const templateName = 'test-template';
            const templatePath = '/app/ui/templates/test-template.html';
            const templateContent = '<html><title>{{title}}</title><body><h1>{{heading}}</h1></body></html>';
            mockPath.join.mockReturnValue(templatePath);
            mockFs.existsSync.mockReturnValue(true);
            mockFs.readFileSync.mockReturnValue(templateContent);
            const variables = { title: 'Test Title', heading: 'Test Heading' };
            const result = (0, template_loader_1.loadTemplate)(templateName, variables);
            expect(mockPath.join).toHaveBeenCalledWith(expect.any(String), 'templates', 'test-template.html');
            expect(mockFs.existsSync).toHaveBeenCalledWith(templatePath);
            expect(mockFs.readFileSync).toHaveBeenCalledWith(templatePath, 'utf8');
            expect(result).toBe('<html><title>Test Title</title><body><h1>Test Heading</h1></body></html>');
        });
        it('should load template without variables', () => {
            const templateName = 'simple-template';
            const templatePath = '/app/ui/templates/simple-template.html';
            const templateContent = '<html><title>Static Title</title></html>';
            mockPath.join.mockReturnValue(templatePath);
            mockFs.existsSync.mockReturnValue(true);
            mockFs.readFileSync.mockReturnValue(templateContent);
            const result = (0, template_loader_1.loadTemplate)(templateName);
            expect(result).toBe('<html><title>Static Title</title></html>');
        });
        it('should replace multiple occurrences of the same variable', () => {
            const templateName = 'multi-var-template';
            const templatePath = '/app/ui/templates/multi-var-template.html';
            const templateContent = '<html><title>{{name}}</title><body><h1>{{name}}</h1><p>Welcome to {{name}}</p></body></html>';
            mockPath.join.mockReturnValue(templatePath);
            mockFs.existsSync.mockReturnValue(true);
            mockFs.readFileSync.mockReturnValue(templateContent);
            const variables = { name: 'My App' };
            const result = (0, template_loader_1.loadTemplate)(templateName, variables);
            expect(result).toBe('<html><title>My App</title><body><h1>My App</h1><p>Welcome to My App</p></body></html>');
        });
        it('should leave unreplaced variables in template', () => {
            const templateName = 'partial-template';
            const templatePath = '/app/ui/templates/partial-template.html';
            const templateContent = '<html><title>{{title}}</title><body><h1>{{heading}}</h1></body></html>';
            mockPath.join.mockReturnValue(templatePath);
            mockFs.existsSync.mockReturnValue(true);
            mockFs.readFileSync.mockReturnValue(templateContent);
            const variables = { title: 'Test Title' }; // Only provide one variable
            const result = (0, template_loader_1.loadTemplate)(templateName, variables);
            expect(result).toBe('<html><title>Test Title</title><body><h1>{{heading}}</h1></body></html>');
        });
        it('should handle empty variables object', () => {
            const templateName = 'no-vars-template';
            const templatePath = '/app/ui/templates/no-vars-template.html';
            const templateContent = '<html><title>{{title}}</title></html>';
            mockPath.join.mockReturnValue(templatePath);
            mockFs.existsSync.mockReturnValue(true);
            mockFs.readFileSync.mockReturnValue(templateContent);
            const result = (0, template_loader_1.loadTemplate)(templateName, {});
            expect(result).toBe('<html><title>{{title}}</title></html>');
        });
        it('should throw error when template file does not exist', () => {
            const templateName = 'missing-template';
            const templatePath = '/app/ui/templates/missing-template.html';
            mockPath.join.mockReturnValue(templatePath);
            mockFs.existsSync.mockReturnValue(false);
            const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            expect(() => (0, template_loader_1.loadTemplate)(templateName)).toThrow('Template file not found: /app/ui/templates/missing-template.html');
            consoleSpy.mockRestore();
        });
        it('should throw error when file read fails', () => {
            const templateName = 'read-error-template';
            const templatePath = '/app/ui/templates/read-error-template.html';
            const readError = new Error('Permission denied');
            mockPath.join.mockReturnValue(templatePath);
            mockFs.existsSync.mockReturnValue(true);
            mockFs.readFileSync.mockImplementation(() => {
                throw readError;
            });
            const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            expect(() => (0, template_loader_1.loadTemplate)(templateName)).toThrow('Permission denied');
            consoleSpy.mockRestore();
        });
        it('should handle special characters in variables', () => {
            const templateName = 'special-chars-template';
            const templatePath = '/app/ui/templates/special-chars-template.html';
            const templateContent = '<html><title>{{title}}</title><meta content="{{description}}"></html>';
            mockPath.join.mockReturnValue(templatePath);
            mockFs.existsSync.mockReturnValue(true);
            mockFs.readFileSync.mockReturnValue(templateContent);
            const variables = {
                title: 'Test & <Special> "Characters"',
                description: 'A test with special chars: &<>"\'`',
            };
            const result = (0, template_loader_1.loadTemplate)(templateName, variables);
            expect(result).toBe('<html><title>Test & <Special> "Characters"</title><meta content="A test with special chars: &<>"\'`"></html>');
        });
    });
    describe('loadTemplateAsDataUrl', () => {
        it('should return proper data URL', () => {
            const templateName = 'data-url-template';
            const templatePath = '/app/ui/templates/data-url-template.html';
            const templateContent = '<html><title>{{title}}</title></html>';
            mockPath.join.mockReturnValue(templatePath);
            mockFs.existsSync.mockReturnValue(true);
            mockFs.readFileSync.mockReturnValue(templateContent);
            const variables = { title: 'Data URL Test' };
            const result = (0, template_loader_1.loadTemplateAsDataUrl)(templateName, variables);
            const expectedHtml = '<html><title>Data URL Test</title></html>';
            const expectedDataUrl = `data:text/html;charset=utf-8,${encodeURIComponent(expectedHtml)}`;
            expect(result).toBe(expectedDataUrl);
        });
        it('should return proper data URL without variables', () => {
            const templateName = 'simple-data-url-template';
            const templatePath = '/app/ui/templates/simple-data-url-template.html';
            const templateContent = '<html><title>Static</title></html>';
            mockPath.join.mockReturnValue(templatePath);
            mockFs.existsSync.mockReturnValue(true);
            mockFs.readFileSync.mockReturnValue(templateContent);
            const result = (0, template_loader_1.loadTemplateAsDataUrl)(templateName);
            const expectedDataUrl = `data:text/html;charset=utf-8,${encodeURIComponent(templateContent)}`;
            expect(result).toBe(expectedDataUrl);
        });
        it('should properly encode special characters in data URL', () => {
            const templateName = 'special-encoding-template';
            const templatePath = '/app/ui/templates/special-encoding-template.html';
            const templateContent = '<html><title>{{title}}</title></html>';
            mockPath.join.mockReturnValue(templatePath);
            mockFs.existsSync.mockReturnValue(true);
            mockFs.readFileSync.mockReturnValue(templateContent);
            const variables = { title: 'Test & <Special> Characters 🚀' };
            const result = (0, template_loader_1.loadTemplateAsDataUrl)(templateName, variables);
            const expectedHtml = '<html><title>Test & <Special> Characters 🚀</title></html>';
            const expectedDataUrl = `data:text/html;charset=utf-8,${encodeURIComponent(expectedHtml)}`;
            expect(result).toBe(expectedDataUrl);
            expect(result).toContain('Test%20%26%20%3CSpecial%3E%20Characters%20%F0%9F%9A%80');
        });
        it('should handle loadTemplate errors', () => {
            const templateName = 'error-template';
            const templatePath = '/app/ui/templates/error-template.html';
            mockPath.join.mockReturnValue(templatePath);
            mockFs.existsSync.mockReturnValue(false);
            const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            expect(() => (0, template_loader_1.loadTemplateAsDataUrl)(templateName)).toThrow('Template file not found: /app/ui/templates/error-template.html');
            consoleSpy.mockRestore();
        });
    });
    describe('edge cases', () => {
        it('should handle empty template content', () => {
            const templateName = 'empty-template';
            const templatePath = '/app/ui/templates/empty-template.html';
            const templateContent = '';
            mockPath.join.mockReturnValue(templatePath);
            mockFs.existsSync.mockReturnValue(true);
            mockFs.readFileSync.mockReturnValue(templateContent);
            const result = (0, template_loader_1.loadTemplate)(templateName);
            expect(result).toBe('');
        });
        it('should handle template names with special characters', () => {
            const templateName = 'template-with-dashes_and_underscores';
            const templatePath = '/app/ui/templates/template-with-dashes_and_underscores.html';
            const templateContent = '<html></html>';
            mockPath.join.mockReturnValue(templatePath);
            mockFs.existsSync.mockReturnValue(true);
            mockFs.readFileSync.mockReturnValue(templateContent);
            const result = (0, template_loader_1.loadTemplate)(templateName);
            expect(mockPath.join).toHaveBeenCalledWith(expect.any(String), 'templates', 'template-with-dashes_and_underscores.html');
            expect(result).toBe('<html></html>');
        });
        it('should handle variables with empty string values', () => {
            const templateName = 'empty-var-template';
            const templatePath = '/app/ui/templates/empty-var-template.html';
            const templateContent = '<html><title>{{title}}</title><h1>{{heading}}</h1></html>';
            mockPath.join.mockReturnValue(templatePath);
            mockFs.existsSync.mockReturnValue(true);
            mockFs.readFileSync.mockReturnValue(templateContent);
            const variables = { title: '', heading: 'Not Empty' };
            const result = (0, template_loader_1.loadTemplate)(templateName, variables);
            expect(result).toBe('<html><title></title><h1>Not Empty</h1></html>');
        });
        it('should verify template replacement behavior', () => {
            const templateName = 'malformed-template';
            const templatePath = '/app/ui/templates/malformed-template.html';
            const templateContent = '<html><title>{title}</title><h1>{{title}</h1><p>{{title</p></html>';
            mockPath.join.mockReturnValue(templatePath);
            mockFs.existsSync.mockReturnValue(true);
            mockFs.readFileSync.mockReturnValue(templateContent);
            const variables = { title: 'Test Title' };
            const result = (0, template_loader_1.loadTemplate)(templateName, variables);
            // Just test that the template loading process works with various patterns
            expect(result).toContain('{title}'); // Single braces not replaced
            expect(result).toContain('{{title'); // Incomplete pattern exists
            expect(typeof result).toBe('string'); // Function returns a string
            expect(result.length).toBeGreaterThan(0); // Result is not empty
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2R3ay9EZXZlbG9wZXIvZ2l0bGFiLmNvbS9kYXZpZHdrZWl0aC9AZHdrL2FuZ2xlc2l0ZS90ZXN0L3VpL3RlbXBsYXRlLWxvYWRlci50ZXN0LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBTUEsaURBQWlEO0FBQ2pELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDM0IsR0FBRyxFQUFFO1FBQ0gsVUFBVSxFQUFFLEtBQUs7S0FDbEI7Q0FDRixDQUFDLENBQUMsQ0FBQztBQUlKLGlCQUFpQjtBQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBR2hCLG1CQUFtQjtBQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBcEJsQjs7R0FFRztBQUNILHVDQUF5QjtBQUN6QiwyQ0FBNkI7QUFTN0Isa0VBQW1GO0FBSW5GLE1BQU0sTUFBTSxHQUFHLEVBQTRCLENBQUM7QUFJNUMsTUFBTSxRQUFRLEdBQUcsSUFBZ0MsQ0FBQztBQUVsRCxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO0lBQy9CLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtRQUM1QixFQUFFLENBQUMsd0NBQXdDLEVBQUUsR0FBRyxFQUFFO1lBQ2hELE1BQU0sWUFBWSxHQUFHLGVBQWUsQ0FBQztZQUNyQyxNQUFNLFlBQVksR0FBRyxzQ0FBc0MsQ0FBQztZQUM1RCxNQUFNLGVBQWUsR0FBRyx3RUFBd0UsQ0FBQztZQUVqRyxRQUFRLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUM1QyxNQUFNLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4QyxNQUFNLENB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TUFBTSxDQUFDLE9BQU8sTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsNEJBQTRCO1lBQ2xFLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCO1FBQ2xFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZHdrL0RldmVsb3Blci9naXRsYWIuY29tL2Rhdmlkd2tlaXRoL0Bkd2svYW5nbGVzaXRlL3Rlc3QvdWkvdGVtcGxhdGUtbG9hZGVyLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBUZXN0cyBmb3IgdGVtcGxhdGUtbG9hZGVyLnRzXG4gKi9cbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5cbi8vIE1vY2sgZWxlY3Ryb24gYmVmb3JlIGltcG9ydGluZyB0ZW1wbGF0ZS1sb2FkZXJcbmplc3QubW9jaygnZWxlY3Ryb24nLCAoKSA9PiAoe1xuICBhcHA6IHtcbiAgICBpc1BhY2thZ2VkOiBmYWxzZSxcbiAgfSxcbn0pKTtcblxuaW1wb3J0IHsgbG9hZFRlbXBsYXRlLCBsb2FkVGVtcGxhdGVBc0RhdGFVcmwgfSBmcm9tICcuLi8uLi9hcHAvdWkvdGVtcGxhdGUtbG9hZGVyJztcblxuLy8gTW9jayBmcyBtb2R1bGVcbmplc3QubW9jaygnZnMnKTtcbmNvbnN0IG1vY2tGcyA9IGZzIGFzIGplc3QuTW9ja2VkPHR5cGVvZiBmcz47XG5cbi8vIE1vY2sgcGF0aCBtb2R1bGVcbmplc3QubW9jaygncGF0aCcpO1xuY29uc3QgbW9ja1BhdGggPSBwYXRoIGFzIGplc3QuTW9ja2VkPHR5cGVvZiBwYXRoPjtcblxuZGVzY3JpYmUoJ3RlbXBsYXRlLWxvYWRlcicsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdsb2FkVGVtcGxhdGUnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBsb2FkIHRlbXBsYXRlIGZpbGUgc3VjY2Vzc2Z1bGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgdGVtcGxhdGVOYW1lID0gJ3Rlc3QtdGVtcGxhdGUnO1xuICAgICAgY29uc3QgdGVtcGxhdGVQYXRoID0gJy9hcHAvdWkvdGVtcGxhdGVzL3Rlc3QtdGVtcGxhdGUuaHRtbCc7XG4gICAgICBjb25zdCB0ZW1wbGF0ZUNvbnRlbnQgPSAnPGh0bWw+PHRpdGxlPnt7dGl0bGV9fTwvdGl0bGU+PGJvZHk+PGgxPnt7aGVhZGluZ319PC9oMT48L2JvZHk+PC9odG1sPic7XG5cbiAgICAgIG1vY2tQYXRoLmpvaW4ubW9ja1JldHVyblZhbHVlKHRlbXBsYXRlUGF0aCk7XG4gICAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrUmV0dXJuVmFsdWUodHJ1ZSk7XG4gICAgICBtb2NrRnMucmVhZEZpbGVTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0ZW1wbGF0ZUNvbnRlbnQpO1xuXG4gICAgICBjb25zdCB2YXJpYWJsZXMgPSB7IHRpdGxlOiAnVGVzdCBUaXRsZScsIGhlYWRpbmc6ICdUZXN0IEhlYWRpbmcnIH07XG4gICAgICBjb25zdCByZXN1bHQgPSBsb2FkVGVtcGxhdGUodGVtcGxhdGVOYW1lLCB2YXJpYWJsZXMpO1xuXG4gICAgICBleHBlY3QobW9ja1BhdGguam9pbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoZXhwZWN0LmFueShTdHJpbmcpLCAndGVtcGxhdGVzJywgJ3Rlc3QtdGVtcGxhdGUuaHRtbCcpO1xuICAgICAgZXhwZWN0KG1vY2tGcy5leGlzdHNTeW5jKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh0ZW1wbGF0ZVBhdGgpO1xuICAgICAgZXhwZWN0KG1vY2tGcy5yZWFkRmlsZVN5bmMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHRlbXBsYXRlUGF0aCwgJ3V0ZjgnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoJzxodG1sPjx0aXRsZT5UZXN0IFRpdGxlPC90aXRsZT48Ym9keT48aDE+VGVzdCBIZWFkaW5nPC9oMT48L2JvZHk+PC9odG1sPicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBsb2FkIHRlbXBsYXRlIHdpdGhvdXQgdmFyaWFibGVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgdGVtcGxhdGVOYW1lID0gJ3NpbXBsZS10ZW1wbGF0ZSc7XG4gICAgICBjb25zdCB0ZW1wbGF0ZVBhdGggPSAnL2FwcC91aS90ZW1wbGF0ZXMvc2ltcGxlLXRlbXBsYXRlLmh0bWwnO1xuICAgICAgY29uc3QgdGVtcGxhdGVDb250ZW50ID0gJzxodG1sPjx0aXRsZT5TdGF0aWMgVGl0bGU8L3RpdGxlPjwvaHRtbD4nO1xuXG4gICAgICBtb2NrUGF0aC5qb2luLm1vY2tSZXR1cm5WYWx1ZSh0ZW1wbGF0ZVBhdGgpO1xuICAgICAgbW9ja0ZzLmV4aXN0c1N5bmMubW9ja1JldHVyblZhbHVlKHRydWUpO1xuICAgICAgbW9ja0ZzLnJlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUodGVtcGxhdGVDb250ZW50KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gbG9hZFRlbXBsYXRlKHRlbXBsYXRlTmFtZSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoJzxodG1sPjx0aXRsZT5TdGF0aWMgVGl0bGU8L3RpdGxlPjwvaHRtbD4nKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVwbGFjZSBtdWx0aXBsZSBvY2N1cnJlbmNlcyBvZiB0aGUgc2FtZSB2YXJpYWJsZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHRlbXBsYXRlTmFtZSA9ICdtdWx0aS12YXItdGVtcGxhdGUnO1xuICAgICAgY29uc3QgdGVtcGxhdGVQYXRoID0gJy9hcHAvdWkvdGVtcGxhdGVzL211bHRpLXZhci10ZW1wbGF0ZS5odG1sJztcbiAgICAgIGNvbnN0IHRlbXBsYXRlQ29udGVudCA9XG4gICAgICAgICc8aHRtbD48dGl0bGU+e3tuYW1lfX08L3RpdGxlPjxib2R5PjxoMT57e25hbWV9fTwvaDE+PHA+V2VsY29tZSB0byB7e25hbWV9fTwvcD48L2JvZHk+PC9odG1sPic7XG5cbiAgICAgIG1vY2tQYXRoLmpvaW4ubW9ja1JldHVyblZhbHVlKHRlbXBsYXRlUGF0aCk7XG4gICAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrUmV0dXJuVmFsdWUodHJ1ZSk7XG4gICAgICBtb2NrRnMucmVhZEZpbGVTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0ZW1wbGF0ZUNvbnRlbnQpO1xuXG4gICAgICBjb25zdCB2YXJpYWJsZXMgPSB7IG5hbWU6ICdNeSBBcHAnIH07XG4gICAgICBjb25zdCByZXN1bHQgPSBsb2FkVGVtcGxhdGUodGVtcGxhdGVOYW1lLCB2YXJpYWJsZXMpO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKCc8aHRtbD48dGl0bGU+TXkgQXBwPC90aXRsZT48Ym9keT48aDE+TXkgQXBwPC9oMT48cD5XZWxjb21lIHRvIE15IEFwcDwvcD48L2JvZHk+PC9odG1sPicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBsZWF2ZSB1bnJlcGxhY2VkIHZhcmlhYmxlcyBpbiB0ZW1wbGF0ZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHRlbXBsYXRlTmFtZSA9ICdwYXJ0aWFsLXRlbXBsYXRlJztcbiAgICAgIGNvbnN0IHRlbXBsYXRlUGF0aCA9ICcvYXBwL3VpL3RlbXBsYXRlcy9wYXJ0aWFsLXRlbXBsYXRlLmh0bWwnO1xuICAgICAgY29uc3QgdGVtcGxhdGVDb250ZW50ID0gJzxodG1sPjx0aXRsZT57e3RpdGxlfX08L3RpdGxlPjxib2R5PjxoMT57e2hlYWRpbmd9fTwvaDE+PC9ib2R5PjwvaHRtbD4nO1xuXG4gICAgICBtb2NrUGF0aC5qb2luLm1vY2tSZXR1cm5WYWx1ZSh0ZW1wbGF0ZVBhdGgpO1xuICAgICAgbW9ja0ZzLmV4aXN0c1N5bmMubW9ja1JldHVyblZhbHVlKHRydWUpO1xuICAgICAgbW9ja0ZzLnJlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUodGVtcGxhdGVDb250ZW50KTtcblxuICAgICAgY29uc3QgdmFyaWFibGVzID0geyB0aXRsZTogJ1Rlc3QgVGl0bGUnIH07IC8vIE9ubHkgcHJvdmlkZSBvbmUgdmFyaWFibGVcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGxvYWRUZW1wbGF0ZSh0ZW1wbGF0ZU5hbWUsIHZhcmlhYmxlcyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoJzxodG1sPjx0aXRsZT5UZXN0IFRpdGxlPC90aXRsZT48Ym9keT48aDE+e3toZWFkaW5nfX08L2gxPjwvYm9keT48L2h0bWw+Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBlbXB0eSB2YXJpYWJsZXMgb2JqZWN0JywgKCkgPT4ge1xuICAgICAgY29uc3QgdGVtcGxhdGVOYW1lID0gJ25vLXZhcnMtdGVtcGxhdGUnO1xuICAgICAgY29uc3QgdGVtcGxhdGVQYXRoID0gJy9hcHAvdWkvdGVtcGxhdGVzL25vLXZhcnMtdGVtcGxhdGUuaHRtbCc7XG4gICAgICBjb25zdCB0ZW1wbGF0ZUNvbnRlbnQgPSAnPGh0bWw+PHRpdGxlPnt7dGl0bGV9fTwvdGl0bGU+PC9odG1sPic7XG5cbiAgICAgIG1vY2tQYXRoLmpvaW4ubW9ja1JldHVyblZhbHVlKHRlbXBsYXRlUGF0aCk7XG4gICAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrUmV0dXJuVmFsdWUodHJ1ZSk7XG4gICAgICBtb2NrRnMucmVhZEZpbGVTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0ZW1wbGF0ZUNvbnRlbnQpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBsb2FkVGVtcGxhdGUodGVtcGxhdGVOYW1lLCB7fSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoJzxodG1sPjx0aXRsZT57e3RpdGxlfX08L3RpdGxlPjwvaHRtbD4nKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3Igd2hlbiB0ZW1wbGF0ZSBmaWxlIGRvZXMgbm90IGV4aXN0JywgKCkgPT4ge1xuICAgICAgY29uc3QgdGVtcGxhdGVOYW1lID0gJ21pc3NpbmctdGVtcGxhdGUnO1xuICAgICAgY29uc3QgdGVtcGxhdGVQYXRoID0gJy9hcHAvdWkvdGVtcGxhdGVzL21pc3NpbmctdGVtcGxhdGUuaHRtbCc7XG5cbiAgICAgIG1vY2tQYXRoLmpvaW4ubW9ja1JldHVyblZhbHVlKHRlbXBsYXRlUGF0aCk7XG4gICAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrUmV0dXJuVmFsdWUoZmFsc2UpO1xuXG4gICAgICBjb25zdCBjb25zb2xlU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCAnZXJyb3InKS5tb2NrSW1wbGVtZW50YXRpb24oKTtcblxuICAgICAgZXhwZWN0KCgpID0+IGxvYWRUZW1wbGF0ZSh0ZW1wbGF0ZU5hbWUpKS50b1Rocm93KFxuICAgICAgICAnVGVtcGxhdGUgZmlsZSBub3QgZm91bmQ6IC9hcHAvdWkvdGVtcGxhdGVzL21pc3NpbmctdGVtcGxhdGUuaHRtbCdcbiAgICAgICk7XG5cbiAgICAgIGNvbnNvbGVTcHkubW9ja1Jlc3RvcmUoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3Igd2hlbiBmaWxlIHJlYWQgZmFpbHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB0ZW1wbGF0ZU5hbWUgPSAncmVhZC1lcnJvci10ZW1wbGF0ZSc7XG4gICAgICBjb25zdCB0ZW1wbGF0ZVBhdGggPSAnL2FwcC91aS90ZW1wbGF0ZXMvcmVhZC1lcnJvci10ZW1wbGF0ZS5odG1sJztcbiAgICAgIGNvbnN0IHJlYWRFcnJvciA9IG5ldyBFcnJvcignUGVybWlzc2lvbiBkZW5pZWQnKTtcblxuICAgICAgbW9ja1BhdGguam9pbi5tb2NrUmV0dXJuVmFsdWUodGVtcGxhdGVQYXRoKTtcbiAgICAgIG1vY2tGcy5leGlzdHNTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKTtcbiAgICAgIG1vY2tGcy5yZWFkRmlsZVN5bmMubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcbiAgICAgICAgdGhyb3cgcmVhZEVycm9yO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGNvbnNvbGVTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdlcnJvcicpLm1vY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgICBleHBlY3QoKCkgPT4gbG9hZFRlbXBsYXRlKHRlbXBsYXRlTmFtZSkpLnRvVGhyb3coJ1Blcm1pc3Npb24gZGVuaWVkJyk7XG5cbiAgICAgIGNvbnNvbGVTcHkubW9ja1Jlc3RvcmUoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHNwZWNpYWwgY2hhcmFjdGVycyBpbiB2YXJpYWJsZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB0ZW1wbGF0ZU5hbWUgPSAnc3BlY2lhbC1jaGFycy10ZW1wbGF0ZSc7XG4gICAgICBjb25zdCB0ZW1wbGF0ZVBhdGggPSAnL2FwcC91aS90ZW1wbGF0ZXMvc3BlY2lhbC1jaGFycy10ZW1wbGF0ZS5odG1sJztcbiAgICAgIGNvbnN0IHRlbXBsYXRlQ29udGVudCA9ICc8aHRtbD48dGl0bGU+e3t0aXRsZX19PC90aXRsZT48bWV0YSBjb250ZW50PVwie3tkZXNjcmlwdGlvbn19XCI+PC9odG1sPic7XG5cbiAgICAgIG1vY2tQYXRoLmpvaW4ubW9ja1JldHVyblZhbHVlKHRlbXBsYXRlUGF0aCk7XG4gICAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrUmV0dXJuVmFsdWUodHJ1ZSk7XG4gICAgICBtb2NrRnMucmVhZEZpbGVTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0ZW1wbGF0ZUNvbnRlbnQpO1xuXG4gICAgICBjb25zdCB2YXJpYWJsZXMgPSB7XG4gICAgICAgIHRpdGxlOiAnVGVzdCAmIDxTcGVjaWFsPiBcIkNoYXJhY3RlcnNcIicsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQSB0ZXN0IHdpdGggc3BlY2lhbCBjaGFyczogJjw+XCJcXCdgJyxcbiAgICAgIH07XG4gICAgICBjb25zdCByZXN1bHQgPSBsb2FkVGVtcGxhdGUodGVtcGxhdGVOYW1lLCB2YXJpYWJsZXMpO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKFxuICAgICAgICAnPGh0bWw+PHRpdGxlPlRlc3QgJiA8U3BlY2lhbD4gXCJDaGFyYWN0ZXJzXCI8L3RpdGxlPjxtZXRhIGNvbnRlbnQ9XCJBIHRlc3Qgd2l0aCBzcGVjaWFsIGNoYXJzOiAmPD5cIlxcJ2BcIj48L2h0bWw+J1xuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2xvYWRUZW1wbGF0ZUFzRGF0YVVybCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBwcm9wZXIgZGF0YSBVUkwnLCAoKSA9PiB7XG4gICAgICBjb25zdCB0ZW1wbGF0ZU5hbWUgPSAnZGF0YS11cmwtdGVtcGxhdGUnO1xuICAgICAgY29uc3QgdGVtcGxhdGVQYXRoID0gJy9hcHAvdWkvdGVtcGxhdGVzL2RhdGEtdXJsLXRlbXBsYXRlLmh0bWwnO1xuICAgICAgY29uc3QgdGVtcGxhdGVDb250ZW50ID0gJzxodG1sPjx0aXRsZT57e3RpdGxlfX08L3RpdGxlPjwvaHRtbD4nO1xuXG4gICAgICBtb2NrUGF0aC5qb2luLm1vY2tSZXR1cm5WYWx1ZSh0ZW1wbGF0ZVBhdGgpO1xuICAgICAgbW9ja0ZzLmV4aXN0c1N5bmMubW9ja1JldHVyblZhbHVlKHRydWUpO1xuICAgICAgbW9ja0ZzLnJlYWRGaWxlU3luYy5tb2NrUmV0dXJuVmFsdWUodGVtcGxhdGVDb250ZW50KTtcblxuICAgICAgY29uc3QgdmFyaWFibGVzID0geyB0aXRsZTogJ0RhdGEgVVJMIFRlc3QnIH07XG4gICAgICBjb25zdCByZXN1bHQgPSBsb2FkVGVtcGxhdGVBc0RhdGFVcmwodGVtcGxhdGVOYW1lLCB2YXJpYWJsZXMpO1xuXG4gICAgICBjb25zdCBleHBlY3RlZEh0bWwgPSAnPGh0bWw+PHRpdGxlPkRhdGEgVVJMIFRlc3Q8L3RpdGxlPjwvaHRtbD4nO1xuICAgICAgY29uc3QgZXhwZWN0ZWREYXRhVXJsID0gYGRhdGE6dGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgsJHtlbmNvZGVVUklDb21wb25lbnQoZXhwZWN0ZWRIdG1sKX1gO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKGV4cGVjdGVkRGF0YVVybCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBwcm9wZXIgZGF0YSBVUkwgd2l0aG91dCB2YXJpYWJsZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB0ZW1wbGF0ZU5hbWUgPSAnc2ltcGxlLWRhdGEtdXJsLXRlbXBsYXRlJztcbiAgICAgIGNvbnN0IHRlbXBsYXRlUGF0aCA9ICcvYXBwL3VpL3RlbXBsYXRlcy9zaW1wbGUtZGF0YS11cmwtdGVtcGxhdGUuaHRtbCc7XG4gICAgICBjb25zdCB0ZW1wbGF0ZUNvbnRlbnQgPSAnPGh0bWw+PHRpdGxlPlN0YXRpYzwvdGl0bGU+PC9odG1sPic7XG5cbiAgICAgIG1vY2tQYXRoLmpvaW4ubW9ja1JldHVyblZhbHVlKHRlbXBsYXRlUGF0aCk7XG4gICAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrUmV0dXJuVmFsdWUodHJ1ZSk7XG4gICAgICBtb2NrRnMucmVhZEZpbGVTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0ZW1wbGF0ZUNvbnRlbnQpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBsb2FkVGVtcGxhdGVBc0RhdGFVcmwodGVtcGxhdGVOYW1lKTtcblxuICAgICAgY29uc3QgZXhwZWN0ZWREYXRhVXJsID0gYGRhdGE6dGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgsJHtlbmNvZGVVUklDb21wb25lbnQodGVtcGxhdGVDb250ZW50KX1gO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKGV4cGVjdGVkRGF0YVVybCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHByb3Blcmx5IGVuY29kZSBzcGVjaWFsIGNoYXJhY3RlcnMgaW4gZGF0YSBVUkwnLCAoKSA9PiB7XG4gICAgICBjb25zdCB0ZW1wbGF0ZU5hbWUgPSAnc3BlY2lhbC1lbmNvZGluZy10ZW1wbGF0ZSc7XG4gICAgICBjb25zdCB0ZW1wbGF0ZVBhdGggPSAnL2FwcC91aS90ZW1wbGF0ZXMvc3BlY2lhbC1lbmNvZGluZy10ZW1wbGF0ZS5odG1sJztcbiAgICAgIGNvbnN0IHRlbXBsYXRlQ29udGVudCA9ICc8aHRtbD48dGl0bGU+e3t0aXRsZX19PC90aXRsZT48L2h0bWw+JztcblxuICAgICAgbW9ja1BhdGguam9pbi5tb2NrUmV0dXJuVmFsdWUodGVtcGxhdGVQYXRoKTtcbiAgICAgIG1vY2tGcy5leGlzdHNTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKTtcbiAgICAgIG1vY2tGcy5yZWFkRmlsZVN5bmMubW9ja1JldHVyblZhbHVlKHRlbXBsYXRlQ29udGVudCk7XG5cbiAgICAgIGNvbnN0IHZhcmlhYmxlcyA9IHsgdGl0bGU6ICdUZXN0ICYgPFNwZWNpYWw+IENoYXJhY3RlcnMg8J+agCcgfTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGxvYWRUZW1wbGF0ZUFzRGF0YVVybCh0ZW1wbGF0ZU5hbWUsIHZhcmlhYmxlcyk7XG5cbiAgICAgIGNvbnN0IGV4cGVjdGVkSHRtbCA9ICc8aHRtbD48dGl0bGU+VGVzdCAmIDxTcGVjaWFsPiBDaGFyYWN0ZXJzIPCfmoA8L3RpdGxlPjwvaHRtbD4nO1xuICAgICAgY29uc3QgZXhwZWN0ZWREYXRhVXJsID0gYGRhdGE6dGV4dC9odG1sO2NoYXJzZXQ9dXRmLTgsJHtlbmNvZGVVUklDb21wb25lbnQoZXhwZWN0ZWRIdG1sKX1gO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKGV4cGVjdGVkRGF0YVVybCk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0NvbnRhaW4oJ1Rlc3QlMjAlMjYlMjAlM0NTcGVjaWFsJTNFJTIwQ2hhcmFjdGVycyUyMCVGMCU5RiU5QSU4MCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbG9hZFRlbXBsYXRlIGVycm9ycycsICgpID0+IHtcbiAgICAgIGNvbnN0IHRlbXBsYXRlTmFtZSA9ICdlcnJvci10ZW1wbGF0ZSc7XG4gICAgICBjb25zdCB0ZW1wbGF0ZVBhdGggPSAnL2FwcC91aS90ZW1wbGF0ZXMvZXJyb3ItdGVtcGxhdGUuaHRtbCc7XG5cbiAgICAgIG1vY2tQYXRoLmpvaW4ubW9ja1JldHVyblZhbHVlKHRlbXBsYXRlUGF0aCk7XG4gICAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrUmV0dXJuVmFsdWUoZmFsc2UpO1xuXG4gICAgICBjb25zdCBjb25zb2xlU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCAnZXJyb3InKS5tb2NrSW1wbGVtZW50YXRpb24oKTtcblxuICAgICAgZXhwZWN0KCgpID0+IGxvYWRUZW1wbGF0ZUFzRGF0YVVybCh0ZW1wbGF0ZU5hbWUpKS50b1Rocm93KFxuICAgICAgICAnVGVtcGxhdGUgZmlsZSBub3QgZm91bmQ6IC9hcHAvdWkvdGVtcGxhdGVzL2Vycm9yLXRlbXBsYXRlLmh0bWwnXG4gICAgICApO1xuXG4gICAgICBjb25zb2xlU3B5Lm1vY2tSZXN0b3JlKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdlZGdlIGNhc2VzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIGVtcHR5IHRlbXBsYXRlIGNvbnRlbnQnLCAoKSA9PiB7XG4gICAgICBjb25zdCB0ZW1wbGF0ZU5hbWUgPSAnZW1wdHktdGVtcGxhdGUnO1xuICAgICAgY29uc3QgdGVtcGxhdGVQYXRoID0gJy9hcHAvdWkvdGVtcGxhdGVzL2VtcHR5LXRlbXBsYXRlLmh0bWwnO1xuICAgICAgY29uc3QgdGVtcGxhdGVDb250ZW50ID0gJyc7XG5cbiAgICAgIG1vY2tQYXRoLmpvaW4ubW9ja1JldHVyblZhbHVlKHRlbXBsYXRlUGF0aCk7XG4gICAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrUmV0dXJuVmFsdWUodHJ1ZSk7XG4gICAgICBtb2NrRnMucmVhZEZpbGVTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0ZW1wbGF0ZUNvbnRlbnQpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBsb2FkVGVtcGxhdGUodGVtcGxhdGVOYW1lKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSgnJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB0ZW1wbGF0ZSBuYW1lcyB3aXRoIHNwZWNpYWwgY2hhcmFjdGVycycsICgpID0+IHtcbiAgICAgIGNvbnN0IHRlbXBsYXRlTmFtZSA9ICd0ZW1wbGF0ZS13aXRoLWRhc2hlc19hbmRfdW5kZXJzY29yZXMnO1xuICAgICAgY29uc3QgdGVtcGxhdGVQYXRoID0gJy9hcHAvdWkvdGVtcGxhdGVzL3RlbXBsYXRlLXdpdGgtZGFzaGVzX2FuZF91bmRlcnNjb3Jlcy5odG1sJztcbiAgICAgIGNvbnN0IHRlbXBsYXRlQ29udGVudCA9ICc8aHRtbD48L2h0bWw+JztcblxuICAgICAgbW9ja1BhdGguam9pbi5tb2NrUmV0dXJuVmFsdWUodGVtcGxhdGVQYXRoKTtcbiAgICAgIG1vY2tGcy5leGlzdHNTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKTtcbiAgICAgIG1vY2tGcy5yZWFkRmlsZVN5bmMubW9ja1JldHVyblZhbHVlKHRlbXBsYXRlQ29udGVudCk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGxvYWRUZW1wbGF0ZSh0ZW1wbGF0ZU5hbWUpO1xuXG4gICAgICBleHBlY3QobW9ja1BhdGguam9pbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGV4cGVjdC5hbnkoU3RyaW5nKSxcbiAgICAgICAgJ3RlbXBsYXRlcycsXG4gICAgICAgICd0ZW1wbGF0ZS13aXRoLWRhc2hlc19hbmRfdW5kZXJzY29yZXMuaHRtbCdcbiAgICAgICk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKCc8aHRtbD48L2h0bWw+Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB2YXJpYWJsZXMgd2l0aCBlbXB0eSBzdHJpbmcgdmFsdWVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgdGVtcGxhdGVOYW1lID0gJ2VtcHR5LXZhci10ZW1wbGF0ZSc7XG4gICAgICBjb25zdCB0ZW1wbGF0ZVBhdGggPSAnL2FwcC91aS90ZW1wbGF0ZXMvZW1wdHktdmFyLXRlbXBsYXRlLmh0bWwnO1xuICAgICAgY29uc3QgdGVtcGxhdGVDb250ZW50ID0gJzxodG1sPjx0aXRsZT57e3RpdGxlfX08L3RpdGxlPjxoMT57e2hlYWRpbmd9fTwvaDE+PC9odG1sPic7XG5cbiAgICAgIG1vY2tQYXRoLmpvaW4ubW9ja1JldHVyblZhbHVlKHRlbXBsYXRlUGF0aCk7XG4gICAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrUmV0dXJuVmFsdWUodHJ1ZSk7XG4gICAgICBtb2NrRnMucmVhZEZpbGVTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0ZW1wbGF0ZUNvbnRlbnQpO1xuXG4gICAgICBjb25zdCB2YXJpYWJsZXMgPSB7IHRpdGxlOiAnJywgaGVhZGluZzogJ05vdCBFbXB0eScgfTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGxvYWRUZW1wbGF0ZSh0ZW1wbGF0ZU5hbWUsIHZhcmlhYmxlcyk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoJzxodG1sPjx0aXRsZT48L3RpdGxlPjxoMT5Ob3QgRW1wdHk8L2gxPjwvaHRtbD4nKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdmVyaWZ5IHRlbXBsYXRlIHJlcGxhY2VtZW50IGJlaGF2aW9yJywgKCkgPT4ge1xuICAgICAgY29uc3QgdGVtcGxhdGVOYW1lID0gJ21hbGZvcm1lZC10ZW1wbGF0ZSc7XG4gICAgICBjb25zdCB0ZW1wbGF0ZVBhdGggPSAnL2FwcC91aS90ZW1wbGF0ZXMvbWFsZm9ybWVkLXRlbXBsYXRlLmh0bWwnO1xuICAgICAgY29uc3QgdGVtcGxhdGVDb250ZW50ID0gJzxodG1sPjx0aXRsZT57dGl0bGV9PC90aXRsZT48aDE+e3t0aXRsZX08L2gxPjxwPnt7dGl0bGU8L3A+PC9odG1sPic7XG5cbiAgICAgIG1vY2tQYXRoLmpvaW4ubW9ja1JldHVyblZhbHVlKHRlbXBsYXRlUGF0aCk7XG4gICAgICBtb2NrRnMuZXhpc3RzU3luYy5tb2NrUmV0dXJuVmFsdWUodHJ1ZSk7XG4gICAgICBtb2NrRnMucmVhZEZpbGVTeW5jLm1vY2tSZXR1cm5WYWx1ZSh0ZW1wbGF0ZUNvbnRlbnQpO1xuXG4gICAgICBjb25zdCB2YXJpYWJsZXMgPSB7IHRpdGxlOiAnVGVzdCBUaXRsZScgfTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGxvYWRUZW1wbGF0ZSh0ZW1wbGF0ZU5hbWUsIHZhcmlhYmxlcyk7XG5cbiAgICAgIC8vIEp1c3QgdGVzdCB0aGF0IHRoZSB0ZW1wbGF0ZSBsb2FkaW5nIHByb2Nlc3Mgd29ya3Mgd2l0aCB2YXJpb3VzIHBhdHRlcm5zXG4gICAgICBleHBlY3QocmVzdWx0KS50b0NvbnRhaW4oJ3t0aXRsZX0nKTsgLy8gU2luZ2xlIGJyYWNlcyBub3QgcmVwbGFjZWRcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQ29udGFpbigne3t0aXRsZScpOyAvLyBJbmNvbXBsZXRlIHBhdHRlcm4gZXhpc3RzXG4gICAgICBleHBlY3QodHlwZW9mIHJlc3VsdCkudG9CZSgnc3RyaW5nJyk7IC8vIEZ1bmN0aW9uIHJldHVybnMgYSBzdHJpbmdcbiAgICAgIGV4cGVjdChyZXN1bHQubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7IC8vIFJlc3VsdCBpcyBub3QgZW1wdHlcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==