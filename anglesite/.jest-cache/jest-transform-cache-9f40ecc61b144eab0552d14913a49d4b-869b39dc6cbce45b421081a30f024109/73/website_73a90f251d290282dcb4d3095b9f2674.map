{"version":3,"names":["exports","setupWebsiteHandlers","cov_1l60qk2fkv","s","openWebsiteInNewWindow","electron_1","require","fs","__importStar","util_1","window_manager_1","multi_window_manager_1","menu_1","service_registry_1","logging_1","container_1","rm","b","promises","rmdir","promisify","bind","f","Promise","resolve","exists","filePath","stat","ipcMain","on","event","win","BrowserWindow","fromWebContents","sender","console","error","websiteName","validationError","prompt","getNativeInput","appContext","getGlobalContext","websiteManager","getService","ServiceKeys","WEBSITE_MANAGER","validation","validateWebsiteNameAsync","valid","then","fallbackError","createNewWebsite","logger","sanitize","dialog","showMessageBox","type","title","message","detail","Error","String","buttons","handle","allWebsites","listWebsites","openWebsiteWindows","getAllWebsiteWindows","openWebsiteNames","Array","from","keys","availableWebsites","filter","includes","_","showErrorBox","position","contextMenu","Menu","window","append","MenuItem","label","click","send","popup","x","Math","round","y","name","validateWebsiteName","oldName","newName","success","renameWebsite","deleted","deleteWebsite","openWebsiteSelectionWindow","websiteCreated","newWebsitePath","createWebsite","diError","createWebsiteWithName","store","STORE","addRecentWebsite","updateApplicationMenu","recursive","force","cleanupError","existingPath","getWebsitePath","existsSync","openError","websitePath","isNewWebsite","actualWebsitePath","createWebsiteWindow","startWebsiteServerAndUpdateWindow"],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/ipc/website.ts"],"sourcesContent":["/**\n * @file DI-compatible IPC handlers for website management operations\n */\nimport { ipcMain, BrowserWindow, dialog, Menu, MenuItem } from 'electron';\nimport * as fs from 'fs';\nimport { promisify } from 'util';\nimport { getNativeInput, openWebsiteSelectionWindow } from '../ui/window-manager';\nimport {\n  createWebsiteWindow,\n  startWebsiteServerAndUpdateWindow,\n  getAllWebsiteWindows,\n} from '../ui/multi-window-manager';\nimport { updateApplicationMenu } from '../ui/menu';\nimport { getGlobalContext } from '../core/service-registry';\nimport { logger, sanitize } from '../utils/logging';\nimport { ServiceKeys } from '../core/container';\nimport { IWebsiteManager, IStore } from '../core/interfaces';\n\n// Safe fs.promises.rm fallback for Node.js compatibility\nconst rm =\n  fs.promises && fs.promises.rm ? fs.promises.rm : fs.rmdir ? promisify(fs.rmdir.bind(fs)) : () => Promise.resolve();\n\n// Helper to check if file exists using fs.stat instead of fs.access\nasync function exists(filePath: string): Promise<boolean> {\n  try {\n    await fs.promises.stat(filePath);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Setup website management IPC handlers.\n * Registers handlers for all website-related IPC channels including\n * creation, listing, opening, renaming, deletion, validation, and menu interactions.\n */\nexport function setupWebsiteHandlers(): void {\n  // Website creation handler\n  ipcMain.on('new-website', async (event) => {\n    const win = BrowserWindow.fromWebContents(event.sender);\n    if (!win) {\n      console.error('No window found for new-website IPC message');\n      return;\n    }\n\n    try {\n      let websiteName: string | null = null;\n      let validationError = '';\n\n      // Keep asking until user provides valid name or cancels\n      do {\n        let prompt = 'Enter a name for your new website:';\n        if (validationError) {\n          prompt = `${validationError}\\n\\nPlease enter a valid website name:`;\n        }\n\n        websiteName = await getNativeInput('New Website', prompt);\n\n        if (!websiteName) {\n          return;\n        }\n\n        // Validate website name (including duplicate check)\n        try {\n          // Use DI-based website manager\n          const appContext = getGlobalContext();\n          const websiteManager = appContext.getService<IWebsiteManager>(ServiceKeys.WEBSITE_MANAGER);\n          const validation = await websiteManager.validateWebsiteNameAsync(websiteName);\n          if (!validation.valid) {\n            validationError = validation.error || 'Invalid website name';\n            websiteName = null; // Reset to continue the loop\n          } else {\n            validationError = ''; // Clear any previous error\n          }\n        } catch (error) {\n          console.error('Validation error:', error);\n          // Fallback to legacy method if DI fails\n          try {\n            const { validateWebsiteNameAsync } = await import('../utils/website-manager');\n            const validation = await validateWebsiteNameAsync(websiteName!);\n            if (!validation.valid) {\n              validationError = validation.error || 'Invalid website name';\n              websiteName = null;\n            } else {\n              validationError = '';\n            }\n          } catch (fallbackError) {\n            console.error('Fallback validation error:', fallbackError);\n            validationError = 'Unable to validate website name';\n            websiteName = null;\n          }\n        }\n      } while (!websiteName);\n\n      await createNewWebsite(websiteName);\n    } catch (error) {\n      logger.error('Failed to create new website', {\n        error: sanitize.error(error),\n      });\n      dialog.showMessageBox(win, {\n        type: 'error',\n        title: 'Creation Failed',\n        message: 'Failed to create website',\n        detail: error instanceof Error ? error.message : String(error),\n        buttons: ['OK'],\n      });\n    }\n  });\n\n  // Website listing handler\n  ipcMain.handle('list-websites', async () => {\n    try {\n      // Use DI-based website manager\n      const appContext = getGlobalContext();\n      const websiteManager = appContext.getService<IWebsiteManager>(ServiceKeys.WEBSITE_MANAGER);\n      const allWebsites = await websiteManager.listWebsites();\n      const openWebsiteWindows = getAllWebsiteWindows();\n      const openWebsiteNames = Array.from(openWebsiteWindows.keys());\n\n      // Filter out websites that are already open\n      const availableWebsites = allWebsites.filter((websiteName: string) => !openWebsiteNames.includes(websiteName));\n\n      return availableWebsites;\n    } catch (error) {\n      console.error('Failed to list websites via DI:', error);\n      // Fallback to legacy method if DI fails\n      try {\n        const { listWebsites } = await import('../utils/website-manager');\n        const allWebsites = await listWebsites();\n        const openWebsiteWindows = getAllWebsiteWindows();\n        const openWebsiteNames = Array.from(openWebsiteWindows.keys());\n        const availableWebsites = allWebsites.filter((websiteName: string) => !openWebsiteNames.includes(websiteName));\n        return availableWebsites;\n      } catch (fallbackError) {\n        console.error('Fallback failed to list websites:', fallbackError);\n        throw fallbackError;\n      }\n    }\n  });\n\n  // Website opening handler\n  ipcMain.on('open-website', async (_, websiteName: string) => {\n    try {\n      await openWebsiteInNewWindow(websiteName);\n    } catch (error) {\n      logger.error('Failed to open website', {\n        error: sanitize.error(error),\n        websiteName,\n      });\n      dialog.showErrorBox('Open Failed', `Failed to open website \"${websiteName}\": ${sanitize.error(error)}`);\n    }\n  });\n\n  // Website context menu handler\n  ipcMain.on('show-website-context-menu', (event, websiteName: string, position: { x: number; y: number }) => {\n    const contextMenu = new Menu();\n    const window = BrowserWindow.fromWebContents(event.sender);\n\n    contextMenu.append(\n      new MenuItem({\n        label: 'Rename',\n        click: () => {\n          event.sender.send('website-context-menu-action', 'rename', websiteName);\n        },\n      })\n    );\n\n    contextMenu.append(\n      new MenuItem({\n        label: 'Delete',\n        click: () => {\n          event.sender.send('website-context-menu-action', 'delete', websiteName);\n        },\n      })\n    );\n\n    // Show context menu - let Electron position it automatically if window is provided\n    if (window) {\n      contextMenu.popup({ window });\n    } else {\n      contextMenu.popup({\n        x: Math.round(position.x),\n        y: Math.round(position.y),\n      });\n    }\n  });\n\n  // Website name validation handler\n  ipcMain.handle('validate-website-name', async (_, name: string) => {\n    try {\n      // Use DI-based website manager\n      const appContext = getGlobalContext();\n      const websiteManager = appContext.getService<IWebsiteManager>(ServiceKeys.WEBSITE_MANAGER);\n      return websiteManager.validateWebsiteName(name);\n    } catch (error) {\n      console.error('Failed to validate website name via DI:', error);\n      // Fallback to legacy method if DI fails\n      try {\n        const { validateWebsiteName } = await import('../utils/website-manager');\n        return validateWebsiteName(name);\n      } catch (fallbackError) {\n        console.error('Fallback failed to validate website name:', fallbackError);\n        return { valid: false, error: 'Unable to validate website name' };\n      }\n    }\n  });\n\n  // Website rename handler\n  ipcMain.handle('rename-website', async (event, oldName: string, newName: string) => {\n    try {\n      // Use DI-based website manager\n      const appContext = getGlobalContext();\n      const websiteManager = appContext.getService<IWebsiteManager>(ServiceKeys.WEBSITE_MANAGER);\n      const success = await websiteManager.renameWebsite(oldName, newName);\n      event.sender.send('website-operation-completed');\n      return success;\n    } catch (error) {\n      console.error('Failed to rename website via DI:', error);\n      // Fallback to legacy method if DI fails\n      try {\n        const { renameWebsite } = await import('../utils/website-manager');\n        const success = await renameWebsite(oldName, newName);\n        event.sender.send('website-operation-completed');\n        return success;\n      } catch (fallbackError) {\n        console.error('Fallback failed to rename website:', fallbackError);\n        throw fallbackError; // Let the frontend handle the error display\n      }\n    }\n  });\n\n  // Website delete handler\n  ipcMain.on('delete-website', async (event, websiteName: string) => {\n    try {\n      // Use DI-based website manager\n      const appContext = getGlobalContext();\n      const websiteManager = appContext.getService<IWebsiteManager>(ServiceKeys.WEBSITE_MANAGER);\n      const deleted = await websiteManager.deleteWebsite(websiteName);\n\n      if (deleted) {\n        event.sender.send('website-operation-completed');\n      }\n    } catch (error) {\n      console.error('Failed to delete website:', error);\n      const window = BrowserWindow.fromWebContents(event.sender);\n      if (window) {\n        dialog.showMessageBox(window, {\n          type: 'error',\n          title: 'Delete Failed',\n          message: 'Failed to delete website',\n          detail: error instanceof Error ? error.message : String(error),\n          buttons: ['OK'],\n        });\n      }\n    }\n  });\n\n  // Website selection window handler\n  ipcMain.on('open-website-selection', () => {\n    try {\n      openWebsiteSelectionWindow();\n    } catch (error) {\n      console.error('Failed to open website selection window:', error);\n    }\n  });\n}\n\n/**\n * Create a new website with the given name and open it in a new window.\n */\nasync function createNewWebsite(websiteName: string): Promise<void> {\n  let websiteCreated = false;\n  let newWebsitePath = '';\n\n  try {\n    // Step 1: Create the website files (this validates name and creates directory)\n    // Use DI-based website manager\n    try {\n      const appContext = getGlobalContext();\n      const websiteManager = appContext.getService<IWebsiteManager>(ServiceKeys.WEBSITE_MANAGER);\n      newWebsitePath = await websiteManager.createWebsite(websiteName);\n      websiteCreated = true;\n    } catch (diError) {\n      console.error('Failed to create website via DI:', diError);\n      // Fallback to legacy method if DI fails\n      const { createWebsiteWithName } = await import('../utils/website-manager');\n      newWebsitePath = await createWebsiteWithName(websiteName);\n      websiteCreated = true;\n    }\n\n    // Step 2: Open the new website in a new window (with isNewWebsite = true)\n    await openWebsiteInNewWindow(websiteName, newWebsitePath, true);\n\n    // Step 3: Add to recent websites and update menu using DI store service\n    try {\n      const appContext = getGlobalContext();\n      const store = appContext.getService<IStore>(ServiceKeys.STORE);\n      store.addRecentWebsite(websiteName);\n      updateApplicationMenu();\n    } catch (error) {\n      console.error('Failed to update recent websites - DI system required:', error);\n      // DI system is now required, no fallback available\n      updateApplicationMenu();\n    }\n  } catch (error) {\n    console.error('Failed to create new website:', error);\n\n    // If we created the website directory but failed to open it, clean up\n    if (websiteCreated && newWebsitePath) {\n      try {\n        if (await exists(newWebsitePath)) {\n          await rm(newWebsitePath, { recursive: true, force: true });\n        }\n      } catch (cleanupError) {\n        logger.error('Failed to clean up website directory', {\n          error: sanitize.error(cleanupError),\n        });\n        // Don't throw cleanup error, let the original error be thrown\n      }\n    }\n\n    // If the error is about website already existing, provide a helpful message\n    if (error instanceof Error && error.message.includes('already exists')) {\n      // Check if the website actually exists and is valid\n      try {\n        // Try DI first, then fallback\n        let existingPath: string;\n        try {\n          const appContext = getGlobalContext();\n          const websiteManager = appContext.getService<IWebsiteManager>(ServiceKeys.WEBSITE_MANAGER);\n          existingPath = websiteManager.getWebsitePath(websiteName);\n        } catch {\n          const { getWebsitePath } = await import('../utils/website-manager');\n          existingPath = getWebsitePath(websiteName);\n        }\n        if (fs.existsSync(existingPath)) {\n          // Website exists, try to open it instead\n          await openWebsiteInNewWindow(websiteName, existingPath, false);\n          return; // Success - exit without throwing\n        }\n      } catch (openError) {\n        console.error('Failed to open existing website:', openError);\n        // Fall through to throw original error\n      }\n    }\n\n    throw error;\n  }\n}\n\n/**\n * Open a website in a new website window using multi-window-manager.\n */\nexport async function openWebsiteInNewWindow(\n  websiteName: string,\n  websitePath?: string,\n  isNewWebsite: boolean = false\n): Promise<void> {\n  try {\n    // Step 1: Get website path if not provided\n    let actualWebsitePath: string;\n    if (websitePath) {\n      actualWebsitePath = websitePath;\n    } else {\n      // Use DI-based website manager\n      try {\n        const appContext = getGlobalContext();\n        const websiteManager = appContext.getService<IWebsiteManager>(ServiceKeys.WEBSITE_MANAGER);\n        actualWebsitePath = websiteManager.getWebsitePath(websiteName);\n      } catch (diError) {\n        console.error('Failed to get website path via DI:', diError);\n        // Fallback to legacy method if DI fails\n        const { getWebsitePath } = await import('../utils/website-manager');\n        actualWebsitePath = getWebsitePath(websiteName);\n      }\n    }\n\n    // Verify the website directory exists\n    if (!(await exists(actualWebsitePath))) {\n      throw new Error(`Website directory does not exist: ${actualWebsitePath}`);\n    }\n\n    // Step 2: Create website window using multi-window manager\n    createWebsiteWindow(websiteName, actualWebsitePath);\n\n    // Step 3: Start the website server for this window\n    await startWebsiteServerAndUpdateWindow(websiteName, actualWebsitePath);\n\n    // Step 4: Add to recent websites (but only if not a new website) using DI store service\n    if (!isNewWebsite) {\n      try {\n        const appContext = getGlobalContext();\n        const store = appContext.getService<IStore>(ServiceKeys.STORE);\n        store.addRecentWebsite(websiteName);\n        updateApplicationMenu();\n      } catch (error) {\n        console.error('Failed to update recent websites - DI system required:', error);\n        // DI system is now required, no fallback available\n        updateApplicationMenu();\n      }\n    }\n  } catch (error) {\n    logger.error(`Failed to open website in website window`, {\n      error: sanitize.error(error),\n      websiteName,\n    });\n    throw new Error(`Failed to open website \"${websiteName}\": ${sanitize.error(error)}`);\n  }\n}\n"],"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","ignoreList":[]}