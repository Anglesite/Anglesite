{"version":3,"names":["exports","setupExportHandlers","cov_1a0vsgllm2","s","exportSiteHandler","electron_1","require","eleventy_1","__importDefault","fs","__importStar","path","os","archiver_1","bagit_fs_1","window_manager_1","multi_window_manager_1","website_manager_1","f","ipcMain","on","event","exportFormat","win","b","BrowserWindow","fromWebContents","sender","getFocusedWindow","focusedWindow","websiteToExport","isWebsiteEditorFocused","getCurrentWebsiteEditorProject","websiteWindows","getAllWebsiteWindows","websiteName","websiteWindow","Array","from","window","dialog","showMessageBox","type","title","message","detail","buttons","isBagIt","isZip","metadata","getBagItMetadata","defaultExtension","filters","name","extensions","result","showSaveDialog","defaultPath","canceled","filePath","exportPath","websitePath","getWebsitePath","buildDir","replace","configPath","join","eleventyConfig","existsSync","cache","resolve","error","console","warn","undefined","eleventyOptions","quietMode","config","actualInputDir","elev","default","write","rmSync","recursive","force","createBagItArchive","createZipArchive","buildErr","Error","String","Promise","reject","output","createWriteStream","archive","zlib","level","err","pipe","directory","finalize","tmpDir","tmpdir","uniqueId","Date","now","Math","random","toString","substring","tempBagDir","packageJsonPath","process","cwd","bagSoftwareAgent","packageJson","JSON","parse","readFileSync","version","homepage","bagMetadata","externalDescription","externalIdentifier","sourceOrganization","toISOString","split","organizationAddress","trim","contactName","contactPhone","contactEmail","bag","createdDirs","Set","copyFiles","sourceDir","targetPrefix","files","readdirSync","withFileTypes","pending","length","forEach","file","sourcePath","targetPath","isDirectory","bagDirPath","has","add","mkdir","readStream","createReadStream","bagPath","writeStream","tempZipPath","createZipArchiveFromDirectory","copyFileSync","tempDirs","filter","startsWith","dir","fullPath","statSync","cleanupError","outputPath"],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/ipc/export.ts"],"sourcesContent":["/**\n * @file IPC handlers for website export functionality\n */\nimport { ipcMain, BrowserWindow, dialog, IpcMainEvent } from 'electron';\nimport Eleventy from '@11ty/eleventy';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport archiver from 'archiver';\nimport BagIt from 'bagit-fs';\nimport { getBagItMetadata, BagItMetadata } from '../ui/window-manager';\nimport {\n  getAllWebsiteWindows,\n  isWebsiteEditorFocused,\n  getCurrentWebsiteEditorProject,\n} from '../ui/multi-window-manager';\nimport { getWebsitePath } from '../utils/website-manager';\n\n/**\n * Setup export functionality IPC handlers.\n */\nexport function setupExportHandlers(): void {\n  // Export site to folder handler\n  ipcMain.on('menu-export-site-folder', async (event) => {\n    await exportSiteHandler(event, false);\n  });\n\n  // Export site to zip handler\n  ipcMain.on('menu-export-site-zip', async (event) => {\n    await exportSiteHandler(event, true);\n  });\n}\n\n/**\n * Handle export site requests for folder, zip, and bagit formats\n *\n * Exports the currently focused website in the requested format:\n * - false/undefined: Export as folder\n * - true: Export as ZIP archive\n * - 'bagit': Export as BagIt archival format with metadata collection\n *\n * The function automatically builds the site using Eleventy before export,\n * shows appropriate save dialogs, and handles progress feedback to the user.\n * @param event IPC main event (null when called directly)\n * @param exportFormat Export format: false (folder), true (ZIP), or 'bagit' (BagIt archive)\n * @returns Promise that resolves when export is complete\n * @throws Will show error dialogs to user on export failure\n * @example\n * ```typescript\n * // Export as ZIP\n * await exportSiteHandler(null, true);\n *\n * // Export as BagIt with metadata\n * await exportSiteHandler(null, 'bagit');\n * ```\n */\nexport async function exportSiteHandler(event: IpcMainEvent | null, exportFormat: boolean | 'bagit'): Promise<void> {\n  // Get window from event or focused window\n  const win = event ? BrowserWindow.fromWebContents(event.sender) : BrowserWindow.getFocusedWindow();\n  if (!win) {\n    return;\n  }\n\n  try {\n    // Get the currently focused website window to determine which website to export\n    const focusedWindow = BrowserWindow.getFocusedWindow();\n    let websiteToExport: string | null = null;\n\n    // First check if any website window is focused\n    if (isWebsiteEditorFocused()) {\n      websiteToExport = getCurrentWebsiteEditorProject();\n    } else {\n      // Find which website window is focused from the website windows map\n      const websiteWindows = getAllWebsiteWindows();\n      for (const [websiteName, websiteWindow] of Array.from(websiteWindows)) {\n        if (websiteWindow.window === focusedWindow) {\n          websiteToExport = websiteName;\n          break;\n        }\n      }\n    }\n\n    if (!websiteToExport) {\n      dialog.showMessageBox(win, {\n        type: 'info',\n        title: 'No Website Selected',\n        message: 'Please open a website window first',\n        detail: 'To export a website, you need to have a website window open and focused.',\n        buttons: ['OK'],\n      });\n      return;\n    }\n\n    // Determine export format details\n    const isBagIt = exportFormat === 'bagit';\n    const isZip = exportFormat === true;\n\n    // For BagIt exports, collect metadata first\n    let metadata: BagItMetadata | null = null;\n    if (isBagIt) {\n      metadata = await getBagItMetadata(websiteToExport);\n      if (!metadata) {\n        // User cancelled the metadata dialog\n        return;\n      }\n    }\n\n    let defaultExtension = '';\n    let filters: { name: string; extensions: string[] }[] = [];\n\n    if (isBagIt) {\n      defaultExtension = '.bagit.zip';\n      filters = [{ name: 'BagIt Archive', extensions: ['zip'] }];\n    } else if (isZip) {\n      defaultExtension = '.zip';\n      filters = [{ name: 'Zip Archive', extensions: ['zip'] }];\n    } else {\n      defaultExtension = '';\n      filters = [{ name: 'Folder', extensions: [] }];\n    }\n\n    // Show appropriate save dialog based on export type\n    const result = await dialog.showSaveDialog(win, {\n      title: `Export ${websiteToExport}`,\n      defaultPath: websiteToExport + defaultExtension,\n      filters,\n    });\n\n    if (result.canceled || !result.filePath) {\n      return;\n    }\n\n    const exportPath = result.filePath;\n\n    // Get the website source path\n    const websitePath = getWebsitePath(websiteToExport);\n\n    // Determine the build output directory\n    let buildDir: string;\n    if (isBagIt) {\n      buildDir = exportPath.replace('.bagit.zip', '');\n    } else if (isZip) {\n      buildDir = exportPath.replace('.zip', '');\n    } else {\n      buildDir = exportPath;\n    }\n\n    // Build the current website in the target directory using Eleventy programmatic API\n    try {\n      // Look for .eleventy.js config file in the website directory\n      const configPath = path.join(websitePath, '.eleventy.js');\n      let eleventyConfig: unknown;\n\n      if (fs.existsSync(configPath)) {\n        try {\n          // Clear the require cache to ensure we get fresh config\n          delete require.cache[require.resolve(configPath)];\n          // eslint-disable-next-line @typescript-eslint/no-require-imports\n          eleventyConfig = require(configPath);\n        } catch (error) {\n          console.warn(`Failed to load config from ${configPath}, using default config:`, error);\n          eleventyConfig = undefined;\n        }\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const eleventyOptions: any = {\n        quietMode: false,\n      };\n\n      if (eleventyConfig) {\n        eleventyOptions.config = eleventyConfig;\n      }\n\n      // Account for the new src/ directory structure\n      const actualInputDir = fs.existsSync(path.join(websitePath, 'src')) ? path.join(websitePath, 'src') : websitePath;\n\n      const elev = new Eleventy(actualInputDir, buildDir, eleventyOptions);\n\n      await elev.write();\n\n      // Handle different export formats\n      if (isBagIt) {\n        // Use metadata collected before save dialog\n        if (!metadata) {\n          // This should not happen since we check above, but add safety check\n          fs.rmSync(buildDir, { recursive: true, force: true });\n          return;\n        }\n        await createBagItArchive(buildDir, exportPath, websiteToExport, win, metadata);\n      } else if (isZip) {\n        await createZipArchive(buildDir, exportPath, win);\n      }\n    } catch (buildErr) {\n      console.error('Build failed:', buildErr);\n      dialog.showMessageBox(win, {\n        type: 'error',\n        title: 'Export Failed',\n        message: 'Failed to build website for export',\n        detail: buildErr instanceof Error ? buildErr.message : String(buildErr),\n        buttons: ['OK'],\n      });\n      return;\n    }\n  } catch (error) {\n    console.error('Export failed:', error);\n    dialog.showMessageBox(win, {\n      type: 'error',\n      title: 'Export Failed',\n      message: 'Failed to export website',\n      detail: error instanceof Error ? error.message : String(error),\n      buttons: ['OK'],\n    });\n  }\n}\n\n/**\n * Create a zip archive from the build directory.\n */\nasync function createZipArchive(buildDir: string, exportPath: string, win: BrowserWindow): Promise<void> {\n  return new Promise((resolve, reject) => {\n    if (!fs.existsSync(buildDir)) {\n      dialog.showMessageBox(win, {\n        type: 'error',\n        title: 'Export Failed',\n        message: 'Built website not found',\n        detail: 'The build directory was not found after building.',\n        buttons: ['OK'],\n      });\n      reject(new Error('Build directory not found'));\n      return;\n    }\n\n    const output = fs.createWriteStream(exportPath);\n    const archive = archiver('zip', { zlib: { level: 9 } });\n\n    output.on('close', () => {\n      // Clean up the temporary build directory\n      fs.rmSync(buildDir, { recursive: true, force: true });\n      resolve();\n    });\n\n    archive.on('error', (err: Error) => {\n      console.error('Zip archive error:', err);\n      dialog.showMessageBox(win, {\n        type: 'error',\n        title: 'Export Failed',\n        message: 'Failed to create zip archive',\n        detail: err.message,\n        buttons: ['OK'],\n      });\n      reject(err);\n    });\n\n    archive.pipe(output);\n    archive.directory(buildDir, false);\n    archive.finalize();\n  });\n}\n\n/**\n * Create a BagIt archive from the build directory using Gladstone.\n */\nasync function createBagItArchive(\n  buildDir: string,\n  exportPath: string,\n  websiteName: string,\n  win: BrowserWindow,\n  metadata: BagItMetadata\n): Promise<void> {\n  try {\n    if (!fs.existsSync(buildDir)) {\n      dialog.showMessageBox(win, {\n        type: 'error',\n        title: 'Export Failed',\n        message: 'Built website not found',\n        detail: 'The build directory was not found after building.',\n        buttons: ['OK'],\n      });\n      throw new Error('Build directory not found');\n    }\n\n    // Create a unique temporary directory in the OS tmp directory\n    const tmpDir = os.tmpdir();\n    const uniqueId = `${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n    const tempBagDir = path.join(tmpDir, `anglesite_bagit_${uniqueId}`);\n\n    // Get package info for bag metadata\n    const packageJsonPath = path.join(process.cwd(), 'package.json');\n    let bagSoftwareAgent = 'Anglesite';\n\n    try {\n      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n      const version = packageJson.version || '0.1.0';\n      const homepage = packageJson.homepage || 'https://github.com/anglesite/anglesite';\n      bagSoftwareAgent = `Anglesite ${version} ${homepage}`;\n    } catch (error) {\n      console.warn('Could not read package.json for BagIt metadata:', error);\n    }\n\n    // Prepare BagIt metadata\n    const bagMetadata: { [key: string]: string } = {\n      'External-Description': metadata.externalDescription,\n      'External-Identifier': metadata.externalIdentifier,\n      'Source-Organization': metadata.sourceOrganization,\n      'Bagging-Date': new Date().toISOString().split('T')[0],\n      'Bag-Software-Agent': bagSoftwareAgent,\n    };\n\n    // Add optional fields only if provided\n    if (metadata.organizationAddress.trim()) {\n      bagMetadata['Organization-Address'] = metadata.organizationAddress;\n    }\n    if (metadata.contactName.trim()) {\n      bagMetadata['Contact-Name'] = metadata.contactName;\n    }\n    if (metadata.contactPhone.trim()) {\n      bagMetadata['Contact-Phone'] = metadata.contactPhone;\n    }\n    if (metadata.contactEmail.trim()) {\n      bagMetadata['Contact-Email'] = metadata.contactEmail;\n    }\n\n    // Create the bag using bagit-fs\n    const bag = BagIt(tempBagDir, 'sha256', bagMetadata);\n\n    // Copy all files from build directory to bag\n    await new Promise<void>((resolve, reject) => {\n      // Track created directories to avoid redundant mkdir calls\n      const createdDirs = new Set<string>();\n\n      const copyFiles = (sourceDir: string, targetPrefix = '') => {\n        const files = fs.readdirSync(sourceDir, { withFileTypes: true });\n        let pending = files.length;\n\n        if (pending === 0) {\n          resolve();\n          return;\n        }\n\n        files.forEach((file) => {\n          const sourcePath = path.join(sourceDir, file.name);\n          const targetPath = path.join(targetPrefix, file.name);\n\n          if (file.isDirectory()) {\n            // Create the directory in the bag if it has a path\n            if (targetPath) {\n              const bagDirPath = targetPath;\n              if (!createdDirs.has(bagDirPath)) {\n                createdDirs.add(bagDirPath);\n                bag.mkdir(bagDirPath, (err) => {\n                  if (err) {\n                    console.warn(`Failed to create directory ${bagDirPath}:`, err);\n                  }\n                  // Recursively copy directory contents\n                  copyFiles(sourcePath, targetPath);\n                  pending--;\n                  if (pending === 0) resolve();\n                });\n              } else {\n                // Directory already created, just recurse\n                copyFiles(sourcePath, targetPath);\n                pending--;\n                if (pending === 0) resolve();\n              }\n            } else {\n              // Root level, just recurse\n              copyFiles(sourcePath, targetPath);\n              pending--;\n              if (pending === 0) resolve();\n            }\n          } else {\n            // Copy file to bag\n            const readStream = fs.createReadStream(sourcePath);\n            // Use relative path - BagIt library automatically handles /data/ prefix\n            const bagPath = targetPath;\n            const writeStream = bag.createWriteStream(bagPath);\n\n            readStream.pipe(writeStream);\n            writeStream.on('finish', () => {\n              pending--;\n              if (pending === 0) resolve();\n            });\n            writeStream.on('error', reject);\n          }\n        });\n      };\n\n      copyFiles(buildDir);\n    });\n\n    // Finalize the bag\n    await new Promise<void>((resolve) => {\n      bag.finalize(() => {\n        resolve();\n      });\n    });\n\n    // Create a temporary zip file from the bag\n    const tempZipPath = path.join(tmpDir, `anglesite_bagit_${uniqueId}.zip`);\n    await createZipArchiveFromDirectory(tempBagDir, tempZipPath);\n\n    // Copy the completed archive to the user-selected location\n    fs.copyFileSync(tempZipPath, exportPath);\n\n    // Clean up temporary files and directories\n    fs.rmSync(tempBagDir, { recursive: true, force: true });\n    fs.rmSync(tempZipPath, { force: true });\n    fs.rmSync(buildDir, { recursive: true, force: true });\n  } catch (error) {\n    console.error('BagIt archive creation failed:', error);\n\n    // Clean up any temporary files on error\n    const tmpDir = os.tmpdir();\n    const tempDirs = fs.readdirSync(tmpDir).filter((name) => name.startsWith('anglesite_bagit_'));\n    tempDirs.forEach((dir) => {\n      try {\n        const fullPath = path.join(tmpDir, dir);\n        if (fs.existsSync(fullPath)) {\n          if (fs.statSync(fullPath).isDirectory()) {\n            fs.rmSync(fullPath, { recursive: true, force: true });\n          } else {\n            fs.rmSync(fullPath, { force: true });\n          }\n        }\n      } catch (cleanupError) {\n        console.warn('Failed to clean up temporary file:', dir, cleanupError);\n      }\n    });\n\n    dialog.showMessageBox(win, {\n      type: 'error',\n      title: 'Export Failed',\n      message: 'Failed to create BagIt archive',\n      detail: error instanceof Error ? error.message : String(error),\n      buttons: ['OK'],\n    });\n    throw error;\n  }\n}\n\n/**\n * Helper function to create a zip archive from a directory.\n */\nasync function createZipArchiveFromDirectory(sourceDir: string, outputPath: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const output = fs.createWriteStream(outputPath);\n    const archive = archiver('zip', { zlib: { level: 9 } });\n\n    output.on('close', () => {\n      resolve();\n    });\n\n    archive.on('error', (err: Error) => {\n      console.error('BagIt zip archive error:', err);\n      reject(err);\n    });\n\n    archive.pipe(output);\n    archive.directory(sourceDir, false);\n    archive.finalize();\n  });\n}\n"],"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","ignoreList":[]}