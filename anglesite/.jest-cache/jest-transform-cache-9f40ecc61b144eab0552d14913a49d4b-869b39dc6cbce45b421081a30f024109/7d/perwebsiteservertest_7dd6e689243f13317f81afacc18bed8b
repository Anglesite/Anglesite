80eca8a80e8f4738faae196e8d983ac5
"use strict";
/**
 * @file Tests for per-website server management
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('fs');
jest.mock('path');
jest.mock('@11ty/eleventy');
jest.mock('@11ty/eleventy-dev-server');
jest.mock('../../app/server/eleventy-url-resolver');
jest.mock('../../app/ui/multi-window-manager', () => ({
    sendLogToWebsite: jest.fn(),
}));
// Mock Eleventy
jest.mock('@11ty/eleventy', () => {
    return jest.fn().mockImplementation(() => ({
        write: jest.fn(),
    }));
});
// Mock EleventyDevServer
jest.mock('@11ty/eleventy-dev-server', () => {
    return jest.fn().mockImplementation(() => ({
        serve: jest.fn(),
        watcher: {
            on: jest.fn(),
            close: jest.fn(),
        },
        watchFiles: jest.fn(),
        close: jest.fn(),
    }));
});
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const per_website_server_1 = require("../../app/server/per-website-server");
const eleventy_url_resolver_1 = require("../../app/server/eleventy-url-resolver");
const logging_test_utils_1 = require("../utils/logging-test-utils");
const mockFs = fs;
const mockPath = path;
const mockEleventy = require('@11ty/eleventy');
const mockEleventyDevServer = require('@11ty/eleventy-dev-server');
const mockEleventyUrlResolver = eleventy_url_resolver_1.EleventyUrlResolver;
describe('Per-Website Server', () => {
    let originalConsole;
    let loggingHelper;
    let mockMultiWindowManager;
    beforeEach(() => {
        jest.clearAllMocks();
        // Setup logging helper
        loggingHelper = (0, logging_test_utils_1.createLoggingTestHelper)();
        // Store original console
        originalConsole = { ...console };
        // Setup default path mocks
        mockPath.join.mockImplementation((...args) => args.join('/'));
        // Setup multi-window-manager mock
        mockMultiWindowManager = require('../../app/ui/multi-window-manager');
        mockMultiWindowManager.sendLogToWebsite = jest.fn();
        // Mock URL resolver
        mockEleventyUrlResolver.prototype.initialize = jest.fn().mockResolvedValue(undefined);
        // Reset Eleventy mock
        mockEleventy.mockClear();
        mockEleventyDevServer.mockClear();
    });
    afterEach(() => {
        // Clean up test helpers
        loggingHelper.restore();
        // Restore console
        Object.assign(console, originalConsole);
    });
    describe('sendLogToWindow', () => {
        it('should handle missing sendLogToWebsite function', async () => {
            // Test by temporarily removing the function
            const originalFunction = mockMultiWindowManager.sendLogToWebsite;
            delete mockMultiWindowManager.sendLogToWebsite;
            const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            mockFs.existsSync.mockReturnValue(false);
            try {
                await (0, per_website_server_1.startWebsiteServer)('/test/path', 'test-site', 3000);
            }
            catch {
                // Expected to fail, we're testing the log function
            }
            // Restore the function
            if (originalFunction) {
                mockMultiWindowManager.sendLogToWebsite = originalFunction;
            }
            consoleSpy.mockRestore();
        });
    });
    describe('startWebsiteServer', () => {
        beforeEach(() => {
            // Setup successful path and directory mocks
            mockFs.existsSync.mockImplementation((filePath) => {
                const pathStr = String(filePath);
                if (pathStr.includes('_site'))
                    return false; // output dir doesn't exist initially
                if (pathStr.includes('/src'))
                    return true; // src directory exists
                return false;
            });
            mockFs.mkdirSync.mockImplementation(() => undefined);
            mockFs.rmSync.mockImplementation(() => { });
            // Mock successful Eleventy instance
            const mockEleventyInstance = {
                write: jest.fn().mockResolvedValue(undefined),
            };
            mockEleventy.mockReturnValue(mockEleventyInstance);
            // Mock successful dev server
            const mockDevServerInstance = {
                serve: jest.fn(),
                watcher: {
                    on: jest.fn(),
                    close: jest.fn().mockResolvedValue(undefined),
                },
                watchFiles: jest.fn(),
                close: jest.fn().mockResolvedValue(undefined),
            };
            mockEleventyDevServer.mockReturnValue(mockDevServerInstance);
            // Mock console methods
            jest.spyOn(console, 'log').mockImplementation(() => { });
            jest.spyOn(console, 'error').mockImplementation(() => { });
            jest.spyOn(console, 'warn').mockImplementation(() => { });
        });
        it('should successfully start a website server', async () => {
            const server = await (0, per_website_server_1.startWebsiteServer)('/test/website', 'test-site', 3000);
            expect(server).toBeDefined();
            expect(server.eleventy).toBeDefined();
            expect(server.devServer).toBeDefined();
            expect(server.inputDir).toBe('/test/website/src');
            expect(server.outputDir).toBe('/test/website/_site');
            expect(server.port).toBe(3000);
            expect(server.urlResolver).toBeDefined();
            expect(server.restoreConsole).toBeDefined();
            expect(mockFs.mkdirSync).toHaveBeenCalledWith('/test/website/_site', { recursive: true });
            expect(mockEleventy).toHaveBeenCalledWith('/test/website/src', '/test/website/_site', expect.any(Object));
        });
        it('should handle missing source directory', async () => {
            mockFs.existsSync.mockImplementation((filePath) => {
                const pathStr = String(filePath);
                if (pathStr.includes('/src'))
                    return false; // src directory doesn't exist
                if (pathStr.includes('_site'))
                    return false;
                return false;
            });
            await expect((0, per_website_server_1.startWebsiteServer)('/test/website', 'test-site', 3000)).rejects.toThrow('Source directory does not exist: /test/website/src');
        });
        it('should handle Eleventy build errors', async () => {
            const buildError = new Error('Build failed');
            const mockEleventyInstance = {
                write: jest.fn().mockRejectedValue(buildError),
                setConfigPathOverride: jest.fn(),
                setRunMode: jest.fn(),
            };
            mockEleventy.mockReturnValue(mockEleventyInstance);
            await expect((0, per_website_server_1.startWebsiteServer)('/test/website', 'test-site', 3000)).rejects.toThrow('Build failed');
            // Verify: Proper error logging occurred (format-independent)
            loggingHelper.expectErrorLogged(logging_test_utils_1.buildErrorPatterns.buildFailed('test-site'));
        });
        it('should handle Eleventy build errors with stack trace', async () => {
            const buildError = new Error('Build failed');
            buildError.stack = 'Error: Build failed\n    at test line';
            const mockEleventyInstance = {
                write: jest.fn().mockRejectedValue(buildError),
                setConfigPathOverride: jest.fn(),
                setRunMode: jest.fn(),
            };
            mockEleventy.mockReturnValue(mockEleventyInstance);
            await expect((0, per_website_server_1.startWebsiteServer)('/test/website', 'test-site', 3000)).rejects.toThrow('Build failed');
            // Verify: Error logging includes build failure
            loggingHelper.expectErrorLogged(logging_test_utils_1.buildErrorPatterns.buildFailed('test-site'));
        });
        it('should handle Eleventy build errors with originalError', async () => {
            const originalError = new Error('Original error');
            originalError.stack = 'Original stack trace';
            const buildError = new Error('Build failed');
            buildError.originalError = originalError;
            const mockEleventyInstance = {
                write: jest.fn().mockRejectedValue(buildError),
                setConfigPathOverride: jest.fn(),
                setRunMode: jest.fn(),
            };
            mockEleventy.mockReturnValue(mockEleventyInstance);
            await expect((0, per_website_server_1.startWebsiteServer)('/test/website', 'test-site', 3000)).rejects.toThrow('Build failed');
            // Verify: Both main and original errors are logged
            loggingHelper.expectErrorLogged(logging_test_utils_1.buildErrorPatterns.buildFailed('test-site'));
            loggingHelper.expectErrorLogged(logging_test_utils_1.buildErrorPatterns.originalError('test-site'));
        });
        it('should handle Eleventy build errors with cause', async () => {
            const cause = 'Root cause error';
            const buildError = new Error('Build failed');
            buildError.cause = cause;
            const mockEleventyInstance = {
                write: jest.fn().mockRejectedValue(buildError),
                setConfigPathOverride: jest.fn(),
                setRunMode: jest.fn(),
            };
            mockEleventy.mockReturnValue(mockEleventyInstance);
            await expect((0, per_website_server_1.startWebsiteServer)('/test/website', 'test-site', 3000)).rejects.toThrow('Build failed');
            // Verify: Build failure and cause are logged
            loggingHelper.expectErrorLogged(logging_test_utils_1.buildErrorPatterns.buildFailed('test-site'));
            loggingHelper.expectErrorLogged(logging_test_utils_1.buildErrorPatterns.errorCause('test-site'));
        });
        it('should handle non-Error build failures', async () => {
            const buildError = 'String error';
            const mockEleventyInstance = {
                write: jest.fn().mockRejectedValue(buildError),
            };
            mockEleventy.mockReturnValue(mockEleventyInstance);
            await expect((0, per_website_server_1.startWebsiteServer)('/test/website', 'test-site', 3000)).rejects.toBe('String error');
        });
        it('should capture server URL from logger messages', async () => {
            let logCallback = () => { };
            let infoCallback = () => { };
            const mockDevServerInstance = {
                serve: jest.fn(() => {
                    // Simulate the server immediately logging its URL
                    setTimeout(() => {
                        logCallback('Server at http://localhost:3001/');
                    }, 50);
                }),
                watcher: {
                    on: jest.fn(),
                    close: jest.fn().mockResolvedValue(undefined),
                },
                watchFiles: jest.fn(),
                close: jest.fn().mockResolvedValue(undefined),
            };
            mockEleventyDevServer.mockImplementation((name, outputDir, options) => {
                logCallback = options.logger.log;
                infoCallback = options.logger.info;
                return mockDevServerInstance;
            });
            const server = await (0, per_website_server_1.startWebsiteServer)('/test/website', 'test-site', 3000);
            // The server should have captured the URL from the mocked log message
            expect(server.actualUrl).toBe('http://localhost:3001');
            expect(server.port).toBe(3001);
            // Test info callback as well
            infoCallback('Server at http://localhost:3002/');
        });
        it('should handle file watcher events', async () => {
            let changeCallback = () => { };
            const mockEleventyInstance = {
                write: jest.fn().mockResolvedValue(undefined),
            };
            mockEleventy.mockReturnValue(mockEleventyInstance);
            const mockDevServerInstance = {
                serve: jest.fn(),
                watcher: {
                    on: jest.fn().mockImplementation((event, callback) => {
                        if (event === 'change') {
                            changeCallback = callback;
                        }
                    }),
                    close: jest.fn().mockResolvedValue(undefined),
                },
                watchFiles: jest.fn(),
                close: jest.fn().mockResolvedValue(undefined),
            };
            mockEleventyDevServer.mockReturnValue(mockDevServerInstance);
            await (0, per_website_server_1.startWebsiteServer)('/test/website', 'test-site', 3000);
            // Simulate file change
            await changeCallback('/test/website/src/index.html');
            expect(mockEleventyInstance.write).toHaveBeenCalledTimes(2); // Initial build + rebuild
        });
        it('should skip rebuilds for build directory changes', async () => {
            let changeCallback = () => { };
            const mockEleventyInstance = {
                write: jest.fn().mockResolvedValue(undefined),
            };
            mockEleventy.mockReturnValue(mockEleventyInstance);
            const mockDevServerInstance = {
                serve: jest.fn(),
                watcher: {
                    on: jest.fn().mockImplementation((event, callback) => {
                        if (event === 'change') {
                            changeCallback = callback;
                        }
                    }),
                    close: jest.fn().mockResolvedValue(undefined),
                },
                watchFiles: jest.fn(),
                close: jest.fn().mockResolvedValue(undefined),
            };
            mockEleventyDevServer.mockReturnValue(mockDevServerInstance);
            await (0, per_website_server_1.startWebsiteServer)('/test/website', 'test-site', 3000);
            // Simulate build directory change
            await changeCallback('/test/website/_site/index.html');
            expect(mockEleventyInstance.write).toHaveBeenCalledTimes(1); // Only initial build
        });
        it('should handle rebuild errors', async () => {
            let changeCallback = () => { };
            const rebuildError = new Error('Rebuild failed');
            const mockEleventyInstance = {
                write: jest
                    .fn()
                    .mockResolvedValueOnce(undefined) // Initial build succeeds
                    .mockRejectedValueOnce(rebuildError), // Rebuild fails
            };
            mockEleventy.mockReturnValue(mockEleventyInstance);
            const mockDevServerInstance = {
                serve: jest.fn(),
                watcher: {
                    on: jest.fn().mockImplementation((event, callback) => {
                        if (event === 'change') {
                            changeCallback = callback;
                        }
                    }),
                    close: jest.fn().mockResolvedValue(undefined),
                },
                watchFiles: jest.fn(),
                close: jest.fn().mockResolvedValue(undefined),
            };
            mockEleventyDevServer.mockReturnValue(mockDevServerInstance);
            const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
            await (0, per_website_server_1.startWebsiteServer)('/test/website', 'test-site', 3000);
            // Simulate file change that triggers failed rebuild
            await changeCallback('/test/website/src/index.html');
            // Verify: Rebuild failure is logged correctly
            loggingHelper.expectErrorLogged(logging_test_utils_1.buildErrorPatterns.rebuildFailed('test-site'));
        });
        it('should handle non-Error rebuild failures', async () => {
            let changeCallback = () => { };
            const rebuildError = 'String rebuild error';
            const mockEleventyInstance = {
                write: jest
                    .fn()
                    .mockResolvedValueOnce(undefined) // Initial build succeeds
                    .mockRejectedValueOnce(rebuildError), // Rebuild fails
            };
            mockEleventy.mockReturnValue(mockEleventyInstance);
            const mockDevServerInstance = {
                serve: jest.fn(),
                watcher: {
                    on: jest.fn().mockImplementation((event, callback) => {
                        if (event === 'change') {
                            changeCallback = callback;
                        }
                    }),
                    close: jest.fn().mockResolvedValue(undefined),
                },
                watchFiles: jest.fn(),
                close: jest.fn().mockResolvedValue(undefined),
            };
            mockEleventyDevServer.mockReturnValue(mockDevServerInstance);
            const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
            await (0, per_website_server_1.startWebsiteServer)('/test/website', 'test-site', 3000);
            // Simulate file change that triggers failed rebuild
            await changeCallback('/test/website/src/index.html');
            // Verify: Rebuild failure is logged correctly
            loggingHelper.expectErrorLogged(logging_test_utils_1.buildErrorPatterns.rebuildFailed('test-site'));
        });
        it('should handle missing watcher', async () => {
            const mockDevServerInstance = {
                serve: jest.fn(),
                watcher: null, // No watcher
                watchFiles: jest.fn(),
                close: jest.fn().mockResolvedValue(undefined),
            };
            mockEleventyDevServer.mockReturnValue(mockDevServerInstance);
            // Should not throw an error
            const server = await (0, per_website_server_1.startWebsiteServer)('/test/website', 'test-site', 3000);
            expect(server).toBeDefined();
        });
        it('should handle console override for Eleventy logs', async () => {
            const consoleLogSpy = jest.spyOn(console, 'log');
            const consoleErrorSpy = jest.spyOn(console, 'error');
            const consoleWarnSpy = jest.spyOn(console, 'warn');
            await (0, per_website_server_1.startWebsiteServer)('/test/website', 'test-site', 3000);
            // Test console.log override
            console.log('Test [11ty] message');
            console.log('Regular message');
            // Test console.error override
            console.error('Test Eleventy error');
            console.error('Regular error');
            // Test console.warn override
            console.warn('Test eleventy warning');
            console.warn('Regular warning');
            expect(consoleLogSpy).toHaveBeenCalledWith('Test [11ty] message');
            expect(consoleErrorSpy).toHaveBeenCalledWith('Test Eleventy error');
            expect(consoleWarnSpy).toHaveBeenCalledWith('Test eleventy warning');
        });
        it('should handle general startup errors', async () => {
            // Mock fs.existsSync to throw an error
            mockFs.existsSync.mockImplementation(() => {
                throw new Error('File system error');
            });
            const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
            await expect((0, per_website_server_1.startWebsiteServer)('/test/website', 'test-site', 3000)).rejects.toThrow('File system error');
            // Verify: Server startup failure is logged correctly
            loggingHelper.expectErrorLogged(logging_test_utils_1.buildErrorPatterns.serverStartFailed('test-site'));
        });
        it('should handle non-Error startup failures', async () => {
            // Mock fs.existsSync to throw a string error
            mockFs.existsSync.mockImplementation(() => {
                throw 'String file system error';
            });
            const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
            await expect((0, per_website_server_1.startWebsiteServer)('/test/website', 'test-site', 3000)).rejects.toBe('String file system error');
            // Verify: Server startup failure is logged correctly
            loggingHelper.expectErrorLogged(logging_test_utils_1.buildErrorPatterns.serverStartFailed('test-site'));
        });
        it('should restore console methods on startup errors', async () => {
            const originalLog = console.log;
            mockFs.existsSync.mockImplementation(() => {
                throw new Error('File system error');
            });
            try {
                await (0, per_website_server_1.startWebsiteServer)('/test/website', 'test-site', 3000);
            }
            catch {
                // Expected to fail
            }
            expect(console.log).toBe(originalLog);
        });
        it('should call Eleventy configuration function', async () => {
            // Create a mock Eleventy config object to test the configuration function
            const mockEleventyConfig = {
                setFreezeReservedData: jest.fn(),
                addPlugin: jest.fn(),
                addGlobalData: jest.fn(),
            };
            // Mock the requires inside the config function
            jest.doMock('@dwk/anglesite-11ty', () => ({
                default: 'anglesite-plugin',
            }));
            jest.doMock('@11ty/eleventy-plugin-webc', () => 'webc-plugin');
            let configFunction;
            mockEleventy.mockImplementation((input, output, options) => {
                configFunction = options.config;
                return {
                    write: jest.fn().mockResolvedValue(undefined),
                };
            });
            await (0, per_website_server_1.startWebsiteServer)('/test/website', 'test-site', 3000);
            // Call the configuration function with our mock config
            expect(configFunction).toBeDefined();
            const result = configFunction(mockEleventyConfig);
            expect(mockEleventyConfig.setFreezeReservedData).toHaveBeenCalledWith(false);
            expect(mockEleventyConfig.addPlugin).toHaveBeenCalledWith('anglesite-plugin');
            expect(mockEleventyConfig.addPlugin).toHaveBeenCalledWith('webc-plugin', {
                components: '_includes/**/*.webc',
            });
            expect(mockEleventyConfig.addGlobalData).toHaveBeenCalledWith('eleventy', expect.any(Function));
            expect(result).toEqual({
                templateFormats: ['11ty.js', 'webc', 'md', 'html'],
                markdownTemplateEngine: 'webc',
                htmlTemplateEngine: 'webc',
                dir: {
                    input: '.',
                    output: '../_site',
                    includes: '_includes',
                    layouts: '_includes',
                },
            });
        });
        it('should test global data function in Eleventy config', async () => {
            const originalEnv = process.env.ELEVENTY_VERSION;
            let configFunction;
            let globalDataFunction;
            const mockEleventyConfig = {
                setFreezeReservedData: jest.fn(),
                addPlugin: jest.fn(),
                addGlobalData: jest.fn().mockImplementation((key, fn) => {
                    if (key === 'eleventy') {
                        globalDataFunction = fn;
                    }
                }),
            };
            mockEleventy.mockImplementation((input, output, options) => {
                configFunction = options.config;
                return {
                    write: jest.fn().mockResolvedValue(undefined),
                };
            });
            await (0, per_website_server_1.startWebsiteServer)('/test/website', 'test-site', 3000);
            // Call the configuration function
            expect(configFunction).toBeDefined();
            configFunction(mockEleventyConfig);
            // Test with ELEVENTY_VERSION set
            process.env.ELEVENTY_VERSION = '2.0.0';
            expect(globalDataFunction).toBeDefined();
            expect(globalDataFunction()).toEqual({
                generator: 'Eleventy v2.0.0',
            });
            // Test without ELEVENTY_VERSION
            delete process.env.ELEVENTY_VERSION;
            expect(globalDataFunction()).toEqual({
                generator: 'Eleventy',
            });
            // Restore original env
            if (originalEnv) {
                process.env.ELEVENTY_VERSION = originalEnv;
            }
        });
        it('should handle error logger callback', async () => {
            let errorCallback = () => { };
            const mockDevServerInstance = {
                serve: jest.fn(),
                watcher: {
                    on: jest.fn(),
                    close: jest.fn().mockResolvedValue(undefined),
                },
                watchFiles: jest.fn(),
                close: jest.fn().mockResolvedValue(undefined),
            };
            mockEleventyDevServer.mockImplementation((name, outputDir, options) => {
                errorCallback = options.logger.error;
                return mockDevServerInstance;
            });
            const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
            await (0, per_website_server_1.startWebsiteServer)('/test/website', 'test-site', 3000);
            // Test the error callback
            errorCallback('Test error message');
            expect(consoleErrorSpy).toHaveBeenCalledWith('[test-site] Test error message');
        });
    });
    describe('stopWebsiteServer', () => {
        let mockServer;
        beforeEach(() => {
            mockServer = {
                eleventy: {},
                devServer: {
                    watcher: {
                        close: jest.fn().mockResolvedValue(undefined),
                    },
                    close: jest.fn().mockResolvedValue(undefined),
                },
                inputDir: '/test/src',
                outputDir: '/test/_site',
                port: 3000,
                actualUrl: 'http://localhost:3000',
                urlResolver: {},
                restoreConsole: jest.fn(),
            };
            mockFs.existsSync.mockReturnValue(true);
            mockFs.rmSync.mockImplementation(() => { });
        });
        it('should successfully stop a website server', async () => {
            await (0, per_website_server_1.stopWebsiteServer)(mockServer);
            expect(mockServer.restoreConsole).toHaveBeenCalled();
            expect(mockServer.devServer.watcher.close).toHaveBeenCalled();
            expect(mockServer.devServer.close).toHaveBeenCalled();
            expect(mockFs.rmSync).toHaveBeenCalledWith('/test/_site', { recursive: true, force: true });
        });
        it('should handle missing restoreConsole function', async () => {
            mockServer.restoreConsole = undefined;
            await expect((0, per_website_server_1.stopWebsiteServer)(mockServer)).resolves.not.toThrow();
        });
        it('should handle missing watcher', async () => {
            mockServer.devServer.watcher = null;
            await expect((0, per_website_server_1.stopWebsiteServer)(mockServer)).resolves.not.toThrow();
        });
        it('should handle watcher close errors', async () => {
            const watcherError = new Error('Watcher close failed');
            mockServer.devServer.watcher.close.mockRejectedValue(watcherError);
            const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
            await (0, per_website_server_1.stopWebsiteServer)(mockServer);
            // Verify: Watcher close error is logged correctly
            loggingHelper.expectErrorLogged(logging_test_utils_1.buildErrorPatterns.watcherCloseFailed(3000));
        });
        it('should handle missing devServer', async () => {
            mockServer.devServer = null;
            await expect((0, per_website_server_1.stopWebsiteServer)(mockServer)).resolves.not.toThrow();
            expect(mockFs.rmSync).toHaveBeenCalled();
        });
        it('should handle devServer without close method', async () => {
            mockServer.devServer = {
                watcher: {
                    close: jest.fn().mockResolvedValue(undefined),
                },
            };
            await expect((0, per_website_server_1.stopWebsiteServer)(mockServer)).resolves.not.toThrow();
        });
        it('should handle devServer close errors', async () => {
            const closeError = new Error('Server close failed');
            mockServer.devServer.close.mockRejectedValue(closeError);
            const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
            await (0, per_website_server_1.stopWebsiteServer)(mockServer);
            // Verify: Server close error is logged correctly
            loggingHelper.expectErrorLogged(logging_test_utils_1.buildErrorPatterns.serverCloseFailed(3000));
        });
        it('should handle missing output directory', async () => {
            mockFs.existsSync.mockReturnValue(false);
            await (0, per_website_server_1.stopWebsiteServer)(mockServer);
            expect(mockFs.rmSync).not.toHaveBeenCalled();
        });
        it('should handle output directory cleanup errors', async () => {
            const cleanupError = new Error('Cleanup failed');
            mockFs.rmSync.mockImplementation(() => {
                throw cleanupError;
            });
            const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
            await (0, per_website_server_1.stopWebsiteServer)(mockServer);
            // Verify: Directory cleanup error is logged correctly
            loggingHelper.expectErrorLogged(logging_test_utils_1.buildErrorPatterns.directoryCleanupFailed());
        });
        it('should handle general stop errors', async () => {
            const generalError = new Error('General stop error');
            mockServer.restoreConsole = jest.fn().mockImplementation(() => {
                throw generalError;
            });
            const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
            await (0, per_website_server_1.stopWebsiteServer)(mockServer);
            // Verify: General server stop error is logged correctly
            loggingHelper.expectErrorLogged(logging_test_utils_1.buildErrorPatterns.serverStopFailed(3000));
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,