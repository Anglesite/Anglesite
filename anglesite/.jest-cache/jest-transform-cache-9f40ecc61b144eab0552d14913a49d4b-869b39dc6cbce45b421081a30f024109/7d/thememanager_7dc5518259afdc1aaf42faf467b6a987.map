{"version":3,"names":["cov_1imoa38gx7","actualCoverage","s","electron_1","require","service_registry_1","container_1","ThemeManager","constructor","f","store","currentResolvedTheme","initialized","initialize","b","getGlobalContext","getService","ServiceKeys","STORE","initializeNativeTheme","setupSystemThemeListener","updateResolvedTheme","setupIpcHandlers","userTheme","getUserThemePreference","nativeTheme","themeSource","on","ipcMain","handle","userPreference","resolvedTheme","systemTheme","shouldUseDarkColors","_event","theme","setTheme","get","getResolvedTheme","console","warn","set","systemIsDark","newResolvedTheme","applyThemeToAllWindows","allWindows","BrowserWindow","getAllWindows","window","isDestroyed","applyThemeToWindow","themeScript","webContents","isLoading","once","executeJavaScript","catch","error","log","send","getSystemThemeInfo","exports","themeManager"],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/ui/theme-manager.ts"],"sourcesContent":["/**\n * @file Theme management for Anglesite application.\n * Handles system theme detection, user preferences, and theme application across windows.\n */\nimport { BrowserWindow, nativeTheme, ipcMain } from 'electron';\nimport { IStore } from '../core/interfaces';\nimport { getGlobalContext } from '../core/service-registry';\nimport { ServiceKeys } from '../core/container';\n\nexport type Theme = 'system' | 'light' | 'dark';\nexport type ResolvedTheme = 'light' | 'dark';\n\n/**\n * Theme manager singleton for handling application theming.\n */\nclass ThemeManager {\n  private store: IStore | null = null;\n  private currentResolvedTheme: ResolvedTheme = 'light';\n  private initialized = false;\n\n  constructor() {\n    // Don't initialize anything in constructor - wait for initialize() call\n  }\n\n  /**\n   * Initialize theme manager and set up IPC handlers.\n   */\n  initialize(): void {\n    if (this.initialized) {\n      return;\n    }\n\n    // Initialize store from DI container\n    this.store = getGlobalContext().getService<IStore>(ServiceKeys.STORE);\n\n    // Initialize theme system\n    this.initializeNativeTheme();\n    this.setupSystemThemeListener();\n    this.updateResolvedTheme();\n    this.setupIpcHandlers();\n    this.initialized = true;\n  }\n\n  /**\n   * Initialize nativeTheme.themeSource based on stored preference.\n   */\n  private initializeNativeTheme(): void {\n    const userTheme = this.getUserThemePreference();\n    if (userTheme === 'light') {\n      nativeTheme.themeSource = 'light';\n    } else if (userTheme === 'dark') {\n      nativeTheme.themeSource = 'dark';\n    } else {\n      nativeTheme.themeSource = 'system';\n    }\n  }\n\n  /**\n   * Set up system theme change listener.\n   */\n  private setupSystemThemeListener(): void {\n    nativeTheme.on('updated', () => {\n      this.updateResolvedTheme();\n    });\n  }\n\n  /**\n   * Set up IPC handlers for theme management.\n   */\n  private setupIpcHandlers(): void {\n    ipcMain.handle('get-current-theme', () => {\n      return {\n        userPreference: this.getUserThemePreference(),\n        resolvedTheme: this.currentResolvedTheme,\n        systemTheme: nativeTheme.shouldUseDarkColors ? 'dark' : 'light',\n      };\n    });\n\n    ipcMain.handle('set-theme', (_event, theme: Theme) => {\n      this.setTheme(theme);\n      return {\n        userPreference: theme,\n        resolvedTheme: this.currentResolvedTheme,\n        systemTheme: nativeTheme.shouldUseDarkColors ? 'dark' : 'light',\n      };\n    });\n  }\n\n  /**\n   * Get the current user theme preference.\n   */\n  getUserThemePreference(): Theme {\n    if (!this.store) {\n      return 'system'; // Default theme before initialization\n    }\n    return this.store.get('theme');\n  }\n\n  /**\n   * Get the currently resolved theme (light or dark).\n   */\n  getResolvedTheme(): ResolvedTheme {\n    return this.currentResolvedTheme;\n  }\n\n  /**\n   * Set the theme preference.\n   */\n  setTheme(theme: Theme): void {\n    if (!this.store) {\n      console.warn('ThemeManager not initialized, cannot set theme');\n      return;\n    }\n    this.store.set('theme', theme);\n\n    // Set nativeTheme.themeSource according to Electron best practices\n    if (theme === 'light') {\n      nativeTheme.themeSource = 'light';\n    } else if (theme === 'dark') {\n      nativeTheme.themeSource = 'dark';\n    } else {\n      nativeTheme.themeSource = 'system';\n    }\n\n    this.updateResolvedTheme();\n  }\n\n  /**\n   * Update the resolved theme based on user preference and system theme.\n   */\n  private updateResolvedTheme(): void {\n    const userPreference = this.getUserThemePreference();\n    const systemIsDark = nativeTheme.shouldUseDarkColors;\n\n    let newResolvedTheme: ResolvedTheme;\n\n    switch (userPreference) {\n      case 'light':\n        newResolvedTheme = 'light';\n        break;\n      case 'dark':\n        newResolvedTheme = 'dark';\n        break;\n      case 'system':\n      default:\n        newResolvedTheme = systemIsDark ? 'dark' : 'light';\n        break;\n    }\n\n    if (newResolvedTheme !== this.currentResolvedTheme) {\n      this.currentResolvedTheme = newResolvedTheme;\n      this.applyThemeToAllWindows();\n    }\n  }\n\n  /**\n   * Apply the current theme to all open windows.\n   */\n  private applyThemeToAllWindows(): void {\n    const allWindows = BrowserWindow.getAllWindows();\n\n    for (const window of allWindows) {\n      if (!window.isDestroyed()) {\n        this.applyThemeToWindow(window);\n      }\n    }\n  }\n\n  /**\n   * Apply theme to a specific window.\n   */\n  applyThemeToWindow(window: BrowserWindow): void {\n    if (window.isDestroyed()) return;\n\n    // Apply theme immediately with executeJavaScript to prevent flash\n    const themeScript = `\n      (function() {\n        const theme = '${this.currentResolvedTheme}';\n        if (theme === 'dark') {\n          document.documentElement.setAttribute('data-theme', 'dark');\n          \n          // FORCE DARK THEME BY SETTING INLINE STYLES DIRECTLY\n          const topBar = document.querySelector('.top-bar');\n          if (topBar) {\n            topBar.style.backgroundColor = '#2d2d2d';\n            topBar.style.borderBottomColor = '#404040';\n            topBar.style.color = '#ffffff';\n          }\n          \n          const browserBar = document.querySelector('.browser-bar');\n          if (browserBar) {\n            browserBar.style.backgroundColor = '#252525';\n            browserBar.style.borderBottomColor = '#353535';\n            browserBar.style.color = '#ffffff';\n          }\n          \n          const buttons = document.querySelectorAll('button');\n          buttons.forEach(button => {\n            button.style.backgroundColor = '#2d2d2d';\n            button.style.borderColor = '#404040';\n            button.style.color = '#ffffff';\n          });\n          \n          const siteTitle = document.querySelector('.site-title');\n          if (siteTitle) {\n            siteTitle.style.color = '#ffffff';\n          }\n          \n          const urlDisplay = document.querySelector('.url-display');\n          if (urlDisplay) {\n            urlDisplay.style.backgroundColor = '#1e1e1e';\n            urlDisplay.style.borderColor = '#404040';\n            urlDisplay.style.color = '#b3b3b3';\n          }\n        } else {\n          document.documentElement.removeAttribute('data-theme');\n          \n          // Remove inline styles for light theme\n          const elements = document.querySelectorAll('.top-bar, .browser-bar, button, .site-title, .url-display');\n          elements.forEach(element => {\n            element.style.backgroundColor = '';\n            element.style.borderBottomColor = '';\n            element.style.borderColor = '';\n            element.style.color = '';\n          });\n        }\n      })();\n    `;\n\n    // Execute the theme script immediately when webContents is ready\n    try {\n      if (typeof window.webContents.isLoading === 'function' && window.webContents.isLoading()) {\n        window.webContents.once('dom-ready', () => {\n          window.webContents.executeJavaScript(themeScript).catch(console.error);\n        });\n      } else {\n        window.webContents.executeJavaScript(themeScript).catch(console.error);\n      }\n    } catch (error) {\n      // Fallback for environments where executeJavaScript might not be available (like tests)\n      console.log('Could not execute immediate theme script:', error);\n    }\n\n    // Also send theme update to renderer process for proper theme management\n    window.webContents.send('theme-updated', {\n      userPreference: this.getUserThemePreference(),\n      resolvedTheme: this.currentResolvedTheme,\n      systemTheme: nativeTheme.shouldUseDarkColors ? 'dark' : 'light',\n    });\n  }\n\n  /**\n   * Get system theme information.\n   */\n  getSystemThemeInfo() {\n    return {\n      userPreference: this.getUserThemePreference(),\n      resolvedTheme: this.currentResolvedTheme,\n      systemTheme: nativeTheme.shouldUseDarkColors ? 'dark' : 'light',\n    };\n  }\n}\n\n// Export singleton instance\nexport const themeManager = new ThemeManager();\n"],"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","ignoreList":[]}