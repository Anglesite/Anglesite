{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/server/per-website-server.test.ts","mappings":";AAAA;;GAEG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQH,oBAAoB;AACpB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAChB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAClB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;AAC5B,IAAI,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;AACvC,IAAI,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;AACpD,IAAI,CAAC,IAAI,CAAC,mCAAmC,EAAE,GAAG,EAAE,CAAC,CAAC;IACpD,gBAAgB,EAAE,IAAI,CAAC,EAAE,EAAE;CAC5B,CAAC,CAAC,CAAC;AAKJ,gBAAgB;AAChB,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC/B,OAAO,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,CAAC;QACzC,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;KACjB,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC;AAEH,yBAAyB;AACzB,IAAI,CAAC,IAAI,CAAC,2BAA2B,EAAE,GAAG,EAAE;IAC1C,OAAO,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,CAAC;QACzC,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;QAChB,OAAO,EAAE;YACP,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE;YACb,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;SACjB;QACD,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;QACrB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;KACjB,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC;AArCH,uCAAyB;AACzB,2CAA6B;AAC7B,4EAA2G;AAC3G,kFAA6E;AAC7E,oEAA6G;AAY7G,MAAM,MAAM,GAAG,EAA4B,CAAC;AAC5C,MAAM,QAAQ,GAAG,IAAgC,CAAC;AAsBlD,MAAM,YAAY,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC/C,MAAM,qBAAqB,GAAG,OAAO,CAAC,2BAA2B,CAAC,CAAC;AACnE,MAAM,uBAAuB,GAAG,2CAAmE,CAAC;AAEpG,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAI,eAA+B,CAAC;IACpC,IAAI,aAAgC,CAAC;IACrC,IAAI,sBAEH,CAAC;IAEF,UAAU,CAAC,GAAG,EAAE;QACd,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,uBAAuB;QACvB,aAAa,GAAG,IAAA,4CAAuB,GAAE,CAAC;QAE1C,yBAAyB;QACzB,eAAe,GAAG,EAAE,GAAG,OAAO,EAAE,CAAC;QAEjC,2BAA2B;QAC3B,QAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAE9D,kCAAkC;QAClC,sBAAsB,GAAG,OAAO,CAAC,mCAAmC,CAAC,CAAC;QACtE,sBAAsB,CAAC,gBAAgB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAEpD,oBAAoB;QACpB,uBAAuB,CAAC,SAAS,CAAC,UAAU,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;QAEtF,sBAAsB;QACtB,YAAY,CAAC,SAAS,EAAE,CAAC;QACzB,qBAAqB,CAAC,SAAS,EAAE,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,wBAAwB;QACxB,aAAa,CAAC,OAAO,EAAE,CAAC;QAExB,kBAAkB;QAClB,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,4CAA4C;YAC5C,MAAM,gBAAgB,GAAG,sBAAsB,CAAC,gBAAgB,CAAC;YACjE,OAAO,sBAAsB,CAAC,gBAAgB,CAAC;YAE/C,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,kBAAkB,EAAE,CAAC;YAEnE,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAEzC,IAAI,CAAC;gBACH,MAAM,IAAA,uCAAkB,EAAC,YAAY,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;YAC5D,CAAC;YAAC,MAAM,CAAC;gBACP,mDAAmD;YACrD,CAAC;YAED,uBAAuB;YACvB,IAAI,gBAAgB,EAAE,CAAC;gBACrB,sBAAsB,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;YAC7D,CAAC;YACD,UAAU,CAAC,WAAW,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,UAAU,CAAC,GAAG,EAAE;YACd,4CAA4C;YAC5C,MAAM,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,QAAqB,EAAE,EAAE;gBAC7D,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;gBACjC,IAAI,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC;oBAAE,OAAO,KAAK,CAAC,CAAC,qCAAqC;gBAClF,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;oBAAE,OAAO,IAAI,CAAC,CAAC,uBAAuB;gBAClE,OAAO,KAAK,CAAC;YACf,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,SAAS,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC;YACrD,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;YAE3C,oCAAoC;YACpC,MAAM,oBAAoB,GAAG;gBAC3B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;aAC9C,CAAC;YACF,YAAY,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC;YAEnD,6BAA6B;YAC7B,MAAM,qBAAqB,GAAG;gBAC5B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;gBAChB,OAAO,EAAE;oBACP,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE;oBACb,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;iBAC9C;gBACD,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;gBACrB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;aAC9C,CAAC;YACF,qBAAqB,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC;YAE7D,uBAAuB;YACvB,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;YACxD,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;YAC1D,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,MAAM,GAAG,MAAM,IAAA,uCAAkB,EAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;YAE5E,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YAC7B,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;YACvC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAClD,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YACrD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC/B,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC;YAE5C,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,oBAAoB,CAAC,qBAAqB,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;YAC1F,MAAM,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,mBAAmB,EAAE,qBAAqB,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;QAC5G,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,QAAqB,EAAE,EAAE;gBAC7D,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;gBACjC,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;oBAAE,OAAO,KAAK,CAAC,CAAC,8BAA8B;gBAC1E,IAAI,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC;oBAAE,OAAO,KAAK,CAAC;gBAC5C,OAAO,KAAK,CAAC;YACf,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,CAAC,IAAA,uCAAkB,EAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAClF,oDAAoD,CACrD,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,UAAU,GAAG,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;YAC7C,MAAM,oBAAoB,GAAG;gBAC3B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,UAAU,CAAC;gBAC9C,qBAAqB,EAAE,IAAI,CAAC,EAAE,EAAE;gBAChC,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;aACtB,CAAC;YACF,YAAY,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC;YAEnD,MAAM,MAAM,CAAC,IAAA,uCAAkB,EAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YAErG,6DAA6D;YAC7D,aAAa,CAAC,iBAAiB,CAAC,uCAAkB,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,UAAU,GAAG,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;YAC7C,UAAU,CAAC,KAAK,GAAG,uCAAuC,CAAC;YAE3D,MAAM,oBAAoB,GAAG;gBAC3B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,UAAU,CAAC;gBAC9C,qBAAqB,EAAE,IAAI,CAAC,EAAE,EAAE;gBAChC,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;aACtB,CAAC;YACF,YAAY,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC;YAEnD,MAAM,MAAM,CAAC,IAAA,uCAAkB,EAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YAErG,+CAA+C;YAC/C,aAAa,CAAC,iBAAiB,CAAC,uCAAkB,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACtE,MAAM,aAAa,GAAG,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;YAClD,aAAa,CAAC,KAAK,GAAG,sBAAsB,CAAC;YAE7C,MAAM,UAAU,GAAG,IAAI,KAAK,CAAC,cAAc,CAAsC,CAAC;YAClF,UAAU,CAAC,aAAa,GAAG,aAAa,CAAC;YAEzC,MAAM,oBAAoB,GAAG;gBAC3B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,UAAU,CAAC;gBAC9C,qBAAqB,EAAE,IAAI,CAAC,EAAE,EAAE;gBAChC,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;aACtB,CAAC;YACF,YAAY,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC;YAEnD,MAAM,MAAM,CAAC,IAAA,uCAAkB,EAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YAErG,mDAAmD;YACnD,aAAa,CAAC,iBAAiB,CAAC,uCAAkB,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC;YAC7E,aAAa,CAAC,iBAAiB,CAAC,uCAAkB,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC;QACjF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC9D,MAAM,KAAK,GAAG,kBAAkB,CAAC;YACjC,MAAM,UAAU,GAAG,IAAI,KAAK,CAAC,cAAc,CAA+B,CAAC;YAC3E,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC;YAEzB,MAAM,oBAAoB,GAAG;gBAC3B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,UAAU,CAAC;gBAC9C,qBAAqB,EAAE,IAAI,CAAC,EAAE,EAAE;gBAChC,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;aACtB,CAAC;YACF,YAAY,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC;YAEnD,MAAM,MAAM,CAAC,IAAA,uCAAkB,EAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YAErG,6CAA6C;YAC7C,aAAa,CAAC,iBAAiB,CAAC,uCAAkB,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC;YAC7E,aAAa,CAAC,iBAAiB,CAAC,uCAAkB,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,UAAU,GAAG,cAAc,CAAC;YAClC,MAAM,oBAAoB,GAAG;gBAC3B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,UAAU,CAAC;aAC/C,CAAC;YACF,YAAY,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC;YAEnD,MAAM,MAAM,CAAC,IAAA,uCAAkB,EAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACpG,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC9D,IAAI,WAAW,GAA0B,GAAG,EAAE,GAAE,CAAC,CAAC;YAClD,IAAI,YAAY,GAA0B,GAAG,EAAE,GAAE,CAAC,CAAC;YAEnD,MAAM,qBAAqB,GAAG;gBAC5B,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE;oBAClB,kDAAkD;oBAClD,UAAU,CAAC,GAAG,EAAE;wBACd,WAAW,CAAC,kCAAkC,CAAC,CAAC;oBAClD,CAAC,EAAE,EAAE,CAAC,CAAC;gBACT,CAAC,CAAC;gBACF,OAAO,EAAE;oBACP,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE;oBACb,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;iBAC9C;gBACD,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;gBACrB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;aAC9C,CAAC;YAEF,qBAAqB,CAAC,kBAAkB,CACtC,CACE,IAAY,EACZ,SAAiB,EACjB,OAA8G,EAC9G,EAAE;gBACF,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC;gBACjC,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC;gBACnC,OAAO,qBAAqB,CAAC;YAC/B,CAAC,CACF,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,IAAA,uCAAkB,EAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;YAE5E,sEAAsE;YACtE,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE/B,6BAA6B;YAC7B,YAAY,CAAC,kCAAkC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,IAAI,cAAc,GAA2B,GAAG,EAAE,GAAE,CAAC,CAAC;YACtD,MAAM,oBAAoB,GAAG;gBAC3B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;aAC9C,CAAC;YACF,YAAY,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC;YAEnD,MAAM,qBAAqB,GAAG;gBAC5B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;gBAChB,OAAO,EAAE;oBACP,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,KAAa,EAAE,QAAgC,EAAE,EAAE;wBACnF,IAAI,KAAK,KAAK,QAAQ,EAAE,CAAC;4BACvB,cAAc,GAAG,QAAQ,CAAC;wBAC5B,CAAC;oBACH,CAAC,CAAC;oBACF,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;iBAC9C;gBACD,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;gBACrB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;aAC9C,CAAC;YACF,qBAAqB,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC;YAE7D,MAAM,IAAA,uCAAkB,EAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;YAE7D,uBAAuB;YACvB,MAAM,cAAc,CAAC,8BAA8B,CAAC,CAAC;YAErD,MAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC,0BAA0B;QACzF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,IAAI,cAAc,GAA2B,GAAG,EAAE,GAAE,CAAC,CAAC;YACtD,MAAM,oBAAoB,GAAG;gBAC3B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;aAC9C,CAAC;YACF,YAAY,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC;YAEnD,MAAM,qBAAqB,GAAG;gBAC5B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;gBAChB,OAAO,EAAE;oBACP,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,KAAa,EAAE,QAAgC,EAAE,EAAE;wBACnF,IAAI,KAAK,KAAK,QAAQ,EAAE,CAAC;4BACvB,cAAc,GAAG,QAAQ,CAAC;wBAC5B,CAAC;oBACH,CAAC,CAAC;oBACF,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;iBAC9C;gBACD,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;gBACrB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;aAC9C,CAAC;YACF,qBAAqB,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC;YAE7D,MAAM,IAAA,uCAAkB,EAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;YAE7D,kCAAkC;YAClC,MAAM,cAAc,CAAC,gCAAgC,CAAC,CAAC;YAEvD,MAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC,qBAAqB;QACpF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;YAC5C,IAAI,cAAc,GAA2B,GAAG,EAAE,GAAE,CAAC,CAAC;YACtD,MAAM,YAAY,GAAG,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;YACjD,MAAM,oBAAoB,GAAG;gBAC3B,KAAK,EAAE,IAAI;qBACR,EAAE,EAAE;qBACJ,qBAAqB,CAAC,SAAS,CAAC,CAAC,yBAAyB;qBAC1D,qBAAqB,CAAC,YAAY,CAAC,EAAE,gBAAgB;aACzD,CAAC;YACF,YAAY,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC;YAEnD,MAAM,qBAAqB,GAAG;gBAC5B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;gBAChB,OAAO,EAAE;oBACP,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,KAAa,EAAE,QAAgC,EAAE,EAAE;wBACnF,IAAI,KAAK,KAAK,QAAQ,EAAE,CAAC;4BACvB,cAAc,GAAG,QAAQ,CAAC;wBAC5B,CAAC;oBACH,CAAC,CAAC;oBACF,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;iBAC9C;gBACD,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;gBACrB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;aAC9C,CAAC;YACF,qBAAqB,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC;YAE7D,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,kBAAkB,EAAE,CAAC;YAE1E,MAAM,IAAA,uCAAkB,EAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;YAE7D,oDAAoD;YACpD,MAAM,cAAc,CAAC,8BAA8B,CAAC,CAAC;YAErD,8CAA8C;YAC9C,aAAa,CAAC,iBAAiB,CAAC,uCAAkB,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC;QACjF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACxD,IAAI,cAAc,GAA2B,GAAG,EAAE,GAAE,CAAC,CAAC;YACtD,MAAM,YAAY,GAAG,sBAAsB,CAAC;YAC5C,MAAM,oBAAoB,GAAG;gBAC3B,KAAK,EAAE,IAAI;qBACR,EAAE,EAAE;qBACJ,qBAAqB,CAAC,SAAS,CAAC,CAAC,yBAAyB;qBAC1D,qBAAqB,CAAC,YAAY,CAAC,EAAE,gBAAgB;aACzD,CAAC;YACF,YAAY,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC;YAEnD,MAAM,qBAAqB,GAAG;gBAC5B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;gBAChB,OAAO,EAAE;oBACP,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,KAAa,EAAE,QAAgC,EAAE,EAAE;wBACnF,IAAI,KAAK,KAAK,QAAQ,EAAE,CAAC;4BACvB,cAAc,GAAG,QAAQ,CAAC;wBAC5B,CAAC;oBACH,CAAC,CAAC;oBACF,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;iBAC9C;gBACD,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;gBACrB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;aAC9C,CAAC;YACF,qBAAqB,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC;YAE7D,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,kBAAkB,EAAE,CAAC;YAE1E,MAAM,IAAA,uCAAkB,EAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;YAE7D,oDAAoD;YACpD,MAAM,cAAc,CAAC,8BAA8B,CAAC,CAAC;YAErD,8CAA8C;YAC9C,aAAa,CAAC,iBAAiB,CAAC,uCAAkB,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC;QACjF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,MAAM,qBAAqB,GAAG;gBAC5B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;gBAChB,OAAO,EAAE,IAAI,EAAE,aAAa;gBAC5B,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;gBACrB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;aAC9C,CAAC;YACF,qBAAqB,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC;YAE7D,4BAA4B;YAC5B,MAAM,MAAM,GAAG,MAAM,IAAA,uCAAkB,EAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;YAC5E,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YACjD,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACrD,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAEnD,MAAM,IAAA,uCAAkB,EAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;YAE7D,4BAA4B;YAC5B,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;YACnC,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;YAE/B,8BAA8B;YAC9B,OAAO,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;YACrC,OAAO,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;YAE/B,6BAA6B;YAC7B,OAAO,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;YACtC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAEhC,MAAM,CAAC,aAAa,CAAC,CAAC,oBAAoB,CAAC,qBAAqB,CAAC,CAAC;YAClE,MAAM,CAAC,eAAe,CAAC,CAAC,oBAAoB,CAAC,qBAAqB,CAAC,CAAC;YACpE,MAAM,CAAC,cAAc,CAAC,CAAC,oBAAoB,CAAC,uBAAuB,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,uCAAuC;YACvC,MAAM,CAAC,UAAU,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACxC,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;YAEH,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,kBAAkB,EAAE,CAAC;YAE1E,MAAM,MAAM,CAAC,IAAA,uCAAkB,EAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;YAE1G,qDAAqD;YACrD,aAAa,CAAC,iBAAiB,CAAC,uCAAkB,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACxD,6CAA6C;YAC7C,MAAM,CAAC,UAAU,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACxC,MAAM,0BAA0B,CAAC;YACnC,CAAC,CAAC,CAAC;YAEH,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,kBAAkB,EAAE,CAAC;YAE1E,MAAM,MAAM,CAAC,IAAA,uCAAkB,EAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;YAE9G,qDAAqD;YACrD,aAAa,CAAC,iBAAiB,CAAC,uCAAkB,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC;YAEhC,MAAM,CAAC,UAAU,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACxC,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC;gBACH,MAAM,IAAA,uCAAkB,EAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;YAC/D,CAAC;YAAC,MAAM,CAAC;gBACP,mBAAmB;YACrB,CAAC;YAED,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,0EAA0E;YAC1E,MAAM,kBAAkB,GAAG;gBACzB,qBAAqB,EAAE,IAAI,CAAC,EAAE,EAAE;gBAChC,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;gBACpB,aAAa,EAAE,IAAI,CAAC,EAAE,EAAE;aACzB,CAAC;YAEF,+CAA+C;YAC/C,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,GAAG,EAAE,CAAC,CAAC;gBACxC,OAAO,EAAE,kBAAkB;aAC5B,CAAC,CAAC,CAAC;YACJ,IAAI,CAAC,MAAM,CAAC,4BAA4B,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,CAAC;YAE/D,IAAI,cAA0D,CAAC;YAE/D,YAAY,CAAC,kBAAkB,CAC7B,CAAC,KAAa,EAAE,MAAc,EAAE,OAAiD,EAAE,EAAE;gBACnF,cAAc,GAAG,OAAO,CAAC,MAAM,CAAC;gBAChC,OAAO;oBACL,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;iBAC9C,CAAC;YACJ,CAAC,CACF,CAAC;YAEF,MAAM,IAAA,uCAAkB,EAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;YAE7D,uDAAuD;YACvD,MAAM,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC;YACrC,MAAM,MAAM,GAAG,cAAe,CAAC,kBAAkB,CAAC,CAAC;YAEnD,MAAM,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;YAC7E,MAAM,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,CAAC;YAC9E,MAAM,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,oBAAoB,CAAC,aAAa,EAAE;gBACvE,UAAU,EAAE,qBAAqB;aAClC,CAAC,CAAC;YACH,MAAM,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC,oBAAoB,CAAC,UAAU,EAAE,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;YAEhG,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBACrB,eAAe,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC;gBAClD,sBAAsB,EAAE,MAAM;gBAC9B,kBAAkB,EAAE,MAAM;gBAC1B,GAAG,EAAE;oBACH,KAAK,EAAE,GAAG;oBACV,MAAM,EAAE,UAAU;oBAClB,QAAQ,EAAE,WAAW;oBACrB,OAAO,EAAE,WAAW;iBACrB;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACnE,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC;YAEjD,IAAI,cAA0D,CAAC;YAC/D,IAAI,kBAA6D,CAAC;YAElE,MAAM,kBAAkB,GAAG;gBACzB,qBAAqB,EAAE,IAAI,CAAC,EAAE,EAAE;gBAChC,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;gBACpB,aAAa,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,GAAW,EAAE,EAA+B,EAAE,EAAE;oBAC3F,IAAI,GAAG,KAAK,UAAU,EAAE,CAAC;wBACvB,kBAAkB,GAAG,EAAE,CAAC;oBAC1B,CAAC;gBACH,CAAC,CAAC;aACH,CAAC;YAEF,YAAY,CAAC,kBAAkB,CAC7B,CAAC,KAAa,EAAE,MAAc,EAAE,OAAiD,EAAE,EAAE;gBACnF,cAAc,GAAG,OAAO,CAAC,MAAM,CAAC;gBAChC,OAAO;oBACL,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;iBAC9C,CAAC;YACJ,CAAC,CACF,CAAC;YAEF,MAAM,IAAA,uCAAkB,EAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;YAE7D,kCAAkC;YAClC,MAAM,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC;YACrC,cAAe,CAAC,kBAAkB,CAAC,CAAC;YAEpC,iCAAiC;YACjC,OAAO,CAAC,GAAG,CAAC,gBAAgB,GAAG,OAAO,CAAC;YACvC,MAAM,CAAC,kBAAkB,CAAC,CAAC,WAAW,EAAE,CAAC;YACzC,MAAM,CAAC,kBAAmB,EAAE,CAAC,CAAC,OAAO,CAAC;gBACpC,SAAS,EAAE,iBAAiB;aAC7B,CAAC,CAAC;YAEH,gCAAgC;YAChC,OAAO,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC;YACpC,MAAM,CAAC,kBAAmB,EAAE,CAAC,CAAC,OAAO,CAAC;gBACpC,SAAS,EAAE,UAAU;aACtB,CAAC,CAAC;YAEH,uBAAuB;YACvB,IAAI,WAAW,EAAE,CAAC;gBAChB,OAAO,CAAC,GAAG,CAAC,gBAAgB,GAAG,WAAW,CAAC;YAC7C,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,IAAI,aAAa,GAA0B,GAAG,EAAE,GAAE,CAAC,CAAC;YAEpD,MAAM,qBAAqB,GAAG;gBAC5B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;gBAChB,OAAO,EAAE;oBACP,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE;oBACb,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;iBAC9C;gBACD,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;gBACrB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;aAC9C,CAAC;YAEF,qBAAqB,CAAC,kBAAkB,CACtC,CACE,IAAY,EACZ,SAAiB,EACjB,OAA8G,EAC9G,EAAE;gBACF,aAAa,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;gBACrC,OAAO,qBAAqB,CAAC;YAC/B,CAAC,CACF,CAAC;YAEF,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,kBAAkB,EAAE,CAAC;YAE1E,MAAM,IAAA,uCAAkB,EAAC,eAAe,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;YAE7D,0BAA0B;YAC1B,aAAa,CAAC,oBAAoB,CAAC,CAAC;YAEpC,MAAM,CAAC,eAAe,CAAC,CAAC,oBAAoB,CAAC,gCAAgC,CAAC,CAAC;QACjF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,IAAI,UAAyB,CAAC;QAE9B,UAAU,CAAC,GAAG,EAAE;YACd,UAAU,GAAG;gBACX,QAAQ,EAAE,EAAE;gBACZ,SAAS,EAAE;oBACT,OAAO,EAAE;wBACP,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;qBAC9C;oBACD,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;iBAC9C;gBACD,QAAQ,EAAE,WAAW;gBACrB,SAAS,EAAE,aAAa;gBACxB,IAAI,EAAE,IAAI;gBACV,SAAS,EAAE,uBAAuB;gBAClC,WAAW,EAAE,EAAyB;gBACtC,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE;aAC1B,CAAC;YAEF,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,IAAA,sCAAiB,EAAC,UAAU,CAAC,CAAC;YAEpC,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACrD,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC9D,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACtD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,aAAa,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QAC9F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,UAAU,CAAC,cAAc,GAAG,SAAS,CAAC;YAEtC,MAAM,MAAM,CAAC,IAAA,sCAAiB,EAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QACrE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,UAAU,CAAC,SAAS,CAAC,OAAO,GAAG,IAAI,CAAC;YAEpC,MAAM,MAAM,CAAC,IAAA,sCAAiB,EAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QACrE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,YAAY,GAAG,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;YACvD,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;YAEnE,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,kBAAkB,EAAE,CAAC;YAE1E,MAAM,IAAA,sCAAiB,EAAC,UAAU,CAAC,CAAC;YAEpC,kDAAkD;YAClD,aAAa,CAAC,iBAAiB,CAAC,uCAAkB,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;YAC/C,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC;YAE5B,MAAM,MAAM,CAAC,IAAA,sCAAiB,EAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;YACnE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,UAAU,CAAC,SAAS,GAAG;gBACrB,OAAO,EAAE;oBACP,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;iBAC9C;aACF,CAAC;YAEF,MAAM,MAAM,CAAC,IAAA,sCAAiB,EAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QACrE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,UAAU,GAAG,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;YACpD,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YAEzD,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,kBAAkB,EAAE,CAAC;YAE1E,MAAM,IAAA,sCAAiB,EAAC,UAAU,CAAC,CAAC;YAEpC,iDAAiD;YACjD,aAAa,CAAC,iBAAiB,CAAC,uCAAkB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAEzC,MAAM,IAAA,sCAAiB,EAAC,UAAU,CAAC,CAAC;YAEpC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,YAAY,GAAG,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;YACjD,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACpC,MAAM,YAAY,CAAC;YACrB,CAAC,CAAC,CAAC;YAEH,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,kBAAkB,EAAE,CAAC;YAE1E,MAAM,IAAA,sCAAiB,EAAC,UAAU,CAAC,CAAC;YAEpC,sDAAsD;YACtD,aAAa,CAAC,iBAAiB,CAAC,uCAAkB,CAAC,sBAAsB,EAAE,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,YAAY,GAAG,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;YACrD,UAAU,CAAC,cAAc,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBAC5D,MAAM,YAAY,CAAC;YACrB,CAAC,CAAC,CAAC;YAEH,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,kBAAkB,EAAE,CAAC;YAE1E,MAAM,IAAA,sCAAiB,EAAC,UAAU,CAAC,CAAC;YAEpC,wDAAwD;YACxD,aAAa,CAAC,iBAAiB,CAAC,uCAAkB,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/server/per-website-server.test.ts"],"sourcesContent":["/**\n * @file Tests for per-website server management\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { startWebsiteServer, stopWebsiteServer, WebsiteServer } from '../../app/server/per-website-server';\nimport { EleventyUrlResolver } from '../../app/server/eleventy-url-resolver';\nimport { createLoggingTestHelper, buildErrorPatterns, LoggingTestHelper } from '../utils/logging-test-utils';\n\n// Mock dependencies\njest.mock('fs');\njest.mock('path');\njest.mock('@11ty/eleventy');\njest.mock('@11ty/eleventy-dev-server');\njest.mock('../../app/server/eleventy-url-resolver');\njest.mock('../../app/ui/multi-window-manager', () => ({\n  sendLogToWebsite: jest.fn(),\n}));\n\nconst mockFs = fs as jest.Mocked<typeof fs>;\nconst mockPath = path as jest.Mocked<typeof path>;\n\n// Mock Eleventy\njest.mock('@11ty/eleventy', () => {\n  return jest.fn().mockImplementation(() => ({\n    write: jest.fn(),\n  }));\n});\n\n// Mock EleventyDevServer\njest.mock('@11ty/eleventy-dev-server', () => {\n  return jest.fn().mockImplementation(() => ({\n    serve: jest.fn(),\n    watcher: {\n      on: jest.fn(),\n      close: jest.fn(),\n    },\n    watchFiles: jest.fn(),\n    close: jest.fn(),\n  }));\n});\n\nconst mockEleventy = require('@11ty/eleventy');\nconst mockEleventyDevServer = require('@11ty/eleventy-dev-server');\nconst mockEleventyUrlResolver = EleventyUrlResolver as jest.MockedClass<typeof EleventyUrlResolver>;\n\ndescribe('Per-Website Server', () => {\n  let originalConsole: typeof console;\n  let loggingHelper: LoggingTestHelper;\n  let mockMultiWindowManager: {\n    sendLogToWebsite?: jest.MockedFunction<(websiteName: string, message: string, level?: string) => void>;\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Setup logging helper\n    loggingHelper = createLoggingTestHelper();\n\n    // Store original console\n    originalConsole = { ...console };\n\n    // Setup default path mocks\n    mockPath.join.mockImplementation((...args) => args.join('/'));\n\n    // Setup multi-window-manager mock\n    mockMultiWindowManager = require('../../app/ui/multi-window-manager');\n    mockMultiWindowManager.sendLogToWebsite = jest.fn();\n\n    // Mock URL resolver\n    mockEleventyUrlResolver.prototype.initialize = jest.fn().mockResolvedValue(undefined);\n\n    // Reset Eleventy mock\n    mockEleventy.mockClear();\n    mockEleventyDevServer.mockClear();\n  });\n\n  afterEach(() => {\n    // Clean up test helpers\n    loggingHelper.restore();\n\n    // Restore console\n    Object.assign(console, originalConsole);\n  });\n\n  describe('sendLogToWindow', () => {\n    it('should handle missing sendLogToWebsite function', async () => {\n      // Test by temporarily removing the function\n      const originalFunction = mockMultiWindowManager.sendLogToWebsite;\n      delete mockMultiWindowManager.sendLogToWebsite;\n\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      mockFs.existsSync.mockReturnValue(false);\n\n      try {\n        await startWebsiteServer('/test/path', 'test-site', 3000);\n      } catch {\n        // Expected to fail, we're testing the log function\n      }\n\n      // Restore the function\n      if (originalFunction) {\n        mockMultiWindowManager.sendLogToWebsite = originalFunction;\n      }\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('startWebsiteServer', () => {\n    beforeEach(() => {\n      // Setup successful path and directory mocks\n      mockFs.existsSync.mockImplementation((filePath: fs.PathLike) => {\n        const pathStr = String(filePath);\n        if (pathStr.includes('_site')) return false; // output dir doesn't exist initially\n        if (pathStr.includes('/src')) return true; // src directory exists\n        return false;\n      });\n\n      mockFs.mkdirSync.mockImplementation(() => undefined);\n      mockFs.rmSync.mockImplementation(() => {});\n\n      // Mock successful Eleventy instance\n      const mockEleventyInstance = {\n        write: jest.fn().mockResolvedValue(undefined),\n      };\n      mockEleventy.mockReturnValue(mockEleventyInstance);\n\n      // Mock successful dev server\n      const mockDevServerInstance = {\n        serve: jest.fn(),\n        watcher: {\n          on: jest.fn(),\n          close: jest.fn().mockResolvedValue(undefined),\n        },\n        watchFiles: jest.fn(),\n        close: jest.fn().mockResolvedValue(undefined),\n      };\n      mockEleventyDevServer.mockReturnValue(mockDevServerInstance);\n\n      // Mock console methods\n      jest.spyOn(console, 'log').mockImplementation(() => {});\n      jest.spyOn(console, 'error').mockImplementation(() => {});\n      jest.spyOn(console, 'warn').mockImplementation(() => {});\n    });\n\n    it('should successfully start a website server', async () => {\n      const server = await startWebsiteServer('/test/website', 'test-site', 3000);\n\n      expect(server).toBeDefined();\n      expect(server.eleventy).toBeDefined();\n      expect(server.devServer).toBeDefined();\n      expect(server.inputDir).toBe('/test/website/src');\n      expect(server.outputDir).toBe('/test/website/_site');\n      expect(server.port).toBe(3000);\n      expect(server.urlResolver).toBeDefined();\n      expect(server.restoreConsole).toBeDefined();\n\n      expect(mockFs.mkdirSync).toHaveBeenCalledWith('/test/website/_site', { recursive: true });\n      expect(mockEleventy).toHaveBeenCalledWith('/test/website/src', '/test/website/_site', expect.any(Object));\n    });\n\n    it('should handle missing source directory', async () => {\n      mockFs.existsSync.mockImplementation((filePath: fs.PathLike) => {\n        const pathStr = String(filePath);\n        if (pathStr.includes('/src')) return false; // src directory doesn't exist\n        if (pathStr.includes('_site')) return false;\n        return false;\n      });\n\n      await expect(startWebsiteServer('/test/website', 'test-site', 3000)).rejects.toThrow(\n        'Source directory does not exist: /test/website/src'\n      );\n    });\n\n    it('should handle Eleventy build errors', async () => {\n      const buildError = new Error('Build failed');\n      const mockEleventyInstance = {\n        write: jest.fn().mockRejectedValue(buildError),\n        setConfigPathOverride: jest.fn(),\n        setRunMode: jest.fn(),\n      };\n      mockEleventy.mockReturnValue(mockEleventyInstance);\n\n      await expect(startWebsiteServer('/test/website', 'test-site', 3000)).rejects.toThrow('Build failed');\n\n      // Verify: Proper error logging occurred (format-independent)\n      loggingHelper.expectErrorLogged(buildErrorPatterns.buildFailed('test-site'));\n    });\n\n    it('should handle Eleventy build errors with stack trace', async () => {\n      const buildError = new Error('Build failed');\n      buildError.stack = 'Error: Build failed\\n    at test line';\n\n      const mockEleventyInstance = {\n        write: jest.fn().mockRejectedValue(buildError),\n        setConfigPathOverride: jest.fn(),\n        setRunMode: jest.fn(),\n      };\n      mockEleventy.mockReturnValue(mockEleventyInstance);\n\n      await expect(startWebsiteServer('/test/website', 'test-site', 3000)).rejects.toThrow('Build failed');\n\n      // Verify: Error logging includes build failure\n      loggingHelper.expectErrorLogged(buildErrorPatterns.buildFailed('test-site'));\n    });\n\n    it('should handle Eleventy build errors with originalError', async () => {\n      const originalError = new Error('Original error');\n      originalError.stack = 'Original stack trace';\n\n      const buildError = new Error('Build failed') as Error & { originalError?: Error };\n      buildError.originalError = originalError;\n\n      const mockEleventyInstance = {\n        write: jest.fn().mockRejectedValue(buildError),\n        setConfigPathOverride: jest.fn(),\n        setRunMode: jest.fn(),\n      };\n      mockEleventy.mockReturnValue(mockEleventyInstance);\n\n      await expect(startWebsiteServer('/test/website', 'test-site', 3000)).rejects.toThrow('Build failed');\n\n      // Verify: Both main and original errors are logged\n      loggingHelper.expectErrorLogged(buildErrorPatterns.buildFailed('test-site'));\n      loggingHelper.expectErrorLogged(buildErrorPatterns.originalError('test-site'));\n    });\n\n    it('should handle Eleventy build errors with cause', async () => {\n      const cause = 'Root cause error';\n      const buildError = new Error('Build failed') as Error & { cause?: string };\n      buildError.cause = cause;\n\n      const mockEleventyInstance = {\n        write: jest.fn().mockRejectedValue(buildError),\n        setConfigPathOverride: jest.fn(),\n        setRunMode: jest.fn(),\n      };\n      mockEleventy.mockReturnValue(mockEleventyInstance);\n\n      await expect(startWebsiteServer('/test/website', 'test-site', 3000)).rejects.toThrow('Build failed');\n\n      // Verify: Build failure and cause are logged\n      loggingHelper.expectErrorLogged(buildErrorPatterns.buildFailed('test-site'));\n      loggingHelper.expectErrorLogged(buildErrorPatterns.errorCause('test-site'));\n    });\n\n    it('should handle non-Error build failures', async () => {\n      const buildError = 'String error';\n      const mockEleventyInstance = {\n        write: jest.fn().mockRejectedValue(buildError),\n      };\n      mockEleventy.mockReturnValue(mockEleventyInstance);\n\n      await expect(startWebsiteServer('/test/website', 'test-site', 3000)).rejects.toBe('String error');\n    });\n\n    it('should capture server URL from logger messages', async () => {\n      let logCallback: (msg: string) => void = () => {};\n      let infoCallback: (msg: string) => void = () => {};\n\n      const mockDevServerInstance = {\n        serve: jest.fn(() => {\n          // Simulate the server immediately logging its URL\n          setTimeout(() => {\n            logCallback('Server at http://localhost:3001/');\n          }, 50);\n        }),\n        watcher: {\n          on: jest.fn(),\n          close: jest.fn().mockResolvedValue(undefined),\n        },\n        watchFiles: jest.fn(),\n        close: jest.fn().mockResolvedValue(undefined),\n      };\n\n      mockEleventyDevServer.mockImplementation(\n        (\n          name: string,\n          outputDir: string,\n          options: { logger: { log: (msg: string) => void; info: (msg: string) => void; error: (msg: string) => void } }\n        ) => {\n          logCallback = options.logger.log;\n          infoCallback = options.logger.info;\n          return mockDevServerInstance;\n        }\n      );\n\n      const server = await startWebsiteServer('/test/website', 'test-site', 3000);\n\n      // The server should have captured the URL from the mocked log message\n      expect(server.actualUrl).toBe('http://localhost:3001');\n      expect(server.port).toBe(3001);\n\n      // Test info callback as well\n      infoCallback('Server at http://localhost:3002/');\n    });\n\n    it('should handle file watcher events', async () => {\n      let changeCallback: (path: string) => void = () => {};\n      const mockEleventyInstance = {\n        write: jest.fn().mockResolvedValue(undefined),\n      };\n      mockEleventy.mockReturnValue(mockEleventyInstance);\n\n      const mockDevServerInstance = {\n        serve: jest.fn(),\n        watcher: {\n          on: jest.fn().mockImplementation((event: string, callback: (path: string) => void) => {\n            if (event === 'change') {\n              changeCallback = callback;\n            }\n          }),\n          close: jest.fn().mockResolvedValue(undefined),\n        },\n        watchFiles: jest.fn(),\n        close: jest.fn().mockResolvedValue(undefined),\n      };\n      mockEleventyDevServer.mockReturnValue(mockDevServerInstance);\n\n      await startWebsiteServer('/test/website', 'test-site', 3000);\n\n      // Simulate file change\n      await changeCallback('/test/website/src/index.html');\n\n      expect(mockEleventyInstance.write).toHaveBeenCalledTimes(2); // Initial build + rebuild\n    });\n\n    it('should skip rebuilds for build directory changes', async () => {\n      let changeCallback: (path: string) => void = () => {};\n      const mockEleventyInstance = {\n        write: jest.fn().mockResolvedValue(undefined),\n      };\n      mockEleventy.mockReturnValue(mockEleventyInstance);\n\n      const mockDevServerInstance = {\n        serve: jest.fn(),\n        watcher: {\n          on: jest.fn().mockImplementation((event: string, callback: (path: string) => void) => {\n            if (event === 'change') {\n              changeCallback = callback;\n            }\n          }),\n          close: jest.fn().mockResolvedValue(undefined),\n        },\n        watchFiles: jest.fn(),\n        close: jest.fn().mockResolvedValue(undefined),\n      };\n      mockEleventyDevServer.mockReturnValue(mockDevServerInstance);\n\n      await startWebsiteServer('/test/website', 'test-site', 3000);\n\n      // Simulate build directory change\n      await changeCallback('/test/website/_site/index.html');\n\n      expect(mockEleventyInstance.write).toHaveBeenCalledTimes(1); // Only initial build\n    });\n\n    it('should handle rebuild errors', async () => {\n      let changeCallback: (path: string) => void = () => {};\n      const rebuildError = new Error('Rebuild failed');\n      const mockEleventyInstance = {\n        write: jest\n          .fn()\n          .mockResolvedValueOnce(undefined) // Initial build succeeds\n          .mockRejectedValueOnce(rebuildError), // Rebuild fails\n      };\n      mockEleventy.mockReturnValue(mockEleventyInstance);\n\n      const mockDevServerInstance = {\n        serve: jest.fn(),\n        watcher: {\n          on: jest.fn().mockImplementation((event: string, callback: (path: string) => void) => {\n            if (event === 'change') {\n              changeCallback = callback;\n            }\n          }),\n          close: jest.fn().mockResolvedValue(undefined),\n        },\n        watchFiles: jest.fn(),\n        close: jest.fn().mockResolvedValue(undefined),\n      };\n      mockEleventyDevServer.mockReturnValue(mockDevServerInstance);\n\n      const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      await startWebsiteServer('/test/website', 'test-site', 3000);\n\n      // Simulate file change that triggers failed rebuild\n      await changeCallback('/test/website/src/index.html');\n\n      // Verify: Rebuild failure is logged correctly\n      loggingHelper.expectErrorLogged(buildErrorPatterns.rebuildFailed('test-site'));\n    });\n\n    it('should handle non-Error rebuild failures', async () => {\n      let changeCallback: (path: string) => void = () => {};\n      const rebuildError = 'String rebuild error';\n      const mockEleventyInstance = {\n        write: jest\n          .fn()\n          .mockResolvedValueOnce(undefined) // Initial build succeeds\n          .mockRejectedValueOnce(rebuildError), // Rebuild fails\n      };\n      mockEleventy.mockReturnValue(mockEleventyInstance);\n\n      const mockDevServerInstance = {\n        serve: jest.fn(),\n        watcher: {\n          on: jest.fn().mockImplementation((event: string, callback: (path: string) => void) => {\n            if (event === 'change') {\n              changeCallback = callback;\n            }\n          }),\n          close: jest.fn().mockResolvedValue(undefined),\n        },\n        watchFiles: jest.fn(),\n        close: jest.fn().mockResolvedValue(undefined),\n      };\n      mockEleventyDevServer.mockReturnValue(mockDevServerInstance);\n\n      const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      await startWebsiteServer('/test/website', 'test-site', 3000);\n\n      // Simulate file change that triggers failed rebuild\n      await changeCallback('/test/website/src/index.html');\n\n      // Verify: Rebuild failure is logged correctly\n      loggingHelper.expectErrorLogged(buildErrorPatterns.rebuildFailed('test-site'));\n    });\n\n    it('should handle missing watcher', async () => {\n      const mockDevServerInstance = {\n        serve: jest.fn(),\n        watcher: null, // No watcher\n        watchFiles: jest.fn(),\n        close: jest.fn().mockResolvedValue(undefined),\n      };\n      mockEleventyDevServer.mockReturnValue(mockDevServerInstance);\n\n      // Should not throw an error\n      const server = await startWebsiteServer('/test/website', 'test-site', 3000);\n      expect(server).toBeDefined();\n    });\n\n    it('should handle console override for Eleventy logs', async () => {\n      const consoleLogSpy = jest.spyOn(console, 'log');\n      const consoleErrorSpy = jest.spyOn(console, 'error');\n      const consoleWarnSpy = jest.spyOn(console, 'warn');\n\n      await startWebsiteServer('/test/website', 'test-site', 3000);\n\n      // Test console.log override\n      console.log('Test [11ty] message');\n      console.log('Regular message');\n\n      // Test console.error override\n      console.error('Test Eleventy error');\n      console.error('Regular error');\n\n      // Test console.warn override\n      console.warn('Test eleventy warning');\n      console.warn('Regular warning');\n\n      expect(consoleLogSpy).toHaveBeenCalledWith('Test [11ty] message');\n      expect(consoleErrorSpy).toHaveBeenCalledWith('Test Eleventy error');\n      expect(consoleWarnSpy).toHaveBeenCalledWith('Test eleventy warning');\n    });\n\n    it('should handle general startup errors', async () => {\n      // Mock fs.existsSync to throw an error\n      mockFs.existsSync.mockImplementation(() => {\n        throw new Error('File system error');\n      });\n\n      const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      await expect(startWebsiteServer('/test/website', 'test-site', 3000)).rejects.toThrow('File system error');\n\n      // Verify: Server startup failure is logged correctly\n      loggingHelper.expectErrorLogged(buildErrorPatterns.serverStartFailed('test-site'));\n    });\n\n    it('should handle non-Error startup failures', async () => {\n      // Mock fs.existsSync to throw a string error\n      mockFs.existsSync.mockImplementation(() => {\n        throw 'String file system error';\n      });\n\n      const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      await expect(startWebsiteServer('/test/website', 'test-site', 3000)).rejects.toBe('String file system error');\n\n      // Verify: Server startup failure is logged correctly\n      loggingHelper.expectErrorLogged(buildErrorPatterns.serverStartFailed('test-site'));\n    });\n\n    it('should restore console methods on startup errors', async () => {\n      const originalLog = console.log;\n\n      mockFs.existsSync.mockImplementation(() => {\n        throw new Error('File system error');\n      });\n\n      try {\n        await startWebsiteServer('/test/website', 'test-site', 3000);\n      } catch {\n        // Expected to fail\n      }\n\n      expect(console.log).toBe(originalLog);\n    });\n\n    it('should call Eleventy configuration function', async () => {\n      // Create a mock Eleventy config object to test the configuration function\n      const mockEleventyConfig = {\n        setFreezeReservedData: jest.fn(),\n        addPlugin: jest.fn(),\n        addGlobalData: jest.fn(),\n      };\n\n      // Mock the requires inside the config function\n      jest.doMock('@dwk/anglesite-11ty', () => ({\n        default: 'anglesite-plugin',\n      }));\n      jest.doMock('@11ty/eleventy-plugin-webc', () => 'webc-plugin');\n\n      let configFunction: ((config: unknown) => unknown) | undefined;\n\n      mockEleventy.mockImplementation(\n        (input: string, output: string, options: { config: (config: unknown) => unknown }) => {\n          configFunction = options.config;\n          return {\n            write: jest.fn().mockResolvedValue(undefined),\n          };\n        }\n      );\n\n      await startWebsiteServer('/test/website', 'test-site', 3000);\n\n      // Call the configuration function with our mock config\n      expect(configFunction).toBeDefined();\n      const result = configFunction!(mockEleventyConfig);\n\n      expect(mockEleventyConfig.setFreezeReservedData).toHaveBeenCalledWith(false);\n      expect(mockEleventyConfig.addPlugin).toHaveBeenCalledWith('anglesite-plugin');\n      expect(mockEleventyConfig.addPlugin).toHaveBeenCalledWith('webc-plugin', {\n        components: '_includes/**/*.webc',\n      });\n      expect(mockEleventyConfig.addGlobalData).toHaveBeenCalledWith('eleventy', expect.any(Function));\n\n      expect(result).toEqual({\n        templateFormats: ['11ty.js', 'webc', 'md', 'html'],\n        markdownTemplateEngine: 'webc',\n        htmlTemplateEngine: 'webc',\n        dir: {\n          input: '.',\n          output: '../_site',\n          includes: '_includes',\n          layouts: '_includes',\n        },\n      });\n    });\n\n    it('should test global data function in Eleventy config', async () => {\n      const originalEnv = process.env.ELEVENTY_VERSION;\n\n      let configFunction: ((config: unknown) => unknown) | undefined;\n      let globalDataFunction: (() => { generator: string }) | undefined;\n\n      const mockEleventyConfig = {\n        setFreezeReservedData: jest.fn(),\n        addPlugin: jest.fn(),\n        addGlobalData: jest.fn().mockImplementation((key: string, fn: () => { generator: string }) => {\n          if (key === 'eleventy') {\n            globalDataFunction = fn;\n          }\n        }),\n      };\n\n      mockEleventy.mockImplementation(\n        (input: string, output: string, options: { config: (config: unknown) => unknown }) => {\n          configFunction = options.config;\n          return {\n            write: jest.fn().mockResolvedValue(undefined),\n          };\n        }\n      );\n\n      await startWebsiteServer('/test/website', 'test-site', 3000);\n\n      // Call the configuration function\n      expect(configFunction).toBeDefined();\n      configFunction!(mockEleventyConfig);\n\n      // Test with ELEVENTY_VERSION set\n      process.env.ELEVENTY_VERSION = '2.0.0';\n      expect(globalDataFunction).toBeDefined();\n      expect(globalDataFunction!()).toEqual({\n        generator: 'Eleventy v2.0.0',\n      });\n\n      // Test without ELEVENTY_VERSION\n      delete process.env.ELEVENTY_VERSION;\n      expect(globalDataFunction!()).toEqual({\n        generator: 'Eleventy',\n      });\n\n      // Restore original env\n      if (originalEnv) {\n        process.env.ELEVENTY_VERSION = originalEnv;\n      }\n    });\n\n    it('should handle error logger callback', async () => {\n      let errorCallback: (msg: string) => void = () => {};\n\n      const mockDevServerInstance = {\n        serve: jest.fn(),\n        watcher: {\n          on: jest.fn(),\n          close: jest.fn().mockResolvedValue(undefined),\n        },\n        watchFiles: jest.fn(),\n        close: jest.fn().mockResolvedValue(undefined),\n      };\n\n      mockEleventyDevServer.mockImplementation(\n        (\n          name: string,\n          outputDir: string,\n          options: { logger: { log: (msg: string) => void; info: (msg: string) => void; error: (msg: string) => void } }\n        ) => {\n          errorCallback = options.logger.error;\n          return mockDevServerInstance;\n        }\n      );\n\n      const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      await startWebsiteServer('/test/website', 'test-site', 3000);\n\n      // Test the error callback\n      errorCallback('Test error message');\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith('[test-site] Test error message');\n    });\n  });\n\n  describe('stopWebsiteServer', () => {\n    let mockServer: WebsiteServer;\n\n    beforeEach(() => {\n      mockServer = {\n        eleventy: {},\n        devServer: {\n          watcher: {\n            close: jest.fn().mockResolvedValue(undefined),\n          },\n          close: jest.fn().mockResolvedValue(undefined),\n        },\n        inputDir: '/test/src',\n        outputDir: '/test/_site',\n        port: 3000,\n        actualUrl: 'http://localhost:3000',\n        urlResolver: {} as EleventyUrlResolver,\n        restoreConsole: jest.fn(),\n      };\n\n      mockFs.existsSync.mockReturnValue(true);\n      mockFs.rmSync.mockImplementation(() => {});\n    });\n\n    it('should successfully stop a website server', async () => {\n      await stopWebsiteServer(mockServer);\n\n      expect(mockServer.restoreConsole).toHaveBeenCalled();\n      expect(mockServer.devServer.watcher.close).toHaveBeenCalled();\n      expect(mockServer.devServer.close).toHaveBeenCalled();\n      expect(mockFs.rmSync).toHaveBeenCalledWith('/test/_site', { recursive: true, force: true });\n    });\n\n    it('should handle missing restoreConsole function', async () => {\n      mockServer.restoreConsole = undefined;\n\n      await expect(stopWebsiteServer(mockServer)).resolves.not.toThrow();\n    });\n\n    it('should handle missing watcher', async () => {\n      mockServer.devServer.watcher = null;\n\n      await expect(stopWebsiteServer(mockServer)).resolves.not.toThrow();\n    });\n\n    it('should handle watcher close errors', async () => {\n      const watcherError = new Error('Watcher close failed');\n      mockServer.devServer.watcher.close.mockRejectedValue(watcherError);\n\n      const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      await stopWebsiteServer(mockServer);\n\n      // Verify: Watcher close error is logged correctly\n      loggingHelper.expectErrorLogged(buildErrorPatterns.watcherCloseFailed(3000));\n    });\n\n    it('should handle missing devServer', async () => {\n      mockServer.devServer = null;\n\n      await expect(stopWebsiteServer(mockServer)).resolves.not.toThrow();\n      expect(mockFs.rmSync).toHaveBeenCalled();\n    });\n\n    it('should handle devServer without close method', async () => {\n      mockServer.devServer = {\n        watcher: {\n          close: jest.fn().mockResolvedValue(undefined),\n        },\n      };\n\n      await expect(stopWebsiteServer(mockServer)).resolves.not.toThrow();\n    });\n\n    it('should handle devServer close errors', async () => {\n      const closeError = new Error('Server close failed');\n      mockServer.devServer.close.mockRejectedValue(closeError);\n\n      const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      await stopWebsiteServer(mockServer);\n\n      // Verify: Server close error is logged correctly\n      loggingHelper.expectErrorLogged(buildErrorPatterns.serverCloseFailed(3000));\n    });\n\n    it('should handle missing output directory', async () => {\n      mockFs.existsSync.mockReturnValue(false);\n\n      await stopWebsiteServer(mockServer);\n\n      expect(mockFs.rmSync).not.toHaveBeenCalled();\n    });\n\n    it('should handle output directory cleanup errors', async () => {\n      const cleanupError = new Error('Cleanup failed');\n      mockFs.rmSync.mockImplementation(() => {\n        throw cleanupError;\n      });\n\n      const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      await stopWebsiteServer(mockServer);\n\n      // Verify: Directory cleanup error is logged correctly\n      loggingHelper.expectErrorLogged(buildErrorPatterns.directoryCleanupFailed());\n    });\n\n    it('should handle general stop errors', async () => {\n      const generalError = new Error('General stop error');\n      mockServer.restoreConsole = jest.fn().mockImplementation(() => {\n        throw generalError;\n      });\n\n      const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      await stopWebsiteServer(mockServer);\n\n      // Verify: General server stop error is logged correctly\n      loggingHelper.expectErrorLogged(buildErrorPatterns.serverStopFailed(3000));\n    });\n  });\n});\n"],"version":3}