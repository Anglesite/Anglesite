{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/utils/logging-test-utils.ts","mappings":"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","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/utils/logging-test-utils.ts"],"sourcesContent":["/**\n * @file Test utilities for logging verification and mocking\n * Provides consistent patterns for testing secure logging functionality\n */\n\nimport { logger, LogLevel } from '../../app/utils/logging';\n\n/**\n * LoggingTestHelper provides utilities for testing logging functionality\n * without coupling tests to specific log message formats\n */\nexport class LoggingTestHelper {\n  private consoleErrorSpy: jest.SpyInstance;\n  private consoleWarnSpy: jest.SpyInstance;\n  private consoleLogSpy: jest.SpyInstance;\n\n  constructor() {\n    this.consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n    this.consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation();\n    this.consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();\n  }\n\n  /**\n   * Verify that an error was logged with specific content\n   */\n  expectErrorLogged(partialMessage: string, context?: Record<string, unknown>): void {\n    const errorCalls = this.consoleErrorSpy.mock.calls;\n    const found = errorCalls.some((call) => {\n      const logMessage = call[0] as string;\n      const hasMessage = logMessage.includes(partialMessage);\n\n      if (!context) return hasMessage;\n\n      // If context is provided, check that key context values are present\n      const contextMatches = Object.entries(context).every(([key, expectedValue]) => {\n        if (typeof expectedValue === 'string') {\n          return logMessage.includes(expectedValue);\n        }\n        return true; // For non-string values, we just check the message\n      });\n\n      return hasMessage && contextMatches;\n    });\n\n    if (!found) {\n      const allCalls = errorCalls.map((call) => call[0]).join('\\n');\n      throw new Error(`Expected error log containing \"${partialMessage}\" but got:\\n${allCalls}`);\n    }\n  }\n\n  /**\n   * Verify that a warning was logged with specific content\n   */\n  expectWarningLogged(partialMessage: string): void {\n    const warnCalls = this.consoleWarnSpy.mock.calls;\n    const found = warnCalls.some((call) => {\n      const logMessage = call[0] as string;\n      return logMessage.includes(partialMessage);\n    });\n\n    if (!found) {\n      const allCalls = warnCalls.map((call) => call[0]).join('\\n');\n      throw new Error(`Expected warning log containing \"${partialMessage}\" but got:\\n${allCalls}`);\n    }\n  }\n\n  /**\n   * Verify that an info log was made\n   */\n  expectInfoLogged(partialMessage: string): void {\n    const logCalls = this.consoleLogSpy.mock.calls;\n    const found = logCalls.some((call) => {\n      const logMessage = call[0] as string;\n      return logMessage.includes(partialMessage);\n    });\n\n    if (!found) {\n      const allCalls = logCalls.map((call) => call[0]).join('\\n');\n      throw new Error(`Expected info log containing \"${partialMessage}\" but got:\\n${allCalls}`);\n    }\n  }\n\n  /**\n   * Verify that no logs were made (useful for testing silent operations)\n   */\n  expectNoLogs(): void {\n    expect(this.consoleErrorSpy).not.toHaveBeenCalled();\n    expect(this.consoleWarnSpy).not.toHaveBeenCalled();\n    expect(this.consoleLogSpy).not.toHaveBeenCalled();\n  }\n\n  /**\n   * Get the number of error logs made\n   */\n  getErrorLogCount(): number {\n    return this.consoleErrorSpy.mock.calls.length;\n  }\n\n  /**\n   * Get all error log messages for debugging\n   */\n  getAllErrorLogs(): string[] {\n    return this.consoleErrorSpy.mock.calls.map((call) => call[0] as string);\n  }\n\n  /**\n   * Clear all spy call history\n   */\n  clearLogs(): void {\n    this.consoleErrorSpy.mockClear();\n    this.consoleWarnSpy.mockClear();\n    this.consoleLogSpy.mockClear();\n  }\n\n  /**\n   * Restore original console methods\n   */\n  restore(): void {\n    this.consoleErrorSpy.mockRestore();\n    this.consoleWarnSpy.mockRestore();\n    this.consoleLogSpy.mockRestore();\n  }\n}\n\n/**\n * Mock the logger for testing with controllable behavior\n */\nexport class LoggerMock {\n  public error = jest.fn();\n  public warn = jest.fn();\n  public info = jest.fn();\n  public debug = jest.fn();\n\n  /**\n   * Verify that an error was logged with specific message pattern\n   */\n  expectError(messagePattern: string | RegExp, context?: Record<string, unknown>): void {\n    const errorCalls = this.error.mock.calls;\n    const found = errorCalls.some((call) => {\n      const [message, callContext] = call;\n      const messageMatches =\n        typeof messagePattern === 'string' ? message.includes(messagePattern) : messagePattern.test(message);\n\n      if (!context) return messageMatches;\n\n      const contextMatches = Object.entries(context).every(([key, expectedValue]) => {\n        return callContext && callContext[key] === expectedValue;\n      });\n\n      return messageMatches && contextMatches;\n    });\n\n    if (!found) {\n      const allCalls = errorCalls.map((call) => `${call[0]} | ${JSON.stringify(call[1])}`).join('\\n');\n      throw new Error(`Expected error with pattern \"${messagePattern}\" but got:\\n${allCalls}`);\n    }\n  }\n\n  /**\n   * Clear all mock call history\n   */\n  clear(): void {\n    this.error.mockClear();\n    this.warn.mockClear();\n    this.info.mockClear();\n    this.debug.mockClear();\n  }\n}\n\n/**\n * Create a logging test helper for use in test suites\n */\nexport function createLoggingTestHelper(): LoggingTestHelper {\n  return new LoggingTestHelper();\n}\n\n/**\n * Create a mock logger for dependency injection in tests\n */\nexport function createLoggerMock(): LoggerMock {\n  return new LoggerMock();\n}\n\n/**\n * Test pattern for verifying build error logging regardless of format changes\n */\nexport const buildErrorPatterns = {\n  buildFailed: (websiteName: string) => `Build failed for ${websiteName}`,\n  rebuildFailed: (websiteName: string) => `Rebuild failed for ${websiteName}`,\n  serverStartFailed: (websiteName: string) => `Failed to start server for ${websiteName}`,\n  originalError: (websiteName: string) => `Original build error for ${websiteName}`,\n  errorCause: (websiteName: string) => `Build error cause for ${websiteName}`,\n  watcherCloseFailed: (port: number) => `Error closing file watcher for port ${port}`,\n  serverCloseFailed: (port: number) => `Error closing dev server for port ${port}`,\n  directoryCleanupFailed: () => `Failed to clean up directory`,\n  serverStopFailed: (port: number) => `Error stopping server for port ${port}`,\n};\n"],"version":3}