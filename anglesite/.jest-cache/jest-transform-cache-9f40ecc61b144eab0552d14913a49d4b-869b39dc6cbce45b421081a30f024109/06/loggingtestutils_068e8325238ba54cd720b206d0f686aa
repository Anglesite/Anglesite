71913896eceb35d994c4ec179f0b3ba6
"use strict";
/**
 * @file Test utilities for logging verification and mocking
 * Provides consistent patterns for testing secure logging functionality
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildErrorPatterns = exports.LoggerMock = exports.LoggingTestHelper = void 0;
exports.createLoggingTestHelper = createLoggingTestHelper;
exports.createLoggerMock = createLoggerMock;
/**
 * LoggingTestHelper provides utilities for testing logging functionality
 * without coupling tests to specific log message formats
 */
class LoggingTestHelper {
    constructor() {
        this.consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
        this.consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation();
        this.consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();
    }
    /**
     * Verify that an error was logged with specific content
     */
    expectErrorLogged(partialMessage, context) {
        const errorCalls = this.consoleErrorSpy.mock.calls;
        const found = errorCalls.some((call) => {
            const logMessage = call[0];
            const hasMessage = logMessage.includes(partialMessage);
            if (!context)
                return hasMessage;
            // If context is provided, check that key context values are present
            const contextMatches = Object.entries(context).every(([key, expectedValue]) => {
                if (typeof expectedValue === 'string') {
                    return logMessage.includes(expectedValue);
                }
                return true; // For non-string values, we just check the message
            });
            return hasMessage && contextMatches;
        });
        if (!found) {
            const allCalls = errorCalls.map((call) => call[0]).join('\n');
            throw new Error(`Expected error log containing "${partialMessage}" but got:\n${allCalls}`);
        }
    }
    /**
     * Verify that a warning was logged with specific content
     */
    expectWarningLogged(partialMessage) {
        const warnCalls = this.consoleWarnSpy.mock.calls;
        const found = warnCalls.some((call) => {
            const logMessage = call[0];
            return logMessage.includes(partialMessage);
        });
        if (!found) {
            const allCalls = warnCalls.map((call) => call[0]).join('\n');
            throw new Error(`Expected warning log containing "${partialMessage}" but got:\n${allCalls}`);
        }
    }
    /**
     * Verify that an info log was made
     */
    expectInfoLogged(partialMessage) {
        const logCalls = this.consoleLogSpy.mock.calls;
        const found = logCalls.some((call) => {
            const logMessage = call[0];
            return logMessage.includes(partialMessage);
        });
        if (!found) {
            const allCalls = logCalls.map((call) => call[0]).join('\n');
            throw new Error(`Expected info log containing "${partialMessage}" but got:\n${allCalls}`);
        }
    }
    /**
     * Verify that no logs were made (useful for testing silent operations)
     */
    expectNoLogs() {
        expect(this.consoleErrorSpy).not.toHaveBeenCalled();
        expect(this.consoleWarnSpy).not.toHaveBeenCalled();
        expect(this.consoleLogSpy).not.toHaveBeenCalled();
    }
    /**
     * Get the number of error logs made
     */
    getErrorLogCount() {
        return this.consoleErrorSpy.mock.calls.length;
    }
    /**
     * Get all error log messages for debugging
     */
    getAllErrorLogs() {
        return this.consoleErrorSpy.mock.calls.map((call) => call[0]);
    }
    /**
     * Clear all spy call history
     */
    clearLogs() {
        this.consoleErrorSpy.mockClear();
        this.consoleWarnSpy.mockClear();
        this.consoleLogSpy.mockClear();
    }
    /**
     * Restore original console methods
     */
    restore() {
        this.consoleErrorSpy.mockRestore();
        this.consoleWarnSpy.mockRestore();
        this.consoleLogSpy.mockRestore();
    }
}
exports.LoggingTestHelper = LoggingTestHelper;
/**
 * Mock the logger for testing with controllable behavior
 */
class LoggerMock {
    constructor() {
        this.error = jest.fn();
        this.warn = jest.fn();
        this.info = jest.fn();
        this.debug = jest.fn();
    }
    /**
     * Verify that an error was logged with specific message pattern
     */
    expectError(messagePattern, context) {
        const errorCalls = this.error.mock.calls;
        const found = errorCalls.some((call) => {
            const [message, callContext] = call;
            const messageMatches = typeof messagePattern === 'string' ? message.includes(messagePattern) : messagePattern.test(message);
            if (!context)
                return messageMatches;
            const contextMatches = Object.entries(context).every(([key, expectedValue]) => {
                return callContext && callContext[key] === expectedValue;
            });
            return messageMatches && contextMatches;
        });
        if (!found) {
            const allCalls = errorCalls.map((call) => `${call[0]} | ${JSON.stringify(call[1])}`).join('\n');
            throw new Error(`Expected error with pattern "${messagePattern}" but got:\n${allCalls}`);
        }
    }
    /**
     * Clear all mock call history
     */
    clear() {
        this.error.mockClear();
        this.warn.mockClear();
        this.info.mockClear();
        this.debug.mockClear();
    }
}
exports.LoggerMock = LoggerMock;
/**
 * Create a logging test helper for use in test suites
 */
function createLoggingTestHelper() {
    return new LoggingTestHelper();
}
/**
 * Create a mock logger for dependency injection in tests
 */
function createLoggerMock() {
    return new LoggerMock();
}
/**
 * Test pattern for verifying build error logging regardless of format changes
 */
exports.buildErrorPatterns = {
    buildFailed: (websiteName) => `Build failed for ${websiteName}`,
    rebuildFailed: (websiteName) => `Rebuild failed for ${websiteName}`,
    serverStartFailed: (websiteName) => `Failed to start server for ${websiteName}`,
    originalError: (websiteName) => `Original build error for ${websiteName}`,
    errorCause: (websiteName) => `Build error cause for ${websiteName}`,
    watcherCloseFailed: (port) => `Error closing file watcher for port ${port}`,
    serverCloseFailed: (port) => `Error closing dev server for port ${port}`,
    directoryCleanupFailed: () => `Failed to clean up directory`,
    serverStopFailed: (port) => `Error stopping server for port ${port}`,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,