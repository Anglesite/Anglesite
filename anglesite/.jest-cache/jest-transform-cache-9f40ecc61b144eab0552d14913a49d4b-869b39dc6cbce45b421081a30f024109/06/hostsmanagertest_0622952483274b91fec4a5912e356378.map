{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/dns/hosts-manager.test.ts","mappings":"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","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/dns/hosts-manager.test.ts"],"sourcesContent":["/**\n * @file Tests for DNS hosts file management with sudo-prompt and Touch ID support\n */\n\n// Mock sudo-prompt before importing the module\nconst mockSudoPrompt = {\n  exec: jest.fn(),\n};\n\n// Mock native-is-elevated\nconst mockIsElevated = jest.fn();\n\n// Mock child_process\nconst mockExec = jest.fn();\nconst mockExecFile = jest.fn();\n\n// Import the actual functions to compare against\nconst { execFile: realExecFile } = require('child_process');\n\nconst mockPromisify = jest.fn((fn) => {\n  // Check if the function is execFile by direct reference comparison\n  if (fn === realExecFile) return mockExecFile;\n  return mockExec;\n});\n\n// Mock fs for file operations\nconst mockFs = {\n  existsSync: jest.fn(),\n  readFileSync: jest.fn(),\n  writeFileSync: jest.fn(),\n};\n\n// Mock hostile library\nconst mockHostile = {\n  get: jest.fn(),\n  set: jest.fn(),\n  remove: jest.fn(),\n};\n\n// Mock dialog\nconst mockDialog = {\n  showMessageBox: jest.fn(),\n};\n\n// Set up mocks before importing the module\njest.mock('sudo-prompt', () => mockSudoPrompt);\njest.mock('native-is-elevated', () => mockIsElevated);\njest.mock('child_process', () => ({\n  exec: mockExec,\n  execFile: mockExecFile,\n}));\njest.mock('util', () => ({\n  promisify: mockPromisify,\n}));\njest.mock('fs', () => mockFs);\njest.mock('hostile', () => mockHostile);\njest.mock('electron', () => ({\n  dialog: mockDialog,\n}));\n\n// Mock website-manager\njest.mock('../../app/utils/website-manager', () => ({\n  listWebsites: jest.fn(() => ['test-site', 'my-website']),\n}));\n\ndescribe('DNS Hosts Manager', () => {\n  let hostsManager: {\n    addLocalDnsResolution: (hostname: string) => Promise<void>;\n    cleanupHostsFile: () => Promise<boolean>;\n    updateHostsFile: (hostname: string) => Promise<boolean>;\n    checkAndSuggestTouchIdSetup: () => Promise<void>;\n  };\n\n  beforeAll(() => {\n    // Import the module after mocks are set up\n    hostsManager = require('../../app/dns/hosts-manager');\n  });\n\n  beforeEach(() => {\n    // Reset all mocks\n    jest.clearAllMocks();\n\n    // Set default mock implementations\n    mockIsElevated.mockResolvedValue(false);\n    mockExec.mockResolvedValue({ stdout: '0', stderr: '' });\n    mockExecFile.mockResolvedValue({ stdout: '0', stderr: '' });\n    mockHostile.get.mockImplementation((_flag, callback) => {\n      callback(null, [\n        ['127.0.0.1', 'localhost'],\n        ['127.0.0.1', 'anglesite.test'],\n        ['127.0.0.1', 'test-site.test'],\n      ]);\n    });\n    mockSudoPrompt.exec.mockImplementation((command, options, callback) => {\n      callback(null, 'success', '');\n    });\n  });\n\n  describe('Touch ID Detection', () => {\n    it('should detect Touch ID availability on macOS', async () => {\n      // Mock platform detection\n      Object.defineProperty(process, 'platform', {\n        value: 'darwin',\n        configurable: true,\n      });\n\n      // Mock Touch ID configured and hardware available\n      mockExecFile\n        .mockResolvedValueOnce({ stdout: '1' }) // pam_tid.so configured\n        .mockResolvedValueOnce({ stdout: 'Touch ID available' }); // Touch ID hardware available\n\n      await hostsManager.checkAndSuggestTouchIdSetup();\n\n      expect(mockExecFile).toHaveBeenCalledWith('grep', ['-c', 'pam_tid.so', '/etc/pam.d/sudo']);\n      expect(mockExecFile).toHaveBeenCalledWith('bioutil', ['-r']);\n    });\n\n    it('should suggest Touch ID setup when hardware available but not configured', async () => {\n      Object.defineProperty(process, 'platform', {\n        value: 'darwin',\n        configurable: true,\n      });\n\n      // Mock Touch ID hardware available but not configured\n      // First, for isTouchIdAvailable check (returns false - not configured)\n      mockExec\n        .mockResolvedValueOnce({ stdout: '0' }) // pam_tid.so not configured\n        .mockResolvedValueOnce({ stdout: '1' }) // Touch ID hardware available\n        // Then for canEnableTouchId check (returns true - can be enabled)\n        .mockResolvedValueOnce({ stdout: '1' }) // Touch ID hardware available\n        .mockResolvedValueOnce({ stdout: '0' }); // pam_tid.so not configured\n\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      await hostsManager.checkAndSuggestTouchIdSetup();\n\n      consoleSpy.mockRestore();\n    });\n\n    it('should confirm Touch ID is configured when available', async () => {\n      Object.defineProperty(process, 'platform', {\n        value: 'darwin',\n        configurable: true,\n      });\n\n      // Mock Touch ID configured and hardware available\n      mockExec\n        .mockResolvedValueOnce({ stdout: '1' }) // pam_tid.so configured\n        .mockResolvedValueOnce({ stdout: '1' }); // Touch ID hardware available\n\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      await hostsManager.checkAndSuggestTouchIdSetup();\n\n      consoleSpy.mockRestore();\n    });\n\n    it('should skip Touch ID checks on non-macOS platforms', async () => {\n      Object.defineProperty(process, 'platform', {\n        value: 'linux',\n        configurable: true,\n      });\n\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      await hostsManager.checkAndSuggestTouchIdSetup();\n\n      expect(mockExec).not.toHaveBeenCalled();\n\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('Elevated Privileges', () => {\n    it('should run commands directly when already elevated', async () => {\n      mockIsElevated.mockResolvedValue(true);\n      mockExec.mockResolvedValue({ stdout: 'success' });\n\n      // Access the private function through the module's exports\n      // This is a bit hacky but necessary for testing internal functions\n      const result = await hostsManager.updateHostsFile('test.test');\n\n      expect(mockIsElevated).toHaveBeenCalled();\n      expect(mockSudoPrompt.exec).not.toHaveBeenCalled();\n      expect(result).toBe(true);\n    });\n\n    it('should use sudo-prompt when not elevated', async () => {\n      mockIsElevated.mockResolvedValue(false);\n      mockSudoPrompt.exec.mockImplementation((_command, options, callback) => {\n        expect(options.name).toBe('Anglesite DNS');\n        callback(null, 'success', '');\n      });\n\n      const result = await hostsManager.updateHostsFile('test.test');\n\n      expect(mockIsElevated).toHaveBeenCalled();\n      expect(mockSudoPrompt.exec).toHaveBeenCalled();\n      expect(result).toBe(true);\n    });\n\n    it('should handle authentication cancellation gracefully', async () => {\n      mockIsElevated.mockResolvedValue(false);\n      mockSudoPrompt.exec.mockImplementation((_command, _options, callback) => {\n        const error = new Error('User cancelled') as Error & { code: number };\n        error.code = -128;\n        callback(error, null, '');\n      });\n\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      const result = await hostsManager.updateHostsFile('test.test');\n\n      expect(result).toBe(false);\n\n      consoleSpy.mockRestore();\n    });\n\n    it('should log appropriate authentication method based on Touch ID availability', async () => {\n      Object.defineProperty(process, 'platform', {\n        value: 'darwin',\n        configurable: true,\n      });\n\n      mockIsElevated.mockResolvedValue(false);\n\n      // Mock Touch ID available\n      mockExec\n        .mockResolvedValueOnce({ stdout: '1' }) // pam_tid.so configured\n        .mockResolvedValueOnce({ stdout: '1' }); // Touch ID hardware available\n\n      mockSudoPrompt.exec.mockImplementation((_command, options, callback) => {\n        callback(null, 'success', '');\n      });\n\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      await hostsManager.updateHostsFile('test.test');\n\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('Hosts File Management', () => {\n    it('should add local DNS resolution for new domains', async () => {\n      mockHostile.get.mockImplementation((_flag, callback) => {\n        callback(null, [['127.0.0.1', 'anglesite.test']]);\n      });\n\n      await hostsManager.addLocalDnsResolution('new-site.test');\n\n      expect(mockHostile.get).toHaveBeenCalled();\n    });\n\n    it('should skip adding domains that already exist', async () => {\n      mockHostile.get.mockImplementation((_flag, callback) => {\n        callback(null, [\n          ['127.0.0.1', 'anglesite.test'],\n          ['127.0.0.1', 'existing-site.test'],\n        ]);\n      });\n\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n\n      await hostsManager.updateHostsFile('existing-site.test');\n\n      consoleSpy.mockRestore();\n    });\n\n    it('should clean up orphaned domains', async () => {\n      mockHostile.get.mockImplementation((_flag, callback) => {\n        callback(null, [\n          ['127.0.0.1', '127.0.0.1 anglesite.test'],\n          ['127.0.0.1', '127.0.0.1 orphaned-site.test'], // This should be removed\n          ['127.0.0.1', '127.0.0.1 test-site.test'], // This should stay (exists in website list)\n        ]);\n      });\n\n      await hostsManager.cleanupHostsFile();\n\n      expect(mockHostile.get).toHaveBeenCalled();\n    });\n\n    it('should handle hostile library errors gracefully', async () => {\n      mockHostile.get.mockImplementation((_flag, callback) => {\n        callback(new Error('Failed to read hosts file'), null);\n      });\n\n      const result = await hostsManager.cleanupHostsFile();\n\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('Cross-Platform Compatibility', () => {\n    it('should work on Windows', async () => {\n      Object.defineProperty(process, 'platform', {\n        value: 'win32',\n        configurable: true,\n      });\n\n      // Touch ID should not be available on Windows\n      await hostsManager.checkAndSuggestTouchIdSetup();\n\n      expect(mockExec).not.toHaveBeenCalledWith(expect.stringContaining('bioutil'));\n    });\n\n    it('should work on Linux', async () => {\n      Object.defineProperty(process, 'platform', {\n        value: 'linux',\n        configurable: true,\n      });\n\n      // Touch ID should not be available on Linux\n      await hostsManager.checkAndSuggestTouchIdSetup();\n\n      expect(mockExec).not.toHaveBeenCalledWith(expect.stringContaining('bioutil'));\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle sudo-prompt errors without crashing', async () => {\n      mockIsElevated.mockResolvedValue(false);\n      mockSudoPrompt.exec.mockImplementation((_command, options, callback) => {\n        callback(new Error('Authentication failed'), null, 'error');\n      });\n\n      const result = await hostsManager.updateHostsFile('test.test');\n\n      expect(result).toBe(false);\n    });\n\n    it('should handle native-is-elevated errors gracefully', async () => {\n      // Mock hostEntryExists to return false so it tries to add the entry\n      mockHostile.get.mockImplementation((_flag, callback) => {\n        callback(null, [['127.0.0.1', 'localhost']]); // test.test doesn't exist\n      });\n\n      mockIsElevated.mockRejectedValue(new Error('Cannot check elevation'));\n\n      const result = await hostsManager.updateHostsFile('test.test');\n\n      // The function should catch the error and return false, so sudo-prompt is never called\n      expect(result).toBe(false); // Should fail due to our mocked error\n      // Since isElevated throws, we never get to sudo-prompt\n      expect(mockSudoPrompt.exec).not.toHaveBeenCalled();\n    });\n\n    it('should handle biometric detection errors', async () => {\n      Object.defineProperty(process, 'platform', {\n        value: 'darwin',\n        configurable: true,\n      });\n\n      mockExec.mockRejectedValue(new Error('Command failed'));\n\n      const consoleSpy = jest.spyOn(console, 'debug').mockImplementation();\n\n      await hostsManager.checkAndSuggestTouchIdSetup();\n\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('Module Exports', () => {\n    it('should export required functions', () => {\n      expect(typeof hostsManager.addLocalDnsResolution).toBe('function');\n      expect(typeof hostsManager.cleanupHostsFile).toBe('function');\n      expect(typeof hostsManager.updateHostsFile).toBe('function');\n      expect(typeof hostsManager.checkAndSuggestTouchIdSetup).toBe('function');\n    });\n  });\n});\n"],"version":3}