{"version":3,"names":["cov_22y2k0der0","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","TypeGuards","isDisposable","obj","dispose","isInitializable","initialize","isEventEmitter","on","emit","ServiceLifecycleState"],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/core/interfaces.ts"],"sourcesContent":["/**\n * @file Service Interfaces and Abstractions\n *\n * Defines contracts for all major services in Anglesite to enable\n * dependency injection, testing, and loose coupling between components.\n */\n\nimport { WindowState, AppSettings } from './types';\nimport { AtomicOperationResult } from '../utils/atomic-operations';\nimport { BrowserWindow } from 'electron';\nimport type { EleventyUrlResolver } from '../server/eleventy-url-resolver';\n// BufferEncoding is a built-in Node.js type alias\ntype BufferEncoding =\n  | 'ascii'\n  | 'utf8'\n  | 'utf-8'\n  | 'utf16le'\n  | 'ucs2'\n  | 'ucs-2'\n  | 'base64'\n  | 'base64url'\n  | 'latin1'\n  | 'binary'\n  | 'hex';\n\n// Forward declare ManagedServer to avoid circular imports\n// The actual interface is defined in '../server/website-server-manager'\n// Type alias to avoid circular imports - actual WebsiteServer is defined in '../server/per-website-server'\ntype WebsiteServer = {\n  eleventy: unknown;\n  devServer: unknown;\n  inputDir: string;\n  outputDir: string;\n  port: number;\n  actualUrl?: string;\n  urlResolver: EleventyUrlResolver;\n  restoreConsole?: () => void;\n};\n\nexport interface ManagedServer {\n  websiteName: string;\n  websitePath: string;\n  port: number;\n  actualUrl?: string;\n  state: string;\n  server?: WebsiteServer; // Use WebsiteServer type\n  startedAt?: Date;\n  lastError?: Error;\n  retryCount: number;\n}\n\n/**\n * Base interface for all disposable services\n */\nexport interface IDisposable {\n  dispose(): void | Promise<void>;\n}\n\n/**\n * Base interface for services that can be initialized\n */\nexport interface IInitializable {\n  initialize(): void | Promise<void>;\n}\n\n/**\n * Configuration service interface\n */\nexport interface IConfigService extends IDisposable {\n  get<T>(key: string): T | undefined;\n  set<T>(key: string, value: T): void;\n  has(key: string): boolean;\n  getAll(): Record<string, unknown>;\n  save(): Promise<void>;\n}\n\n/**\n * Logging service interface\n */\nexport interface ILogger {\n  debug(message: string, meta?: Record<string, unknown>): void;\n  info(message: string, meta?: Record<string, unknown>): void;\n  warn(message: string, meta?: Record<string, unknown>): void;\n  error(message: string, error?: Error, meta?: Record<string, unknown>): void;\n  child(context: Record<string, unknown>): ILogger;\n}\n\n/**\n * Settings store interface\n */\nexport interface IStore extends IDisposable {\n  get<K extends keyof AppSettings>(key: K): AppSettings[K];\n  set<K extends keyof AppSettings>(key: K, val: AppSettings[K]): void;\n  getAll(): AppSettings;\n  setAll(settings: Partial<AppSettings>): void;\n\n  // Window state management\n  saveWindowStates(windowStates: WindowState[]): void;\n  getWindowStates(): WindowState[];\n  clearWindowStates(): void;\n\n  // Recent websites management\n  addRecentWebsite(websiteName: string): void;\n  getRecentWebsites(): string[];\n  clearRecentWebsites(): void;\n  removeRecentWebsite(websiteName: string): void;\n\n  // Persistence\n  forceSave(): Promise<void>;\n}\n\n/**\n * Result of validating a website's structure and configuration.\n */\nexport interface WebsiteValidationResult {\n  valid: boolean;\n  error?: string;\n}\n\n/**\n * Website management service interface\n */\nexport interface IWebsiteManager extends IDisposable {\n  // Website operations\n  createWebsite(name: string): Promise<string>;\n  renameWebsite(oldName: string, newName: string): Promise<boolean>;\n  deleteWebsite(name: string): Promise<boolean>;\n\n  // Website queries\n  listWebsites(): Promise<string[]>;\n  getWebsitePath(name: string): string;\n  websiteExists(name: string): Promise<boolean>;\n\n  // Validation\n  validateWebsiteName(name: string): WebsiteValidationResult;\n  validateWebsiteNameAsync(name: string): Promise<WebsiteValidationResult>;\n}\n\n/**\n * Website server information\n */\nexport interface WebsiteServerInfo {\n  name: string;\n  port: number;\n  status: 'starting' | 'running' | 'stopping' | 'stopped' | 'error';\n  url?: string;\n  error?: string;\n  pid?: number;\n}\n\n/**\n * Website server management service interface\n * Note: This interface extends EventEmitter for server events\n */\nexport interface IWebsiteServerManager extends IDisposable {\n  // EventEmitter methods for server lifecycle events\n  on(event: 'server-log', listener: (websiteName: string, message: string, level: string) => void): this;\n  on(event: 'server-started', listener: (websiteName: string, managedServer: ManagedServer) => void): this;\n  on(event: 'server-error', listener: (websiteName: string, error: Error) => void): this;\n  on(event: string, listener: (...args: unknown[]) => void): this;\n\n  // Server lifecycle\n  startServer(websiteName: string, websitePath: string): Promise<WebsiteServerInfo>;\n  stopServer(websiteName: string): Promise<void>;\n  restartServer(websiteName: string): Promise<WebsiteServerInfo>;\n\n  // Server queries\n  getServerInfo(websiteName: string): WebsiteServerInfo | undefined;\n  getServer(websiteName: string): ManagedServer | undefined; // Returns ManagedServer but avoiding circular imports\n  getAllServers(): ReadonlyMap<string, ManagedServer>; // Returns Map<string, ManagedServer>\n  isServerRunning(websiteName: string): boolean;\n\n  // Server management\n  stopAllServers(): Promise<void>;\n  cleanupOrphanedServers(): Promise<void>;\n}\n\n/**\n * DNS management service interface\n */\nexport interface IDnsManager extends IDisposable {\n  // DNS operations\n  updateHostsFile(hostname: string, ipAddress?: string): Promise<boolean>;\n  cleanupHostsFile(): Promise<boolean>;\n\n  // DNS queries\n  isHostnameRegistered(hostname: string): Promise<boolean>;\n  getRegisteredHostnames(): Promise<string[]>;\n}\n\n/**\n * Certificate management service interface\n */\nexport interface ICertificateManager extends IDisposable {\n  // Certificate operations\n  generateCertificate(hostname: string): Promise<{ cert: string; key: string }>;\n  installCAInSystem(): Promise<boolean>;\n  isCAInstalledInSystem(): Promise<boolean>;\n\n  // Certificate queries\n  getCertificatePath(hostname: string): string;\n  certificateExists(hostname: string): Promise<boolean>;\n}\n\n/**\n * Menu management service interface\n */\nexport interface IMenuManager extends IDisposable {\n  // Menu operations\n  updateApplicationMenu(): void;\n  createWebsiteContextMenu(websiteName: string): void;\n\n  // Menu state\n  setMenuEnabled(enabled: boolean): void;\n}\n\n/**\n * Window state information\n */\nexport interface WindowInfo {\n  id: number;\n  websiteName?: string;\n  type: 'main' | 'website' | 'settings';\n  bounds?: { x: number; y: number; width: number; height: number };\n  isMaximized?: boolean;\n}\n\n/**\n * Window management service interface\n */\nexport interface IWindowManager extends IDisposable {\n  // Window operations\n  createMainWindow(): Promise<BrowserWindow>;\n  createWebsiteWindow(websiteName: string): Promise<BrowserWindow>;\n  createSettingsWindow(): Promise<BrowserWindow>;\n\n  // Window queries\n  getWindow(id: number): BrowserWindow | undefined;\n  getWebsiteWindow(websiteName: string): BrowserWindow | undefined;\n  getAllWindows(): BrowserWindow[];\n  getAllWebsiteWindows(): BrowserWindow[];\n\n  // Window state\n  saveWindowState(window: BrowserWindow): void;\n  restoreWindowState(window: BrowserWindow, websiteName?: string): void;\n\n  // Window lifecycle\n  closeWindow(id: number): void;\n  closeAllWindows(): void;\n  focusWindow(id: number): void;\n}\n\n/**\n * File system operations interface\n */\nexport interface IFileSystem {\n  // File operations\n  exists(path: string): Promise<boolean>;\n  readFile(path: string, encoding?: BufferEncoding): Promise<string | Buffer>;\n  writeFile(path: string, data: string | Buffer, encoding?: BufferEncoding): Promise<void>;\n\n  // Directory operations\n  mkdir(path: string, options?: { recursive?: boolean }): Promise<void>;\n  readdir(path: string): Promise<string[]>;\n  rmdir(path: string, options?: { recursive?: boolean }): Promise<void>;\n\n  // Path operations\n  copyFile(src: string, dest: string): Promise<void>;\n  rename(oldPath: string, newPath: string): Promise<void>;\n  stat(path: string): Promise<{ isFile(): boolean; isDirectory(): boolean; size: number; mtime: Date }>;\n}\n\n/**\n * Atomic operations service interface\n */\nexport interface IAtomicOperations {\n  // Atomic file operations\n  writeFileAtomic(\n    path: string,\n    data: string | Buffer,\n    options?: Record<string, unknown>\n  ): Promise<AtomicOperationResult<void>>;\n  copyDirectoryAtomic(\n    src: string,\n    dest: string,\n    options?: Record<string, unknown>\n  ): Promise<AtomicOperationResult<void>>;\n  renameAtomic(\n    oldPath: string,\n    newPath: string,\n    options?: Record<string, unknown>\n  ): Promise<AtomicOperationResult<void>>;\n\n  // Transaction support\n  createTransaction(): IAtomicTransaction;\n}\n\n/**\n * Interface for managing atomic transactions with rollback capability.\n */\nexport interface IAtomicTransaction {\n  addOperation(operation: () => Promise<void>, rollback?: () => Promise<void>): void;\n  execute<T = void>(): Promise<AtomicOperationResult<T>>;\n  rollback(): Promise<boolean>;\n}\n\n/**\n * Event emitter interface for services that emit events\n */\nexport interface IEventEmitter<T = unknown> {\n  on(event: string, listener: (data: T) => void): void;\n  off(event: string, listener: (data: T) => void): void;\n  emit(event: string, data?: T): void;\n  once(event: string, listener: (data: T) => void): void;\n}\n\n/**\n * Result of a service health check including status and details.\n */\nexport interface HealthCheckResult {\n  service: string;\n  status: 'healthy' | 'unhealthy' | 'degraded';\n  message?: string;\n  details?: Record<string, unknown>;\n  timestamp: Date;\n}\n\n/**\n * Health monitoring service interface\n */\nexport interface IHealthMonitor extends IDisposable, IEventEmitter<HealthCheckResult> {\n  // Health checks\n  checkHealth(serviceName: string): Promise<HealthCheckResult>;\n  checkAllServices(): Promise<HealthCheckResult[]>;\n\n  // Health monitoring\n  startMonitoring(intervalMs?: number): void;\n  stopMonitoring(): void;\n\n  // Health status\n  getHealthStatus(serviceName: string): HealthCheckResult | undefined;\n  getAllHealthStatuses(): HealthCheckResult[];\n  isHealthy(serviceName: string): boolean;\n}\n\n/**\n * Service factory interface for creating services\n */\nexport interface IServiceFactory {\n  createStore(): IStore;\n  createWebsiteManager(): IWebsiteManager;\n  createWebsiteServerManager(): IWebsiteServerManager;\n  createDnsManager(): IDnsManager;\n  createCertificateManager(): ICertificateManager;\n  createMenuManager(): IMenuManager;\n  createWindowManager(): IWindowManager;\n  createLogger(context?: string): ILogger;\n  createFileSystem(): IFileSystem;\n  createAtomicOperations(): IAtomicOperations;\n  createHealthMonitor(): IHealthMonitor;\n}\n\n/**\n * Application context interface\n */\nexport interface IApplicationContext extends IDisposable {\n  // Service access\n  getService<T>(serviceName: string): T;\n  getServiceAsync<T>(serviceName: string): Promise<T>;\n\n  // Application lifecycle\n  initialize(): Promise<void>;\n  shutdown(): Promise<void>;\n\n  // Configuration\n  isProduction(): boolean;\n  isDevelopment(): boolean;\n  getVersion(): string;\n  getAppDataPath(): string;\n}\n\n/**\n * Plugin interface for extensibility\n */\nexport interface IPlugin extends IDisposable {\n  name: string;\n  version: string;\n  dependencies?: string[];\n\n  initialize(context: IApplicationContext): Promise<void>;\n  activate(): Promise<void>;\n  deactivate(): Promise<void>;\n}\n\n/**\n * Plugin manager interface\n */\nexport interface IPluginManager extends IDisposable {\n  // Plugin lifecycle\n  loadPlugin(plugin: IPlugin): Promise<void>;\n  unloadPlugin(name: string): Promise<void>;\n\n  // Plugin queries\n  getPlugin(name: string): IPlugin | undefined;\n  getAllPlugins(): IPlugin[];\n  isPluginLoaded(name: string): boolean;\n\n  // Plugin management\n  activatePlugin(name: string): Promise<void>;\n  deactivatePlugin(name: string): Promise<void>;\n  reloadPlugin(name: string): Promise<void>;\n}\n\n/**\n * Type guards for interface checking\n */\nexport const TypeGuards = {\n  isDisposable(obj: unknown): obj is IDisposable {\n    return obj !== null && typeof obj === 'object' && typeof (obj as IDisposable).dispose === 'function';\n  },\n\n  isInitializable(obj: unknown): obj is IInitializable {\n    return obj !== null && typeof obj === 'object' && typeof (obj as IInitializable).initialize === 'function';\n  },\n\n  isEventEmitter(obj: unknown): obj is IEventEmitter {\n    return (\n      obj !== null &&\n      typeof obj === 'object' &&\n      typeof (obj as IEventEmitter).on === 'function' &&\n      typeof (obj as IEventEmitter).emit === 'function'\n    );\n  },\n};\n\n/**\n * Service lifecycle states\n */\nexport enum ServiceLifecycleState {\n  NotInitialized = 'not-initialized',\n  Initializing = 'initializing',\n  Initialized = 'initialized',\n  Starting = 'starting',\n  Running = 'running',\n  Stopping = 'stopping',\n  Stopped = 'stopped',\n  Error = 'error',\n  Disposed = 'disposed',\n}\n\n/**\n * Service metadata interface\n */\nexport interface IServiceMetadata {\n  name: string;\n  version?: string;\n  description?: string;\n  dependencies: string[];\n  state: ServiceLifecycleState;\n  createdAt: Date;\n  lastStateChange: Date;\n  error?: Error;\n}\n\n/**\n * Service with metadata interface\n */\nexport interface IServiceWithMetadata<T = unknown> {\n  service: T;\n  metadata: IServiceMetadata;\n}\n"],"mappings":"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","ignoreList":[]}