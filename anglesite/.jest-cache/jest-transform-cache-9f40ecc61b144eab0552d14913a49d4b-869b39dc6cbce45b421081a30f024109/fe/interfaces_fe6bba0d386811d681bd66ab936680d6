8e6939c5c0b06e2d1c4ba311c098eae0
"use strict";

/**
 * @file Service Interfaces and Abstractions
 *
 * Defines contracts for all major services in Anglesite to enable
 * dependency injection, testing, and loose coupling between components.
 */
/* istanbul ignore next */
function cov_22y2k0der0() {
  var path = "/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/core/interfaces.ts";
  var hash = "9cb38810ff02caebe404c2a35203ba9dac28c1af";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/core/interfaces.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 60
        }
      },
      "2": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 26,
          column: 2
        }
      },
      "3": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 92
        }
      },
      "4": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 95
        }
      },
      "5": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 24,
          column: 44
        }
      },
      "6": {
        start: {
          line: 31,
          column: 0
        },
        end: {
          line: 41,
          column: 90
        }
      },
      "7": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 64
        }
      },
      "8": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 59
        }
      },
      "9": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 57
        }
      },
      "10": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 51
        }
      },
      "11": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 49
        }
      },
      "12": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 51
        }
      },
      "13": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 49
        }
      },
      "14": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 45
        }
      },
      "15": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 51
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 22
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 25
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 24
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 31,
            column: 1
          },
          end: {
            line: 31,
            column: 2
          }
        },
        loc: {
          start: {
            line: 31,
            column: 34
          },
          end: {
            line: 41,
            column: 1
          }
        },
        line: 31
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 15,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 15
          },
          end: {
            line: 15,
            column: 27
          }
        }, {
          start: {
            line: 15,
            column: 31
          },
          end: {
            line: 15,
            column: 54
          }
        }, {
          start: {
            line: 15,
            column: 58
          },
          end: {
            line: 15,
            column: 91
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 18,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 18,
            column: 27
          }
        }, {
          start: {
            line: 18,
            column: 31
          },
          end: {
            line: 18,
            column: 54
          }
        }, {
          start: {
            line: 18,
            column: 58
          },
          end: {
            line: 18,
            column: 94
          }
        }],
        line: 18
      },
      "2": {
        loc: {
          start: {
            line: 21,
            column: 16
          },
          end: {
            line: 24,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 16
          },
          end: {
            line: 21,
            column: 28
          }
        }, {
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 22,
            column: 35
          }
        }, {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 23,
            column: 40
          }
        }, {
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 24,
            column: 42
          }
        }],
        line: 21
      },
      "3": {
        loc: {
          start: {
            line: 41,
            column: 3
          },
          end: {
            line: 41,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 41,
            column: 3
          },
          end: {
            line: 41,
            column: 24
          }
        }, {
          start: {
            line: 41,
            column: 29
          },
          end: {
            line: 41,
            column: 87
          }
        }],
        line: 41
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0, 0],
      "2": [0, 0, 0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/core/interfaces.ts",
      mappings: ";AAAA;;;;;GAKG;;;AAwZH;;GAEG;AACU,QAAA,UAAU,GAAG;IACxB,YAAY,CAAC,GAAY;QACvB,OAAO,GAAG,KAAK,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,OAAQ,GAAmB,CAAC,OAAO,KAAK,UAAU,CAAC;IACvG,CAAC;IAED,eAAe,CAAC,GAAY;QAC1B,OAAO,GAAG,KAAK,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,OAAQ,GAAsB,CAAC,UAAU,KAAK,UAAU,CAAC;IAC7G,CAAC;IAED,cAAc,CAAC,GAAY;QACzB,OAAO,CACL,GAAG,KAAK,IAAI;YACZ,OAAO,GAAG,KAAK,QAAQ;YACvB,OAAQ,GAAqB,CAAC,EAAE,KAAK,UAAU;YAC/C,OAAQ,GAAqB,CAAC,IAAI,KAAK,UAAU,CAClD,CAAC;IACJ,CAAC;CACF,CAAC;AAEF;;GAEG;AACH,IAAY,qBAUX;AAVD,WAAY,qBAAqB;IAC/B,2DAAkC,CAAA;IAClC,sDAA6B,CAAA;IAC7B,oDAA2B,CAAA;IAC3B,8CAAqB,CAAA;IACrB,4CAAmB,CAAA;IACnB,8CAAqB,CAAA;IACrB,4CAAmB,CAAA;IACnB,wCAAe,CAAA;IACf,8CAAqB,CAAA;AACvB,CAAC,EAVW,qBAAqB,qCAArB,qBAAqB,QAUhC",
      names: [],
      sources: ["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/core/interfaces.ts"],
      sourcesContent: ["/**\n * @file Service Interfaces and Abstractions\n *\n * Defines contracts for all major services in Anglesite to enable\n * dependency injection, testing, and loose coupling between components.\n */\n\nimport { WindowState, AppSettings } from './types';\nimport { AtomicOperationResult } from '../utils/atomic-operations';\nimport { BrowserWindow } from 'electron';\nimport type { EleventyUrlResolver } from '../server/eleventy-url-resolver';\n// BufferEncoding is a built-in Node.js type alias\ntype BufferEncoding =\n  | 'ascii'\n  | 'utf8'\n  | 'utf-8'\n  | 'utf16le'\n  | 'ucs2'\n  | 'ucs-2'\n  | 'base64'\n  | 'base64url'\n  | 'latin1'\n  | 'binary'\n  | 'hex';\n\n// Forward declare ManagedServer to avoid circular imports\n// The actual interface is defined in '../server/website-server-manager'\n// Type alias to avoid circular imports - actual WebsiteServer is defined in '../server/per-website-server'\ntype WebsiteServer = {\n  eleventy: unknown;\n  devServer: unknown;\n  inputDir: string;\n  outputDir: string;\n  port: number;\n  actualUrl?: string;\n  urlResolver: EleventyUrlResolver;\n  restoreConsole?: () => void;\n};\n\nexport interface ManagedServer {\n  websiteName: string;\n  websitePath: string;\n  port: number;\n  actualUrl?: string;\n  state: string;\n  server?: WebsiteServer; // Use WebsiteServer type\n  startedAt?: Date;\n  lastError?: Error;\n  retryCount: number;\n}\n\n/**\n * Base interface for all disposable services\n */\nexport interface IDisposable {\n  dispose(): void | Promise<void>;\n}\n\n/**\n * Base interface for services that can be initialized\n */\nexport interface IInitializable {\n  initialize(): void | Promise<void>;\n}\n\n/**\n * Configuration service interface\n */\nexport interface IConfigService extends IDisposable {\n  get<T>(key: string): T | undefined;\n  set<T>(key: string, value: T): void;\n  has(key: string): boolean;\n  getAll(): Record<string, unknown>;\n  save(): Promise<void>;\n}\n\n/**\n * Logging service interface\n */\nexport interface ILogger {\n  debug(message: string, meta?: Record<string, unknown>): void;\n  info(message: string, meta?: Record<string, unknown>): void;\n  warn(message: string, meta?: Record<string, unknown>): void;\n  error(message: string, error?: Error, meta?: Record<string, unknown>): void;\n  child(context: Record<string, unknown>): ILogger;\n}\n\n/**\n * Settings store interface\n */\nexport interface IStore extends IDisposable {\n  get<K extends keyof AppSettings>(key: K): AppSettings[K];\n  set<K extends keyof AppSettings>(key: K, val: AppSettings[K]): void;\n  getAll(): AppSettings;\n  setAll(settings: Partial<AppSettings>): void;\n\n  // Window state management\n  saveWindowStates(windowStates: WindowState[]): void;\n  getWindowStates(): WindowState[];\n  clearWindowStates(): void;\n\n  // Recent websites management\n  addRecentWebsite(websiteName: string): void;\n  getRecentWebsites(): string[];\n  clearRecentWebsites(): void;\n  removeRecentWebsite(websiteName: string): void;\n\n  // Persistence\n  forceSave(): Promise<void>;\n}\n\n/**\n * Result of validating a website's structure and configuration.\n */\nexport interface WebsiteValidationResult {\n  valid: boolean;\n  error?: string;\n}\n\n/**\n * Website management service interface\n */\nexport interface IWebsiteManager extends IDisposable {\n  // Website operations\n  createWebsite(name: string): Promise<string>;\n  renameWebsite(oldName: string, newName: string): Promise<boolean>;\n  deleteWebsite(name: string): Promise<boolean>;\n\n  // Website queries\n  listWebsites(): Promise<string[]>;\n  getWebsitePath(name: string): string;\n  websiteExists(name: string): Promise<boolean>;\n\n  // Validation\n  validateWebsiteName(name: string): WebsiteValidationResult;\n  validateWebsiteNameAsync(name: string): Promise<WebsiteValidationResult>;\n}\n\n/**\n * Website server information\n */\nexport interface WebsiteServerInfo {\n  name: string;\n  port: number;\n  status: 'starting' | 'running' | 'stopping' | 'stopped' | 'error';\n  url?: string;\n  error?: string;\n  pid?: number;\n}\n\n/**\n * Website server management service interface\n * Note: This interface extends EventEmitter for server events\n */\nexport interface IWebsiteServerManager extends IDisposable {\n  // EventEmitter methods for server lifecycle events\n  on(event: 'server-log', listener: (websiteName: string, message: string, level: string) => void): this;\n  on(event: 'server-started', listener: (websiteName: string, managedServer: ManagedServer) => void): this;\n  on(event: 'server-error', listener: (websiteName: string, error: Error) => void): this;\n  on(event: string, listener: (...args: unknown[]) => void): this;\n\n  // Server lifecycle\n  startServer(websiteName: string, websitePath: string): Promise<WebsiteServerInfo>;\n  stopServer(websiteName: string): Promise<void>;\n  restartServer(websiteName: string): Promise<WebsiteServerInfo>;\n\n  // Server queries\n  getServerInfo(websiteName: string): WebsiteServerInfo | undefined;\n  getServer(websiteName: string): ManagedServer | undefined; // Returns ManagedServer but avoiding circular imports\n  getAllServers(): ReadonlyMap<string, ManagedServer>; // Returns Map<string, ManagedServer>\n  isServerRunning(websiteName: string): boolean;\n\n  // Server management\n  stopAllServers(): Promise<void>;\n  cleanupOrphanedServers(): Promise<void>;\n}\n\n/**\n * DNS management service interface\n */\nexport interface IDnsManager extends IDisposable {\n  // DNS operations\n  updateHostsFile(hostname: string, ipAddress?: string): Promise<boolean>;\n  cleanupHostsFile(): Promise<boolean>;\n\n  // DNS queries\n  isHostnameRegistered(hostname: string): Promise<boolean>;\n  getRegisteredHostnames(): Promise<string[]>;\n}\n\n/**\n * Certificate management service interface\n */\nexport interface ICertificateManager extends IDisposable {\n  // Certificate operations\n  generateCertificate(hostname: string): Promise<{ cert: string; key: string }>;\n  installCAInSystem(): Promise<boolean>;\n  isCAInstalledInSystem(): Promise<boolean>;\n\n  // Certificate queries\n  getCertificatePath(hostname: string): string;\n  certificateExists(hostname: string): Promise<boolean>;\n}\n\n/**\n * Menu management service interface\n */\nexport interface IMenuManager extends IDisposable {\n  // Menu operations\n  updateApplicationMenu(): void;\n  createWebsiteContextMenu(websiteName: string): void;\n\n  // Menu state\n  setMenuEnabled(enabled: boolean): void;\n}\n\n/**\n * Window state information\n */\nexport interface WindowInfo {\n  id: number;\n  websiteName?: string;\n  type: 'main' | 'website' | 'settings';\n  bounds?: { x: number; y: number; width: number; height: number };\n  isMaximized?: boolean;\n}\n\n/**\n * Window management service interface\n */\nexport interface IWindowManager extends IDisposable {\n  // Window operations\n  createMainWindow(): Promise<BrowserWindow>;\n  createWebsiteWindow(websiteName: string): Promise<BrowserWindow>;\n  createSettingsWindow(): Promise<BrowserWindow>;\n\n  // Window queries\n  getWindow(id: number): BrowserWindow | undefined;\n  getWebsiteWindow(websiteName: string): BrowserWindow | undefined;\n  getAllWindows(): BrowserWindow[];\n  getAllWebsiteWindows(): BrowserWindow[];\n\n  // Window state\n  saveWindowState(window: BrowserWindow): void;\n  restoreWindowState(window: BrowserWindow, websiteName?: string): void;\n\n  // Window lifecycle\n  closeWindow(id: number): void;\n  closeAllWindows(): void;\n  focusWindow(id: number): void;\n}\n\n/**\n * File system operations interface\n */\nexport interface IFileSystem {\n  // File operations\n  exists(path: string): Promise<boolean>;\n  readFile(path: string, encoding?: BufferEncoding): Promise<string | Buffer>;\n  writeFile(path: string, data: string | Buffer, encoding?: BufferEncoding): Promise<void>;\n\n  // Directory operations\n  mkdir(path: string, options?: { recursive?: boolean }): Promise<void>;\n  readdir(path: string): Promise<string[]>;\n  rmdir(path: string, options?: { recursive?: boolean }): Promise<void>;\n\n  // Path operations\n  copyFile(src: string, dest: string): Promise<void>;\n  rename(oldPath: string, newPath: string): Promise<void>;\n  stat(path: string): Promise<{ isFile(): boolean; isDirectory(): boolean; size: number; mtime: Date }>;\n}\n\n/**\n * Atomic operations service interface\n */\nexport interface IAtomicOperations {\n  // Atomic file operations\n  writeFileAtomic(\n    path: string,\n    data: string | Buffer,\n    options?: Record<string, unknown>\n  ): Promise<AtomicOperationResult<void>>;\n  copyDirectoryAtomic(\n    src: string,\n    dest: string,\n    options?: Record<string, unknown>\n  ): Promise<AtomicOperationResult<void>>;\n  renameAtomic(\n    oldPath: string,\n    newPath: string,\n    options?: Record<string, unknown>\n  ): Promise<AtomicOperationResult<void>>;\n\n  // Transaction support\n  createTransaction(): IAtomicTransaction;\n}\n\n/**\n * Interface for managing atomic transactions with rollback capability.\n */\nexport interface IAtomicTransaction {\n  addOperation(operation: () => Promise<void>, rollback?: () => Promise<void>): void;\n  execute<T = void>(): Promise<AtomicOperationResult<T>>;\n  rollback(): Promise<boolean>;\n}\n\n/**\n * Event emitter interface for services that emit events\n */\nexport interface IEventEmitter<T = unknown> {\n  on(event: string, listener: (data: T) => void): void;\n  off(event: string, listener: (data: T) => void): void;\n  emit(event: string, data?: T): void;\n  once(event: string, listener: (data: T) => void): void;\n}\n\n/**\n * Result of a service health check including status and details.\n */\nexport interface HealthCheckResult {\n  service: string;\n  status: 'healthy' | 'unhealthy' | 'degraded';\n  message?: string;\n  details?: Record<string, unknown>;\n  timestamp: Date;\n}\n\n/**\n * Health monitoring service interface\n */\nexport interface IHealthMonitor extends IDisposable, IEventEmitter<HealthCheckResult> {\n  // Health checks\n  checkHealth(serviceName: string): Promise<HealthCheckResult>;\n  checkAllServices(): Promise<HealthCheckResult[]>;\n\n  // Health monitoring\n  startMonitoring(intervalMs?: number): void;\n  stopMonitoring(): void;\n\n  // Health status\n  getHealthStatus(serviceName: string): HealthCheckResult | undefined;\n  getAllHealthStatuses(): HealthCheckResult[];\n  isHealthy(serviceName: string): boolean;\n}\n\n/**\n * Service factory interface for creating services\n */\nexport interface IServiceFactory {\n  createStore(): IStore;\n  createWebsiteManager(): IWebsiteManager;\n  createWebsiteServerManager(): IWebsiteServerManager;\n  createDnsManager(): IDnsManager;\n  createCertificateManager(): ICertificateManager;\n  createMenuManager(): IMenuManager;\n  createWindowManager(): IWindowManager;\n  createLogger(context?: string): ILogger;\n  createFileSystem(): IFileSystem;\n  createAtomicOperations(): IAtomicOperations;\n  createHealthMonitor(): IHealthMonitor;\n}\n\n/**\n * Application context interface\n */\nexport interface IApplicationContext extends IDisposable {\n  // Service access\n  getService<T>(serviceName: string): T;\n  getServiceAsync<T>(serviceName: string): Promise<T>;\n\n  // Application lifecycle\n  initialize(): Promise<void>;\n  shutdown(): Promise<void>;\n\n  // Configuration\n  isProduction(): boolean;\n  isDevelopment(): boolean;\n  getVersion(): string;\n  getAppDataPath(): string;\n}\n\n/**\n * Plugin interface for extensibility\n */\nexport interface IPlugin extends IDisposable {\n  name: string;\n  version: string;\n  dependencies?: string[];\n\n  initialize(context: IApplicationContext): Promise<void>;\n  activate(): Promise<void>;\n  deactivate(): Promise<void>;\n}\n\n/**\n * Plugin manager interface\n */\nexport interface IPluginManager extends IDisposable {\n  // Plugin lifecycle\n  loadPlugin(plugin: IPlugin): Promise<void>;\n  unloadPlugin(name: string): Promise<void>;\n\n  // Plugin queries\n  getPlugin(name: string): IPlugin | undefined;\n  getAllPlugins(): IPlugin[];\n  isPluginLoaded(name: string): boolean;\n\n  // Plugin management\n  activatePlugin(name: string): Promise<void>;\n  deactivatePlugin(name: string): Promise<void>;\n  reloadPlugin(name: string): Promise<void>;\n}\n\n/**\n * Type guards for interface checking\n */\nexport const TypeGuards = {\n  isDisposable(obj: unknown): obj is IDisposable {\n    return obj !== null && typeof obj === 'object' && typeof (obj as IDisposable).dispose === 'function';\n  },\n\n  isInitializable(obj: unknown): obj is IInitializable {\n    return obj !== null && typeof obj === 'object' && typeof (obj as IInitializable).initialize === 'function';\n  },\n\n  isEventEmitter(obj: unknown): obj is IEventEmitter {\n    return (\n      obj !== null &&\n      typeof obj === 'object' &&\n      typeof (obj as IEventEmitter).on === 'function' &&\n      typeof (obj as IEventEmitter).emit === 'function'\n    );\n  },\n};\n\n/**\n * Service lifecycle states\n */\nexport enum ServiceLifecycleState {\n  NotInitialized = 'not-initialized',\n  Initializing = 'initializing',\n  Initialized = 'initialized',\n  Starting = 'starting',\n  Running = 'running',\n  Stopping = 'stopping',\n  Stopped = 'stopped',\n  Error = 'error',\n  Disposed = 'disposed',\n}\n\n/**\n * Service metadata interface\n */\nexport interface IServiceMetadata {\n  name: string;\n  version?: string;\n  description?: string;\n  dependencies: string[];\n  state: ServiceLifecycleState;\n  createdAt: Date;\n  lastStateChange: Date;\n  error?: Error;\n}\n\n/**\n * Service with metadata interface\n */\nexport interface IServiceWithMetadata<T = unknown> {\n  service: T;\n  metadata: IServiceMetadata;\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9cb38810ff02caebe404c2a35203ba9dac28c1af"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_22y2k0der0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_22y2k0der0();
cov_22y2k0der0().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_22y2k0der0().s[1]++;
exports.ServiceLifecycleState = exports.TypeGuards = void 0;
/**
 * Type guards for interface checking
 */
/* istanbul ignore next */
cov_22y2k0der0().s[2]++;
exports.TypeGuards = {
  isDisposable(obj) {
    /* istanbul ignore next */
    cov_22y2k0der0().f[0]++;
    cov_22y2k0der0().s[3]++;
    return /* istanbul ignore next */(cov_22y2k0der0().b[0][0]++, obj !== null) &&
    /* istanbul ignore next */
    (cov_22y2k0der0().b[0][1]++, typeof obj === 'object') &&
    /* istanbul ignore next */
    (cov_22y2k0der0().b[0][2]++, typeof obj.dispose === 'function');
  },
  isInitializable(obj) {
    /* istanbul ignore next */
    cov_22y2k0der0().f[1]++;
    cov_22y2k0der0().s[4]++;
    return /* istanbul ignore next */(cov_22y2k0der0().b[1][0]++, obj !== null) &&
    /* istanbul ignore next */
    (cov_22y2k0der0().b[1][1]++, typeof obj === 'object') &&
    /* istanbul ignore next */
    (cov_22y2k0der0().b[1][2]++, typeof obj.initialize === 'function');
  },
  isEventEmitter(obj) {
    /* istanbul ignore next */
    cov_22y2k0der0().f[2]++;
    cov_22y2k0der0().s[5]++;
    return /* istanbul ignore next */(cov_22y2k0der0().b[2][0]++, obj !== null) &&
    /* istanbul ignore next */
    (cov_22y2k0der0().b[2][1]++, typeof obj === 'object') &&
    /* istanbul ignore next */
    (cov_22y2k0der0().b[2][2]++, typeof obj.on === 'function') &&
    /* istanbul ignore next */
    (cov_22y2k0der0().b[2][3]++, typeof obj.emit === 'function');
  }
};
/**
 * Service lifecycle states
 */
var ServiceLifecycleState;
/* istanbul ignore next */
cov_22y2k0der0().s[6]++;
(function (ServiceLifecycleState) {
  /* istanbul ignore next */
  cov_22y2k0der0().f[3]++;
  cov_22y2k0der0().s[7]++;
  ServiceLifecycleState["NotInitialized"] = "not-initialized";
  /* istanbul ignore next */
  cov_22y2k0der0().s[8]++;
  ServiceLifecycleState["Initializing"] = "initializing";
  /* istanbul ignore next */
  cov_22y2k0der0().s[9]++;
  ServiceLifecycleState["Initialized"] = "initialized";
  /* istanbul ignore next */
  cov_22y2k0der0().s[10]++;
  ServiceLifecycleState["Starting"] = "starting";
  /* istanbul ignore next */
  cov_22y2k0der0().s[11]++;
  ServiceLifecycleState["Running"] = "running";
  /* istanbul ignore next */
  cov_22y2k0der0().s[12]++;
  ServiceLifecycleState["Stopping"] = "stopping";
  /* istanbul ignore next */
  cov_22y2k0der0().s[13]++;
  ServiceLifecycleState["Stopped"] = "stopped";
  /* istanbul ignore next */
  cov_22y2k0der0().s[14]++;
  ServiceLifecycleState["Error"] = "error";
  /* istanbul ignore next */
  cov_22y2k0der0().s[15]++;
  ServiceLifecycleState["Disposed"] = "disposed";
})(
/* istanbul ignore next */
(cov_22y2k0der0().b[3][0]++, ServiceLifecycleState) ||
/* istanbul ignore next */
(cov_22y2k0der0().b[3][1]++, exports.ServiceLifecycleState = ServiceLifecycleState = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,