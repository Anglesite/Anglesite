{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/app/core/errors.test.ts","mappings":"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","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/app/core/errors.test.ts"],"sourcesContent":["/**\n * @file Error System Tests\n *\n * Tests for the structured error handling system including base errors,\n * domain-specific errors, utilities, and error management.\n */\n\nimport {\n  AngleError,\n  ErrorSeverity,\n  ErrorCategory,\n  ErrorUtils,\n  WebsiteError,\n  WebsiteNotFoundError,\n  ServerError,\n  ServerStartError,\n  AtomicOperationError,\n  FileNotFoundError,\n  RequiredFieldError,\n  InvalidFormatError,\n  withContext,\n  withRetry,\n  errorRegistry,\n  registerErrorHandler,\n  ErrorContextManager,\n} from '../../../app/core/errors';\n\ndescribe('Error System', () => {\n  describe('Base AngleError', () => {\n    class TestError extends AngleError {\n      constructor(message: string) {\n        super(message, 'TEST_ERROR', ErrorCategory.SYSTEM, ErrorSeverity.MEDIUM);\n      }\n    }\n\n    it('should create error with basic properties', () => {\n      const error = new TestError('Test message');\n\n      expect(error.message).toBe('Test message');\n      expect(error.code).toBe('TEST_ERROR');\n      expect(error.category).toBe(ErrorCategory.SYSTEM);\n      expect(error.severity).toBe(ErrorSeverity.MEDIUM);\n      expect(error.timestamp).toBeInstanceOf(Date);\n      expect(error.name).toBe('TestError');\n    });\n\n    it('should serialize error properly', () => {\n      const error = new TestError('Test message');\n      const serialized = error.serialize();\n\n      expect(serialized.name).toBe('TestError');\n      expect(serialized.message).toBe('Test message');\n      expect(serialized.code).toBe('TEST_ERROR');\n      expect(serialized.category).toBe(ErrorCategory.SYSTEM);\n      expect(serialized.severity).toBe(ErrorSeverity.MEDIUM);\n      expect(serialized.metadata).toBeDefined();\n    });\n\n    it('should determine recoverability correctly', () => {\n      const criticalError = new TestError('Critical');\n      Object.defineProperty(criticalError, 'severity', { value: ErrorSeverity.CRITICAL, configurable: true });\n\n      const mediumError = new TestError('Medium');\n\n      expect(criticalError.isRecoverable()).toBe(false);\n      expect(mediumError.isRecoverable()).toBe(true);\n    });\n\n    it('should add context correctly', () => {\n      const error = new TestError('Test message');\n      error.addContext('userId', '123');\n      error.addContext('operation', 'test');\n\n      expect(error.metadata.context?.userId).toBe('123');\n      expect(error.metadata.context?.operation).toBe('test');\n    });\n\n    it('should create error with context', () => {\n      const error = new TestError('Test message');\n      const contextError = error.withContext({ userId: '456', operation: 'update' });\n\n      expect(contextError.metadata.context?.userId).toBe('456');\n      expect(contextError.metadata.context?.operation).toBe('update');\n      expect(contextError).not.toBe(error); // Should be a new instance\n    });\n  });\n\n  describe('Domain-specific Errors', () => {\n    it('should create WebsiteError with website context', () => {\n      const error = new WebsiteError('Website failed', 'WEBSITE_FAILED', 'site-123', '/path/to/site');\n\n      expect(error.websiteId).toBe('site-123');\n      expect(error.websitePath).toBe('/path/to/site');\n      expect(error.code).toBe('WEBSITE_FAILED');\n      expect(error.category).toBe(ErrorCategory.BUSINESS_LOGIC);\n    });\n\n    it('should create WebsiteNotFoundError with proper defaults', () => {\n      const error = new WebsiteNotFoundError('site-456');\n\n      expect(error.websiteId).toBe('site-456');\n      expect(error.code).toBe('WEBSITE_NOT_FOUND');\n      expect(error.message).toBe('Website not found: site-456');\n      expect(error.severity).toBe(ErrorSeverity.MEDIUM);\n    });\n\n    it('should create ServerError with port context', () => {\n      const error = new ServerError('Server failed', 'SERVER_FAILED', 3000, 'server-1');\n\n      expect(error.port).toBe(3000);\n      expect(error.serverId).toBe('server-1');\n      expect(error.category).toBe(ErrorCategory.SYSTEM);\n    });\n\n    it('should create ServerStartError with proper details', () => {\n      const error = new ServerStartError(8080, 'Port already in use');\n\n      expect(error.port).toBe(8080);\n      expect(error.code).toBe('SERVER_START_FAILED');\n      expect(error.message).toBe('Failed to start server on port 8080: Port already in use');\n    });\n\n    it('should create AtomicOperationError with operation context', () => {\n      const error = new AtomicOperationError('Write failed', 'ATOMIC_WRITE_FAILED', 'writeFile', false, [\n        '/tmp/test.tmp',\n      ]);\n\n      expect(error.operationType).toBe('writeFile');\n      expect(error.rollbackPerformed).toBe(false);\n      expect(error.temporaryPaths).toEqual(['/tmp/test.tmp']);\n      expect(error.category).toBe(ErrorCategory.ATOMIC_OPERATION);\n    });\n\n    it('should create FileNotFoundError with file path', () => {\n      const error = new FileNotFoundError('/path/to/file.txt');\n\n      expect(error.path).toBe('/path/to/file.txt');\n      expect(error.code).toBe('FILE_NOT_FOUND');\n      expect(error.category).toBe(ErrorCategory.FILE_SYSTEM);\n    });\n\n    it('should create validation errors with field context', () => {\n      const requiredError = new RequiredFieldError('email');\n      expect(requiredError.field).toBe('email');\n      expect(requiredError.code).toBe('REQUIRED_FIELD_MISSING');\n\n      const formatError = new InvalidFormatError('phone', '123', 'XXX-XXX-XXXX');\n      expect(formatError.field).toBe('phone');\n      expect(formatError.value).toBe('123');\n      expect(formatError.code).toBe('INVALID_FORMAT');\n    });\n  });\n\n  describe('ErrorUtils', () => {\n    it('should wrap regular Error in AngleError', () => {\n      const originalError = new Error('Original error');\n      const wrappedError = ErrorUtils.wrap(originalError);\n\n      expect(wrappedError).toBeInstanceOf(AngleError);\n      expect(wrappedError.message).toBe('Original error');\n      expect(wrappedError.code).toBe('WRAPPED_ERROR');\n      expect(wrappedError.category).toBe(ErrorCategory.SYSTEM);\n    });\n\n    it('should return AngleError unchanged when wrapping', () => {\n      const angleError = new WebsiteError('Test', 'TEST');\n      const wrappedError = ErrorUtils.wrap(angleError);\n\n      expect(wrappedError).toBe(angleError);\n    });\n\n    it('should wrap string as error', () => {\n      const wrappedError = ErrorUtils.wrap('String error message');\n\n      expect(wrappedError).toBeInstanceOf(AngleError);\n      expect(wrappedError.message).toBe('String error message');\n      expect(wrappedError.code).toBe('UNKNOWN_ERROR');\n    });\n\n    it('should wrap error with context', () => {\n      const error = new Error('Test error');\n      const wrappedError = ErrorUtils.wrap(error, { userId: '123', operation: 'test' });\n\n      expect(wrappedError.metadata.context?.userId).toBe('123');\n      expect(wrappedError.metadata.context?.operation).toBe('test');\n    });\n\n    it('should check error matches', () => {\n      const websiteError = new WebsiteError('Test', 'TEST');\n\n      expect(ErrorUtils.matches(websiteError, WebsiteError)).toBe(true);\n      expect(ErrorUtils.matches(websiteError, ServerError)).toBe(false);\n      expect(ErrorUtils.matches(websiteError, 'TEST')).toBe(true);\n      expect(ErrorUtils.matches(websiteError, 'OTHER')).toBe(false);\n    });\n\n    it('should format error for display', () => {\n      const error = new WebsiteError('Website failed', 'WEBSITE_FAILED', 'site-123');\n      const formatted = ErrorUtils.format(error);\n\n      expect(formatted).toContain('[MEDIUM] BUSINESS_LOGIC:WEBSITE_FAILED');\n      expect(formatted).toContain('Website failed');\n      expect(formatted).toContain('websiteId=');\n    });\n\n    it('should convert error to log object', () => {\n      const error = new FileNotFoundError('/test/file.txt');\n      const logObj = ErrorUtils.toLogObject(error);\n\n      expect(logObj.name).toBe('FileNotFoundError');\n      expect(logObj.message).toBe('File not found: /test/file.txt');\n      expect(logObj.code).toBe('FILE_NOT_FOUND');\n      expect(logObj.category).toBe(ErrorCategory.FILE_SYSTEM);\n      expect(logObj.severity).toBe(ErrorSeverity.MEDIUM);\n      expect(logObj.metadata).toBeDefined();\n    });\n\n    it('should get error statistics', () => {\n      const errors = [\n        new WebsiteError('Test 1', 'TEST_1'),\n        new ServerError('Test 2', 'TEST_2'),\n        new FileNotFoundError('/file'),\n        new WebsiteError('Test 3', 'TEST_3'),\n      ];\n\n      const stats = ErrorUtils.getStatistics(errors);\n\n      expect(stats.total).toBe(4);\n      expect(stats.byCategory[ErrorCategory.BUSINESS_LOGIC]).toBe(2);\n      expect(stats.byCategory[ErrorCategory.SYSTEM]).toBe(1);\n      expect(stats.byCategory[ErrorCategory.FILE_SYSTEM]).toBe(1);\n      expect(stats.bySeverity[ErrorSeverity.MEDIUM]).toBe(3);\n      expect(stats.bySeverity[ErrorSeverity.HIGH]).toBe(1); // ServerError defaults to HIGH\n    });\n\n    it('should group errors by category', () => {\n      const errors = [\n        new WebsiteError('Test 1', 'TEST_1'),\n        new ServerError('Test 2', 'TEST_2'),\n        new WebsiteError('Test 3', 'TEST_3'),\n      ];\n\n      const grouped = ErrorUtils.groupByCategory(errors);\n\n      expect(grouped.get(ErrorCategory.BUSINESS_LOGIC)).toHaveLength(2);\n      expect(grouped.get(ErrorCategory.SYSTEM)).toHaveLength(1);\n    });\n  });\n\n  describe('Error Context Management', () => {\n    afterEach(() => {\n      ErrorContextManager.clearAll();\n    });\n\n    it('should execute function with context', async () => {\n      let capturedContext: Record<string, unknown> = {};\n\n      await withContext({ operation: 'test', userId: '123' }, async () => {\n        capturedContext = ErrorContextManager.getMergedContext();\n        return 'success';\n      });\n\n      expect(capturedContext.operation).toBe('test');\n      expect(capturedContext.userId).toBe('123');\n    });\n\n    it('should handle nested contexts', async () => {\n      let innerContext: Record<string, unknown> = {};\n\n      await withContext({ operation: 'outer', userId: '123' }, async () => {\n        await withContext({ operation: 'inner', websiteId: 'site-456' }, async () => {\n          innerContext = ErrorContextManager.getMergedContext();\n          return 'inner';\n        });\n        return 'outer';\n      });\n\n      expect(innerContext.operation).toBe('inner'); // Should override\n      expect(innerContext.userId).toBe('123'); // Should inherit\n      expect(innerContext.websiteId).toBe('site-456'); // Should be added\n    });\n\n    it('should clean up context stack properly', async () => {\n      await withContext({ operation: 'test' }, async () => {\n        expect(ErrorContextManager.getMergedContext().operation).toBe('test');\n        return 'success';\n      });\n\n      // Context should be cleaned up\n      expect(Object.keys(ErrorContextManager.getMergedContext())).toHaveLength(0);\n    });\n  });\n\n  describe('Error Retry Mechanism', () => {\n    it('should succeed on first try', async () => {\n      let attempts = 0;\n\n      const result = await withRetry(\n        () => {\n          attempts++;\n          return 'success';\n        },\n        3,\n        100\n      );\n\n      expect(result).toBe('success');\n      expect(attempts).toBe(1);\n    });\n\n    it('should retry on failure and eventually succeed', async () => {\n      let attempts = 0;\n\n      const result = await withRetry(\n        () => {\n          attempts++;\n          if (attempts < 3) {\n            throw new Error('Temporary failure');\n          }\n          return 'success';\n        },\n        3,\n        10\n      );\n\n      expect(result).toBe('success');\n      expect(attempts).toBe(3);\n    });\n\n    it('should fail after max retries', async () => {\n      let attempts = 0;\n\n      await expect(\n        withRetry(\n          () => {\n            attempts++;\n            throw new Error('Persistent failure');\n          },\n          2,\n          10\n        )\n      ).rejects.toThrow('Persistent failure');\n\n      expect(attempts).toBe(3); // Initial attempt + 2 retries\n    });\n\n    it('should use error-specific retry delays', async () => {\n      class NetworkTestError extends AngleError {\n        constructor() {\n          super('Network error', 'NETWORK_ERROR', ErrorCategory.NETWORK);\n        }\n\n        getRetryDelay() {\n          return 50; // Custom delay\n        }\n\n        isRecoverable() {\n          return true; // Make sure it's recoverable for retries\n        }\n      }\n\n      let attempts = 0;\n      const startTime = Date.now();\n\n      try {\n        await withRetry(\n          () => {\n            attempts++;\n            throw new NetworkTestError();\n          },\n          1,\n          100 // This should be overridden by error's getRetryDelay()\n        );\n      } catch {\n        // Expected to fail\n      }\n\n      const endTime = Date.now();\n      expect(attempts).toBe(2);\n      // Should have used custom delay of 50ms instead of 100ms\n      expect(endTime - startTime).toBeLessThan(80);\n    });\n  });\n\n  describe('Error Registration and Handling', () => {\n    beforeEach(() => {\n      // Clear any existing handlers\n      // Clear handlers - accessing private property for testing\n      (errorRegistry as unknown as { handlers: Map<string, unknown[]> }).handlers.clear();\n    });\n\n    it('should register and call error handlers', async () => {\n      const handler = jest.fn();\n      registerErrorHandler('WebsiteError', handler);\n\n      const error = new WebsiteError('Test error', 'TEST');\n      await errorRegistry.handleError(error);\n\n      expect(handler).toHaveBeenCalledWith(error);\n    });\n\n    it('should call global error handlers', async () => {\n      const globalHandler = jest.fn();\n      const specificHandler = jest.fn();\n\n      registerErrorHandler('*', globalHandler);\n      registerErrorHandler('ServerError', specificHandler);\n\n      const websiteError = new WebsiteError('Test', 'TEST');\n      const serverError = new ServerError('Test', 'TEST');\n\n      await errorRegistry.handleError(websiteError);\n      await errorRegistry.handleError(serverError);\n\n      expect(globalHandler).toHaveBeenCalledTimes(2);\n      expect(specificHandler).toHaveBeenCalledTimes(1);\n      expect(specificHandler).toHaveBeenCalledWith(serverError);\n    });\n\n    it('should handle handler errors gracefully', async () => {\n      const faultyHandler = jest.fn(() => {\n        throw new Error('Handler error');\n      });\n\n      registerErrorHandler('WebsiteError', faultyHandler);\n\n      const error = new WebsiteError('Test', 'TEST');\n\n      // Should not throw despite handler error\n      await expect(errorRegistry.handleError(error)).resolves.toBeUndefined();\n      expect(faultyHandler).toHaveBeenCalled();\n    });\n  });\n\n  describe('Error Serialization and Deserialization', () => {\n    it('should serialize and deserialize error correctly', () => {\n      const originalError = new WebsiteNotFoundError('site-123', {\n        operation: 'loadWebsite',\n        context: { userId: '456' },\n      });\n\n      const serialized = originalError.serialize();\n      const deserialized = ErrorUtils.fromSerialized(serialized);\n\n      expect(deserialized.message).toBe(originalError.message);\n      expect(deserialized.code).toBe(originalError.code);\n      expect(deserialized.category).toBe(originalError.category);\n      expect(deserialized.severity).toBe(originalError.severity);\n      expect(deserialized.name).toBe(originalError.name);\n      expect(deserialized.metadata.operation).toBe('loadWebsite');\n      expect(deserialized.metadata.context?.userId).toBe('456');\n    });\n\n    it('should handle nested error serialization', () => {\n      const cause = new Error('Root cause');\n      const wrappedCause = ErrorUtils.wrap(cause);\n      const topError = new WebsiteError(\n        'Top level',\n        'TOP_LEVEL',\n        undefined,\n        undefined,\n        undefined,\n        undefined,\n        wrappedCause\n      );\n\n      const serialized = topError.serialize();\n      expect(serialized.cause).toBeDefined();\n      expect(serialized.cause?.message).toBe('Root cause');\n\n      const deserialized = ErrorUtils.fromSerialized(serialized);\n      expect(deserialized.getRootCause().message).toBe('Root cause');\n    });\n\n    it('should convert to JSON properly', () => {\n      const error = new ServerStartError(3000, 'Port in use');\n      const jsonString = JSON.stringify(error);\n      const parsed = JSON.parse(jsonString);\n\n      expect(parsed.name).toBe('ServerStartError');\n      expect(parsed.message).toBe('Failed to start server on port 3000: Port in use');\n      expect(parsed.code).toBe('SERVER_START_FAILED');\n    });\n  });\n});\n"],"version":3}