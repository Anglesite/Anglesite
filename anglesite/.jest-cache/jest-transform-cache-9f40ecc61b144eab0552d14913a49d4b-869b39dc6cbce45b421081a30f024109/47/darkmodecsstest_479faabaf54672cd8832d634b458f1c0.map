{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/ui/dark-mode-css.test.ts","mappings":"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","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/ui/dark-mode-css.test.ts"],"sourcesContent":["/**\n * @file Tests for dark mode CSS implementation\n * Tests CSS color-scheme property, media queries, and theme variable handling\n */\n\nimport { JSDOM } from 'jsdom';\nimport fs from 'fs';\nimport path from 'path';\n\ndescribe('Dark Mode CSS Implementation', () => {\n  let dom: JSDOM;\n  let document: Document;\n  let window: Window;\n\n  beforeEach(() => {\n    // Create JSDOM environment\n    dom = new JSDOM('<!DOCTYPE html><html><head></head><body></body></html>', {\n      url: 'http://localhost',\n      pretendToBeVisual: true,\n    });\n\n    document = dom.window.document;\n    window = dom.window as unknown as Window;\n\n    // Add matchMedia mock\n    Object.defineProperty(window, 'matchMedia', {\n      writable: true,\n      value: jest.fn().mockImplementation((query) => ({\n        matches: query.includes('dark'),\n        media: query,\n        onchange: null,\n        addListener: jest.fn(),\n        removeListener: jest.fn(),\n        addEventListener: jest.fn(),\n        removeEventListener: jest.fn(),\n        dispatchEvent: jest.fn(),\n      })),\n    });\n  });\n\n  afterEach(() => {\n    dom.window.close();\n  });\n\n  describe('HTML Critical CSS', () => {\n    it('should contain color-scheme property in critical CSS', () => {\n      // Read the actual HTML file\n      const htmlPath = path.join(__dirname, '../../app/index.html');\n      const htmlContent = fs.readFileSync(htmlPath, 'utf8');\n\n      // Check for color-scheme property\n      expect(htmlContent).toContain('color-scheme: light dark');\n    });\n\n    it('should have system Canvas and CanvasText colors as fallback', () => {\n      const htmlPath = path.join(__dirname, '../../app/index.html');\n      const htmlContent = fs.readFileSync(htmlPath, 'utf8');\n\n      expect(htmlContent).toContain('background-color: Canvas');\n      expect(htmlContent).toContain('color: CanvasText');\n    });\n\n    it('should have dark mode media query overrides', () => {\n      const htmlPath = path.join(__dirname, '../../app/index.html');\n      const htmlContent = fs.readFileSync(htmlPath, 'utf8');\n\n      expect(htmlContent).toContain('@media (prefers-color-scheme: dark)');\n      expect(htmlContent).toContain('background-color: #1e1e1e');\n      expect(htmlContent).toContain('color: #ffffff');\n    });\n\n    it('should have light mode media query overrides', () => {\n      const htmlPath = path.join(__dirname, '../../app/index.html');\n      const htmlContent = fs.readFileSync(htmlPath, 'utf8');\n\n      expect(htmlContent).toContain('@media (prefers-color-scheme: light)');\n      expect(htmlContent).toContain('background-color: #ffffff');\n      expect(htmlContent).toContain('color: #333333');\n    });\n  });\n\n  describe('Main CSS File', () => {\n    it('should contain color-scheme property in main CSS', () => {\n      const cssPath = path.join(__dirname, '../../app/styles.css');\n      const cssContent = fs.readFileSync(cssPath, 'utf8');\n\n      expect(cssContent).toContain('color-scheme: light dark');\n    });\n\n    it('should have complete dark theme variable definitions', () => {\n      const cssPath = path.join(__dirname, '../../app/styles.css');\n      const cssContent = fs.readFileSync(cssPath, 'utf8');\n\n      // Check for dark theme variables\n      expect(cssContent).toContain(\":root[data-theme='dark']\");\n      expect(cssContent).toContain('--bg-primary: #1e1e1e');\n      expect(cssContent).toContain('--text-primary: #ffffff');\n      expect(cssContent).toContain('--border-primary: #404040');\n    });\n\n    it('should have complete light theme variable definitions', () => {\n      const cssPath = path.join(__dirname, '../../app/styles.css');\n      const cssContent = fs.readFileSync(cssPath, 'utf8');\n\n      // Check for light theme variables\n      expect(cssContent).toContain('--bg-primary: #ffffff');\n      expect(cssContent).toContain('--text-primary: #333333');\n      expect(cssContent).toContain('--border-primary: #cccccc');\n    });\n  });\n\n  describe('Theme Data Attribute Script', () => {\n    it('should set data-theme attribute based on system preference', () => {\n      // Mock dark mode preference\n      const mockMatchMedia = jest.fn().mockImplementation((query) => ({\n        matches: query.includes('dark'),\n      }));\n      Object.defineProperty(window, 'matchMedia', { value: mockMatchMedia });\n\n      // Create HTML with theme detection script\n      document.head.innerHTML = `\n        <script>\n          if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            document.documentElement.setAttribute('data-theme', 'dark');\n          }\n        </script>\n      `;\n\n      // Execute the script\n      const script = document.querySelector('script');\n      if (script) {\n        // Execute the script content in the JSDOM environment\n        const scriptFunction = new Function('document', 'window', script.textContent || '');\n        scriptFunction(document, window);\n      }\n\n      expect(document.documentElement.getAttribute('data-theme')).toBe('dark');\n    });\n\n    it('should not set data-theme attribute for light mode preference', () => {\n      // Mock light mode preference\n      const mockMatchMedia = jest.fn().mockImplementation((query) => ({\n        matches: !query.includes('dark'),\n      }));\n      Object.defineProperty(window, 'matchMedia', { value: mockMatchMedia });\n\n      // Create HTML with theme detection script\n      document.head.innerHTML = `\n        <script>\n          if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            document.documentElement.setAttribute('data-theme', 'dark');\n          }\n        </script>\n      `;\n\n      // Execute the script\n      const script = document.querySelector('script');\n      if (script) {\n        const scriptFunction = new Function('document', 'window', script.textContent || '');\n        scriptFunction(document, window);\n      }\n\n      expect(document.documentElement.getAttribute('data-theme')).toBeNull();\n    });\n  });\n\n  describe('CSS Media Query Integration', () => {\n    it('should apply dark styles when matchMedia indicates dark mode', () => {\n      // Create a test element with CSS\n      document.head.innerHTML = `\n        <style>\n          :root { color-scheme: light dark; }\n          html, body { background-color: #ffffff; color: #333333; }\n          @media (prefers-color-scheme: dark) {\n            html, body { background-color: #1e1e1e; color: #ffffff; }\n          }\n        </style>\n      `;\n\n      // Mock dark mode\n      const mockMatchMedia = jest.fn().mockImplementation((query) => ({\n        matches: query.includes('dark'),\n      }));\n      Object.defineProperty(window, 'matchMedia', { value: mockMatchMedia });\n\n      // The styles should exist in the document\n      const style = document.querySelector('style');\n      expect(style?.textContent).toContain('@media (prefers-color-scheme: dark)');\n      expect(style?.textContent).toContain('background-color: #1e1e1e');\n    });\n\n    it('should have proper CSS variable fallbacks', () => {\n      const cssPath = path.join(__dirname, '../../app/styles.css');\n      const cssContent = fs.readFileSync(cssPath, 'utf8');\n\n      // Check that CSS variables are used consistently\n      expect(cssContent).toContain('var(--bg-primary)');\n      expect(cssContent).toContain('var(--text-primary)');\n      expect(cssContent).toContain('var(--border-primary)');\n\n      // Check that transition properties exist for smooth theme changes\n      expect(cssContent).toMatch(/transition.*background-color/);\n      expect(cssContent).toMatch(/transition.*color/);\n    });\n  });\n\n  describe('Theme Variable Consistency', () => {\n    it('should have matching color variables between HTML and CSS', () => {\n      const htmlPath = path.join(__dirname, '../../app/index.html');\n      const cssPath = path.join(__dirname, '../../app/styles.css');\n\n      const htmlContent = fs.readFileSync(htmlPath, 'utf8');\n      const cssContent = fs.readFileSync(cssPath, 'utf8');\n\n      // Extract colors from HTML critical CSS\n      const htmlDarkBg = htmlContent.match(/background-color:\\s*#1e1e1e/);\n      const htmlLightBg = htmlContent.match(/background-color:\\s*#ffffff/);\n\n      // Extract colors from main CSS\n      const cssDarkBg = cssContent.match(/--bg-primary:\\s*#1e1e1e/);\n      const cssLightBg = cssContent.match(/--bg-primary:\\s*#ffffff/);\n\n      expect(htmlDarkBg).toBeTruthy();\n      expect(htmlLightBg).toBeTruthy();\n      expect(cssDarkBg).toBeTruthy();\n      expect(cssLightBg).toBeTruthy();\n    });\n\n    it('should have complete set of theme variables for both modes', () => {\n      const cssPath = path.join(__dirname, '../../app/styles.css');\n      const cssContent = fs.readFileSync(cssPath, 'utf8');\n\n      const requiredVariables = [\n        '--bg-primary',\n        '--bg-secondary',\n        '--bg-tertiary',\n        '--text-primary',\n        '--text-secondary',\n        '--border-primary',\n        '--border-secondary',\n        '--button-bg',\n        '--button-hover',\n        '--button-active',\n      ];\n\n      // Check light theme variables\n      requiredVariables.forEach((variable) => {\n        expect(cssContent).toMatch(new RegExp(`${variable}:\\\\s*#[a-fA-F0-9]{6}`));\n      });\n\n      // Check dark theme variables (should appear twice - light and dark)\n      requiredVariables.forEach((variable) => {\n        const matches = cssContent.match(new RegExp(`${variable}:\\\\s*#[a-fA-F0-9]{6}`, 'g'));\n        expect(matches?.length).toBeGreaterThanOrEqual(2);\n      });\n    });\n  });\n\n  describe('Performance and Loading', () => {\n    it('should have critical CSS inline for immediate loading', () => {\n      const htmlPath = path.join(__dirname, '../../app/index.html');\n      const htmlContent = fs.readFileSync(htmlPath, 'utf8');\n\n      // Critical CSS should be inline in <head>\n      expect(htmlContent).toContain('<style>');\n      expect(htmlContent).toContain('color-scheme: light dark');\n\n      // Should appear before external CSS link\n      const styleIndex = htmlContent.indexOf('<style>');\n      const linkIndex = htmlContent.indexOf('<link rel=\"stylesheet\"');\n      expect(styleIndex).toBeLessThan(linkIndex);\n    });\n\n    it('should use efficient CSS selectors', () => {\n      const cssPath = path.join(__dirname, '../../app/styles.css');\n      const cssContent = fs.readFileSync(cssPath, 'utf8');\n\n      // Should use efficient root-level selectors\n      expect(cssContent).toContain(':root {');\n      expect(cssContent).toContain(\":root[data-theme='dark']\");\n      // Light theme is set in the base :root selector, not a data-theme attribute\n\n      // Should not have overly complex selectors that could impact performance\n      expect(cssContent).not.toMatch(/(\\.[\\w-]+\\s+){5,}/); // No selectors with 5+ space-separated class parts\n    });\n  });\n\n  describe('Toolbar Dark Mode Support', () => {\n    it('should have dark mode media query in styles.css', () => {\n      const cssPath = path.join(__dirname, '../../app/styles.css');\n      const cssContent = fs.readFileSync(cssPath, 'utf8');\n\n      expect(cssContent).toContain('@media (prefers-color-scheme: dark)');\n    });\n\n    it('should use CSS variables for toolbar elements', () => {\n      const cssPath = path.join(__dirname, '../../app/styles.css');\n      const cssContent = fs.readFileSync(cssPath, 'utf8');\n\n      // Check that toolbar elements use CSS variables\n      expect(cssContent).toContain('.top-bar {');\n      expect(cssContent).toMatch(/\\.top-bar.*var\\(--bg-tertiary\\)/s);\n      expect(cssContent).toMatch(/\\.top-bar.*var\\(--border-primary\\)/s);\n\n      expect(cssContent).toContain('.browser-bar {');\n      expect(cssContent).toMatch(/\\.browser-bar.*var\\(--bg-secondary\\)/s);\n      expect(cssContent).toMatch(/\\.browser-bar.*var\\(--border-secondary\\)/s);\n    });\n\n    it('should have proper button theming', () => {\n      const cssPath = path.join(__dirname, '../../app/styles.css');\n      const cssContent = fs.readFileSync(cssPath, 'utf8');\n\n      // Verify button CSS variables\n      expect(cssContent).toMatch(/button.*var\\(--button-bg\\)/s);\n      expect(cssContent).toMatch(/button.*var\\(--text-primary\\)/s);\n      expect(cssContent).toMatch(/button:hover.*var\\(--button-hover\\)/s);\n      expect(cssContent).toMatch(/button:active.*var\\(--button-active\\)/s);\n    });\n\n    it('should have site title and URL display theming', () => {\n      const cssPath = path.join(__dirname, '../../app/styles.css');\n      const cssContent = fs.readFileSync(cssPath, 'utf8');\n\n      // Check site title\n      expect(cssContent).toMatch(/\\.site-title.*var\\(--text-primary\\)/s);\n\n      // Check URL display\n      expect(cssContent).toMatch(/\\.url-display.*var\\(--bg-primary\\)/s);\n      expect(cssContent).toMatch(/\\.url-display.*var\\(--border-primary\\)/s);\n      expect(cssContent).toMatch(/\\.url-display.*var\\(--text-secondary\\)/s);\n    });\n\n    it('should have explicit theme overrides for both light and dark', () => {\n      const cssPath = path.join(__dirname, '../../app/styles.css');\n      const cssContent = fs.readFileSync(cssPath, 'utf8');\n\n      // Check that explicit theme overrides exist\n      expect(cssContent).toContain(\":root[data-theme='light']\");\n      expect(cssContent).toContain(\":root[data-theme='dark']\");\n\n      // Verify they contain the toolbar-specific variables\n      const lightThemeMatch = cssContent.match(/:root\\[data-theme='light'\\]\\s*\\{[^}]+\\}/s);\n      const darkThemeMatch = cssContent.match(/:root\\[data-theme='dark'\\]\\s*\\{[^}]+\\}/s);\n\n      expect(lightThemeMatch).toBeTruthy();\n      expect(darkThemeMatch).toBeTruthy();\n\n      if (lightThemeMatch) {\n        expect(lightThemeMatch[0]).toContain('--bg-tertiary');\n        expect(lightThemeMatch[0]).toContain('--button-bg');\n      }\n\n      if (darkThemeMatch) {\n        expect(darkThemeMatch[0]).toContain('--bg-tertiary');\n        expect(darkThemeMatch[0]).toContain('--button-bg');\n      }\n    });\n\n    it('should have smooth transitions for theme changes', () => {\n      const cssPath = path.join(__dirname, '../../app/styles.css');\n      const cssContent = fs.readFileSync(cssPath, 'utf8');\n\n      // Check that toolbar elements have transitions\n      expect(cssContent).toMatch(/\\.top-bar[\\s\\S]*?transition[^}]*background-color.*ease/);\n      expect(cssContent).toMatch(/\\.browser-bar[\\s\\S]*?transition[^}]*background-color.*ease/);\n      expect(cssContent).toMatch(/\\.url-display[\\s\\S]*?transition[^}]*background-color.*ease/);\n      expect(cssContent).toMatch(/button[\\s\\S]*?transition[^}]*background-color.*ease/);\n    });\n  });\n});\n"],"version":3}