{"version":3,"names":["exports","createWebsiteManager","cov_mhnpo1ng8","s","isWebsiteManager","createWebsiteWithName","validateWebsiteName","validateWebsiteNameAsync","listWebsites","getWebsitePath","renameWebsite","deleteWebsite","fs","__importStar","require","path","os","child_process_1","electron_1","atomic_operations_1","errors_1","FileSystemService","exists","f","promises","stat","readFile","encoding","writeFile","data","mkdir","options","readdir","rmdir","rm","recursive","force","copyFile","src","dest","rename","oldPath","newPath","stats","isFile","isDirectory","size","mtime","createStubAtomicOperations","fileSystem","writeFileAtomic","content","then","success","rollbackPerformed","temporaryPaths","error","ErrorUtils","wrap","copyDirectoryAtomic","AtomicOperationError","Promise","resolve","renameAtomic","createTransaction","WebsiteManager","constructor","logger","atomicOperations","child","service","create","getWebsitesDirectory","join","app","getPath","appDataPath","process","platform","b","homedir","env","APPDATA","filePath","createWebsite","websiteName","info","websitesDir","newWebsitePath","Error","templateSourcePath","findTemplateSourcePath","transaction","createAtomicTransaction","copyResult","atomicCopyDirectory","exclude","validate","contents","requiredFiles","every","file","includes","indexPath","addOperation","indexContent","customizeIndexContent","writeResult","atomicWriteFile","hasWelcome","hasAbout","isValid","undefined","debug","preview","substring","backup","backupPath","Date","now","packageJsonPath","packageJsonContent","customizePackageJson","parsed","JSON","parse","expectedSanitizedName","sanitizePackageName","name","expectedName","actualName","originalWebsiteName","contentPreview","runNpmInstall","nodeModulesPath","warn","result","execute","cleanupError","possiblePaths","__dirname","cwd","starterPath","replace","welcomeSection","trim","toLowerCase","packageJson","sanitizedName","dependencies","workspaceRoot","anglesitePackagePath","webComponentsPackagePath","stringify","websitePath","reject","npmInstall","spawn","stdio","on","code","length","valid","resolvedPath","expectedPath","startsWith","sep","forbiddenChars","test","endsWith","reservedNames","basicValidation","entries","directories","entry","entryPath","push","parentWindow","dialogOptions","type","title","message","detail","buttons","defaultId","cancelId","dialog","showMessageBoxSync","oldName","newName","validation","renameResult","atomicRename","dirPath","srcPath","updateInternalReferences","updatedContent","RegExp","websiteExists","dispose","obj","console","atomicOps","manager"],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/utils/website-manager.ts"],"sourcesContent":["/**\n * @file DI-compatible Website Management Service\n *\n * Refactored version of website management utilities that implements IWebsiteManager.\n * interface and uses dependency injection for better testability and maintainability.\n */\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport { spawn } from 'child_process';\n// BufferEncoding is a built-in Node.js type alias\ntype BufferEncoding =\n  | 'ascii'\n  | 'utf8'\n  | 'utf-8'\n  | 'utf16le'\n  | 'ucs2'\n  | 'ucs-2'\n  | 'base64'\n  | 'base64url'\n  | 'latin1'\n  | 'binary'\n  | 'hex';\nimport { dialog, BrowserWindow, app } from 'electron';\nimport { createAtomicTransaction, atomicWriteFile, atomicCopyDirectory, atomicRename } from './atomic-operations';\nimport { IWebsiteManager, ILogger, IFileSystem, IAtomicOperations } from '../core/interfaces';\nimport { ErrorUtils, AtomicOperationError } from '../core/errors';\n\n// Helper classes for fallback functionality\nclass FileSystemService implements IFileSystem {\n  async exists(path: string): Promise<boolean> {\n    try {\n      await fs.promises.stat(path);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  async readFile(path: string, encoding?: BufferEncoding): Promise<string | Buffer> {\n    return fs.promises.readFile(path, encoding);\n  }\n  async writeFile(path: string, data: string | Buffer, encoding?: BufferEncoding): Promise<void> {\n    return fs.promises.writeFile(path, data, encoding);\n  }\n  async mkdir(path: string, options?: { recursive?: boolean }): Promise<void> {\n    await fs.promises.mkdir(path, options);\n  }\n  async readdir(path: string): Promise<string[]> {\n    return fs.promises.readdir(path);\n  }\n  async rmdir(path: string, options?: { recursive?: boolean }): Promise<void> {\n    await fs.promises.rm(path, { recursive: options?.recursive, force: true });\n  }\n  async copyFile(src: string, dest: string): Promise<void> {\n    return fs.promises.copyFile(src, dest);\n  }\n  async rename(oldPath: string, newPath: string): Promise<void> {\n    return fs.promises.rename(oldPath, newPath);\n  }\n  async stat(path: string) {\n    const stats = await fs.promises.stat(path);\n    return {\n      isFile: () => stats.isFile(),\n      isDirectory: () => stats.isDirectory(),\n      size: stats.size,\n      mtime: stats.mtime,\n    };\n  }\n}\n\nfunction createStubAtomicOperations(fileSystem: IFileSystem): IAtomicOperations {\n  return {\n    writeFileAtomic: (path: string, content: string | Buffer) => {\n      return fileSystem.writeFile(path, content, 'utf-8').then(\n        () => ({\n          success: true,\n          rollbackPerformed: false,\n          temporaryPaths: [],\n        }),\n        (error) => ({\n          success: false,\n          error: ErrorUtils.wrap(error) as AtomicOperationError,\n          rollbackPerformed: false,\n          temporaryPaths: [],\n        })\n      );\n    },\n    copyDirectoryAtomic: () => {\n      const error = new AtomicOperationError(\n        'copyDirectoryAtomic not implemented yet',\n        'NOT_IMPLEMENTED',\n        'copyDirectoryAtomic'\n      );\n      return Promise.resolve({\n        success: false,\n        error: error,\n        rollbackPerformed: false,\n        temporaryPaths: [],\n      });\n    },\n    renameAtomic: (oldPath: string, newPath: string) => {\n      return fileSystem.rename(oldPath, newPath).then(\n        () => ({\n          success: true,\n          rollbackPerformed: false,\n          temporaryPaths: [],\n        }),\n        (error) => ({\n          success: false,\n          error: ErrorUtils.wrap(error) as AtomicOperationError,\n          rollbackPerformed: false,\n          temporaryPaths: [],\n        })\n      );\n    },\n    createTransaction: () => {\n      throw new AtomicOperationError('createTransaction not implemented yet', 'NOT_IMPLEMENTED', 'createTransaction');\n    },\n  };\n}\n\n/**\n * DI-compatible WebsiteManager implementation.\n */\nexport class WebsiteManager implements IWebsiteManager {\n  private readonly logger: ILogger;\n\n  constructor(\n    logger: ILogger,\n    private readonly fileSystem: IFileSystem,\n    private readonly atomicOperations: IAtomicOperations\n  ) {\n    this.logger = logger.child({ service: 'WebsiteManager' });\n  }\n\n  /**\n   * Static factory method for DI container.\n   */\n  static create(logger: ILogger, fileSystem: IFileSystem, atomicOperations: IAtomicOperations): WebsiteManager {\n    return new WebsiteManager(logger, fileSystem, atomicOperations);\n  }\n\n  /**\n   * Get the platform-specific websites directory path.\n   */\n  private getWebsitesDirectory(): string {\n    try {\n      return path.join(app.getPath('userData'), 'websites');\n    } catch {\n      // Fallback for test environments\n      const appDataPath =\n        process.platform === 'darwin'\n          ? path.join(os.homedir(), 'Library', 'Application Support', 'Anglesite')\n          : process.platform === 'win32'\n            ? path.join(process.env.APPDATA || '', 'Anglesite')\n            : path.join(os.homedir(), '.config', 'anglesite');\n\n      return path.join(appDataPath, 'websites');\n    }\n  }\n\n  /**\n   * Helper to check if file exists using the injected file system.\n   */\n  private async exists(filePath: string): Promise<boolean> {\n    return await this.fileSystem.exists(filePath);\n  }\n\n  /**\n   * Create a new website with the specified name and basic structure.\n   *\n   * This function uses atomic operations to ensure data integrity:\n   * - Creates website in temporary location first\n   * - Validates all files are correctly generated\n   * - Atomically moves to final location\n   * - Automatic rollback on any failure.\n   * @param websiteName Unique name for the new website (used as directory name).\n   * @returns Promise resolving to the absolute path of the created website directory.\n   * @throws Error if a website with the same name already exists or creation fails.\n   */\n  async createWebsite(websiteName: string): Promise<string> {\n    this.logger.info('Creating new website', { websiteName });\n\n    const websitesDir = this.getWebsitesDirectory();\n    const newWebsitePath = path.join(websitesDir, websiteName);\n\n    // Pre-validation: Check if website already exists\n    if (await this.exists(newWebsitePath)) {\n      throw new Error(`Website \"${websiteName}\" already exists`);\n    }\n\n    // Ensure websites directory exists\n    if (!(await this.exists(websitesDir))) {\n      await this.fileSystem.mkdir(websitesDir, { recursive: true });\n    }\n\n    // Find template source path\n    const templateSourcePath = await this.findTemplateSourcePath();\n    if (!templateSourcePath) {\n      throw new Error('Could not find @dwk/anglesite-starter template package');\n    }\n\n    // Create atomic transaction for website creation\n    const transaction = createAtomicTransaction();\n\n    try {\n      // Step 1: Atomically copy template to target location\n      const copyResult = await atomicCopyDirectory(templateSourcePath, newWebsitePath, {\n        exclude: ['node_modules', '_site', '.git', 'dist'],\n        validate: async (contents) => {\n          // Validate that essential files are present\n          const requiredFiles = ['src', 'package.json'];\n          return requiredFiles.every((file) => contents.includes(file));\n        },\n      });\n\n      if (!copyResult.success) {\n        throw copyResult.error || new Error('Failed to copy template directory');\n      }\n\n      // Step 2: Atomically customize index.md with website name\n      const indexPath = path.join(newWebsitePath, 'src', 'index.md');\n      if (await this.exists(indexPath)) {\n        transaction.addOperation(\n          async () => {\n            const indexContent = await this.customizeIndexContent(websiteName, indexPath);\n            const writeResult = await atomicWriteFile(indexPath, indexContent, {\n              validate: (content) => {\n                // Validate that customization was applied\n                const hasWelcome = content.includes(`Welcome to ${websiteName}!`);\n                const hasAbout = content.includes(`About ${websiteName}`);\n                const isValid = hasWelcome && hasAbout;\n\n                if (!isValid) {\n                  this.logger.error('Index.md validation failed', undefined, { websiteName, hasWelcome, hasAbout });\n                  this.logger.debug('Content preview', { preview: content.substring(0, 300) });\n                }\n\n                return isValid;\n              },\n              backup: false, // No backup needed - this is a fresh template file\n            });\n\n            if (!writeResult.success) {\n              throw writeResult.error || new Error('Failed to customize index.md');\n            }\n          },\n          async () => {\n            // Rollback: restore original index.md if it exists\n            const backupPath = `${indexPath}.backup.${Date.now()}`;\n            if (await this.exists(backupPath)) {\n              await this.fileSystem.rename(backupPath, indexPath);\n            }\n          }\n        );\n      }\n\n      // Step 3: Atomically update package.json\n      const packageJsonPath = path.join(newWebsitePath, 'package.json');\n      if (await this.exists(packageJsonPath)) {\n        transaction.addOperation(\n          async () => {\n            const packageJsonContent = await this.customizePackageJson(websiteName, packageJsonPath);\n            const writeResult = await atomicWriteFile(packageJsonPath, packageJsonContent, {\n              validate: (content) => {\n                try {\n                  const parsed = JSON.parse(content);\n                  // Validate that name is sanitized correctly\n                  const expectedSanitizedName = this.sanitizePackageName(websiteName);\n                  const isValid = parsed.name === expectedSanitizedName;\n                  if (!isValid) {\n                    this.logger.error('Package.json validation failed', undefined, {\n                      expectedName: expectedSanitizedName,\n                      actualName: parsed.name,\n                      originalWebsiteName: websiteName,\n                    });\n                  }\n                  return isValid;\n                } catch (error) {\n                  this.logger.error('Package.json parse error', error as Error, {\n                    contentPreview: content.substring(0, 500),\n                  });\n                  return false;\n                }\n              },\n              backup: false, // No backup needed - this is a fresh template file\n            });\n\n            if (!writeResult.success) {\n              throw writeResult.error || new Error('Failed to customize package.json');\n            }\n          },\n          async () => {\n            // Rollback: restore original package.json if it exists\n            const backupPath = `${packageJsonPath}.backup.${Date.now()}`;\n            if (await this.exists(backupPath)) {\n              await this.fileSystem.rename(backupPath, packageJsonPath);\n            }\n          }\n        );\n      }\n\n      // Step 4: Run npm install if package.json exists\n      if (await this.exists(packageJsonPath)) {\n        transaction.addOperation(\n          async () => {\n            await this.runNpmInstall(newWebsitePath);\n          },\n          async () => {\n            // Rollback: remove node_modules if created\n            const nodeModulesPath = path.join(newWebsitePath, 'node_modules');\n            if (await this.exists(nodeModulesPath)) {\n              try {\n                await this.fileSystem.rmdir(nodeModulesPath, { recursive: true });\n              } catch (error) {\n                this.logger.warn('Failed to remove node_modules during rollback', { error });\n              }\n            }\n          }\n        );\n      }\n\n      // Execute the transaction\n      const result = await transaction.execute();\n\n      if (!result.success) {\n        throw result.error || new Error('Website creation transaction failed');\n      }\n\n      this.logger.info('Website created successfully', { websiteName, path: newWebsitePath });\n      return newWebsitePath;\n    } catch (error) {\n      this.logger.error('Website creation failed', error as Error, { websiteName });\n\n      // Clean up the entire website directory if it was created\n      if (await this.exists(newWebsitePath)) {\n        try {\n          await this.fileSystem.rmdir(newWebsitePath, { recursive: true });\n        } catch (cleanupError) {\n          this.logger.error('Failed to cleanup website directory after error', cleanupError as Error);\n        }\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Find the template source path from possible locations.\n   */\n  private async findTemplateSourcePath(): Promise<string | null> {\n    const possiblePaths = [\n      path.join(__dirname, '..', '..', 'node_modules', '@dwk', 'anglesite-starter'),\n      path.join(process.cwd(), 'node_modules', '@dwk', 'anglesite-starter'),\n      // For development, also check the local path\n      path.join(__dirname, '..', '..', '..', '..', 'anglesite-starter'),\n    ];\n\n    for (const starterPath of possiblePaths) {\n      if (await this.exists(starterPath)) {\n        this.logger.debug('Found template source', { path: starterPath });\n        return starterPath;\n      }\n    }\n\n    this.logger.warn('Template source path not found in any expected location');\n    return null;\n  }\n\n  /**\n   * Customize the index.md content with website name.\n   */\n  private async customizeIndexContent(websiteName: string, indexPath: string): Promise<string> {\n    let indexContent = (await this.fileSystem.readFile(indexPath, 'utf8')) as string;\n\n    // Replace the title in frontmatter\n    indexContent = indexContent.replace(/title: Hello World!/, `title: Welcome to ${websiteName}!`);\n\n    // Replace the main content line\n    indexContent = indexContent.replace(\n      'This is your new website! Edit this file to get started.',\n      `Welcome to ${websiteName}! This is your new Anglesite-powered website.`\n    );\n\n    // Add a personalized welcome section\n    const welcomeSection = `\n\n## About ${websiteName}\n\nYour new website is ready to go! ${websiteName} is powered by Anglesite and uses Eleventy for static site generation.\n\n### Quick Tips\n\n- This site was created from the Anglesite starter template\n- All your content is stored locally on your computer  \n- Changes are automatically detected and rebuilt\n- You can preview your site instantly in the Anglesite app\n\n## Getting Started\n\n- Edit this markdown file to change the content\n- Add more pages by creating new .md files\n- Customize the layout in the _includes directory\n- Add styles to style.css\n\nHappy building! 🚀`;\n\n    // Replace the existing getting started section\n    indexContent = indexContent.replace(/## Getting Started[\\s\\S]*Happy building! 🚀/, welcomeSection.trim());\n\n    return indexContent;\n  }\n\n  /**\n   * Sanitize website name for package.json (follows npm naming conventions).\n   */\n  private sanitizePackageName(websiteName: string): string {\n    return websiteName\n      .toLowerCase()\n      .replace(/[^a-z0-9-]/g, '-') // Replace non-alphanumeric chars with dashes\n      .replace(/^-+|-+$/g, '') // Remove leading/trailing dashes\n      .replace(/-+/g, '-'); // Collapse multiple dashes\n  }\n\n  /**\n   * Customize the package.json content with website name and dependencies.\n   */\n  private async customizePackageJson(websiteName: string, packageJsonPath: string): Promise<string> {\n    const packageJsonContent = (await this.fileSystem.readFile(packageJsonPath, 'utf8')) as string;\n    const packageJson = JSON.parse(packageJsonContent);\n\n    // Sanitize website name for package.json (npm naming conventions)\n    const sanitizedName = this.sanitizePackageName(websiteName);\n\n    packageJson.name = sanitizedName;\n\n    // Set up local file path dependencies for development\n    if (packageJson.dependencies) {\n      // Use file paths to local packages since they're not published to npm yet\n      if (packageJson.dependencies['@dwk/anglesite-11ty']) {\n        // Use absolute path to anglesite-11ty package\n        // Navigate from dist/app/utils to the workspace root\n        const workspaceRoot = path.resolve(__dirname, '../../../../');\n        const anglesitePackagePath = path.join(workspaceRoot, 'anglesite-11ty');\n        packageJson.dependencies['@dwk/anglesite-11ty'] = `file:${anglesitePackagePath}`;\n      }\n      if (packageJson.dependencies['@dwk/web-components']) {\n        // Use absolute path to web-components package\n        // Navigate from dist/app/utils to the workspace root\n        const workspaceRoot = path.resolve(__dirname, '../../../../');\n        const webComponentsPackagePath = path.join(workspaceRoot, 'web-components');\n        packageJson.dependencies['@dwk/web-components'] = `file:${webComponentsPackagePath}`;\n      }\n    }\n\n    return JSON.stringify(packageJson, null, 2);\n  }\n\n  /**\n   * Run npm install in the website directory.\n   */\n  private async runNpmInstall(websitePath: string): Promise<void> {\n    this.logger.info('Running npm install', { websitePath });\n\n    return new Promise<void>((resolve, reject) => {\n      const npmInstall = spawn('npm', ['install'], {\n        cwd: websitePath,\n        stdio: 'pipe',\n      });\n\n      npmInstall.on('close', (code) => {\n        if (code === 0) {\n          this.logger.debug('npm install completed successfully');\n          resolve();\n        } else {\n          const error = new Error(`npm install failed with code ${code}`);\n          this.logger.error('npm install failed', error);\n          reject(error);\n        }\n      });\n\n      npmInstall.on('error', (error) => {\n        this.logger.error('npm install process error', error);\n        reject(error);\n      });\n    });\n  }\n\n  /**\n   * Checks if a website name is valid according to naming rules and character restrictions.\n   */\n  validateWebsiteName(name: string): {\n    valid: boolean;\n    error?: string;\n  } {\n    if (!name || name.trim().length === 0) {\n      return { valid: false, error: 'Website name cannot be empty' };\n    }\n\n    // SECURITY: Prevent path traversal attacks\n    // Check for directory traversal patterns before other validation\n    if (name.includes('..')) {\n      return {\n        valid: false,\n        error: 'Website name cannot contain directory traversal patterns (..)',\n      };\n    }\n\n    // Additional path traversal security check using path resolution\n    const websitesDir = this.getWebsitesDirectory();\n    const resolvedPath = path.resolve(websitesDir, name);\n    const expectedPath = path.join(websitesDir, name);\n\n    // Ensure the resolved path is exactly what we expect (no traversal occurred)\n    if (resolvedPath !== expectedPath) {\n      return {\n        valid: false,\n        error: 'Website name contains invalid path characters that could access parent directories',\n      };\n    }\n\n    // Ensure the resolved path is within the websites directory\n    if (!resolvedPath.startsWith(websitesDir + path.sep) && resolvedPath !== websitesDir) {\n      return {\n        valid: false,\n        error: 'Website name would create a path outside the allowed directory',\n      };\n    }\n\n    // Forbidden characters that are invalid in filesystem folder names across platforms\n    // Windows: < > : \" | ? * \\ /\n    // Unix/macOS: / (and \\0 null character)\n    // Also avoid leading/trailing dots and spaces for consistency\n    // eslint-disable-next-line no-control-regex\n    const forbiddenChars = /[<>:\"|?*\\\\/\\x00]/;\n\n    if (forbiddenChars.test(name)) {\n      return {\n        valid: false,\n        error: 'Website name cannot contain: < > : \" | ? * \\\\ / or null characters',\n      };\n    }\n\n    // Check for leading/trailing spaces or dots (problematic on Windows)\n    if (name !== name.trim()) {\n      return {\n        valid: false,\n        error: 'Website name cannot start or end with spaces',\n      };\n    }\n\n    if (name.startsWith('.') || name.endsWith('.')) {\n      return {\n        valid: false,\n        error: 'Website name cannot start or end with dots',\n      };\n    }\n\n    // Check for reserved names on Windows (CON, PRN, AUX, NUL, COM1-9, LPT1-9)\n    const reservedNames = /^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])$/i;\n    if (reservedNames.test(name)) {\n      return {\n        valid: false,\n        error: 'Website name cannot be a reserved system name (CON, PRN, AUX, NUL, COM1-9, LPT1-9)',\n      };\n    }\n\n    // Check reasonable length (filesystem dependent but 255 is common max)\n    if (name.length > 100) {\n      return {\n        valid: false,\n        error: 'Website name must be 100 characters or less',\n      };\n    }\n\n    return { valid: true };\n  }\n\n  /**\n   * Async version of validateWebsiteName that also checks for duplicates.\n   * This should be used for website creation validation.\n   */\n  async validateWebsiteNameAsync(name: string): Promise<{\n    valid: boolean;\n    error?: string;\n  }> {\n    // First run the basic validation\n    const basicValidation = this.validateWebsiteName(name);\n    if (!basicValidation.valid) {\n      return basicValidation;\n    }\n\n    // Check if website already exists\n    const websitesDir = this.getWebsitesDirectory();\n    const websitePath = path.join(websitesDir, name);\n\n    if (await this.exists(websitePath)) {\n      return {\n        valid: false,\n        error: `Website \"${name}\" already exists. Please choose a different name.`,\n      };\n    }\n\n    return { valid: true };\n  }\n\n  /**\n   * List all existing websites.\n   */\n  async listWebsites(): Promise<string[]> {\n    const websitesDir = this.getWebsitesDirectory();\n\n    if (!(await this.exists(websitesDir))) {\n      return [];\n    }\n\n    try {\n      const entries = await this.fileSystem.readdir(websitesDir);\n      const directories: string[] = [];\n\n      // Filter for directories using stat\n      for (const entry of entries) {\n        try {\n          const entryPath = path.join(websitesDir, entry);\n          const stats = await this.fileSystem.stat(entryPath);\n          if (stats.isDirectory()) {\n            directories.push(entry);\n          }\n        } catch (error) {\n          // Skip entries we can't stat\n          this.logger.warn('Failed to stat directory entry', { entry, error });\n        }\n      }\n\n      return directories;\n    } catch (error) {\n      this.logger.error('Failed to list websites', error as Error);\n      return [];\n    }\n  }\n\n  /**\n   * Delete a website with confirmation dialog.\n   */\n  async deleteWebsite(websiteName: string, parentWindow?: BrowserWindow): Promise<boolean> {\n    this.logger.info('Attempting to delete website', { websiteName });\n\n    const websitesDir = this.getWebsitesDirectory();\n    const websitePath = path.join(websitesDir, websiteName);\n\n    if (!(await this.exists(websitePath))) {\n      throw new Error(`Website \"${websiteName}\" does not exist`);\n    }\n\n    const dialogOptions = {\n      type: 'warning' as const,\n      title: 'Delete Website',\n      message: `Are you sure you want to delete \"${websiteName}\"?`,\n      detail: 'This action cannot be undone.',\n      buttons: ['Cancel', 'Delete'],\n      defaultId: 0,\n      cancelId: 0,\n    };\n\n    // Use the parent window if provided for proper modal behavior\n    const result = parentWindow\n      ? dialog.showMessageBoxSync(parentWindow, dialogOptions)\n      : dialog.showMessageBoxSync(dialogOptions);\n\n    if (result === 1) {\n      try {\n        await this.fileSystem.rmdir(websitePath, { recursive: true });\n        this.logger.info('Website deleted successfully', { websiteName });\n        return true;\n      } catch (error) {\n        this.logger.error('Failed to delete website', error as Error, { websiteName });\n        throw error;\n      }\n    }\n\n    this.logger.debug('Website deletion cancelled by user', { websiteName });\n    return false;\n  }\n\n  /**\n   * Constructs the full file system path for a website given its name.\n   */\n  getWebsitePath(websiteName: string): string {\n    return path.join(this.getWebsitesDirectory(), websiteName);\n  }\n\n  /**\n   * Rename a website using atomic operations.\n   *\n   * This function ensures data integrity during the rename operation:\n   * - Validates new name before any changes\n   * - Creates backup of target if it exists.\n   * - Validates successful rename\n   * - Automatic rollback on failure\n   * - Updates internal references (package.json name).\n   */\n  async renameWebsite(oldName: string, newName: string): Promise<boolean> {\n    this.logger.info('Renaming website', { oldName, newName });\n\n    // Validate the new name\n    const validation = this.validateWebsiteName(newName);\n    if (!validation.valid) {\n      throw new Error(validation.error || 'Invalid website name');\n    }\n\n    const websitesDir = this.getWebsitesDirectory();\n    const oldPath = path.join(websitesDir, oldName);\n    const newPath = path.join(websitesDir, newName);\n\n    // Pre-validation checks\n    if (!(await this.exists(oldPath))) {\n      throw new Error(`Website \"${oldName}\" does not exist`);\n    }\n\n    if (await this.exists(newPath)) {\n      throw new Error(`Website \"${newName}\" already exists`);\n    }\n\n    // Create atomic transaction for website rename\n    const transaction = createAtomicTransaction();\n\n    try {\n      // Step 1: Atomically rename the directory\n      transaction.addOperation(\n        async () => {\n          const renameResult = await atomicRename(oldPath, newPath, {\n            validate: async (dirPath) => {\n              // Validate that the renamed directory has expected structure\n              const srcPath = path.join(dirPath, 'src');\n              const packageJsonPath = path.join(dirPath, 'package.json');\n              return (await this.exists(srcPath)) && (await this.exists(packageJsonPath));\n            },\n          });\n\n          if (!renameResult.success) {\n            throw renameResult.error || new Error('Failed to rename website directory');\n          }\n        },\n        async () => {\n          // Rollback: rename back to original if it exists\n          if (await this.exists(newPath)) {\n            try {\n              await this.fileSystem.rename(newPath, oldPath);\n            } catch (error) {\n              this.logger.error('Failed to rollback directory rename', error as Error);\n            }\n          }\n        }\n      );\n\n      // Step 2: Update package.json with new website name\n      const packageJsonPath = path.join(newPath, 'package.json');\n      if (await this.exists(packageJsonPath)) {\n        transaction.addOperation(\n          async () => {\n            const packageJsonContent = (await this.fileSystem.readFile(packageJsonPath, 'utf8')) as string;\n            const packageJson = JSON.parse(packageJsonContent);\n            packageJson.name = this.sanitizePackageName(newName);\n\n            const writeResult = await atomicWriteFile(packageJsonPath, JSON.stringify(packageJson, null, 2), {\n              validate: (content) => {\n                try {\n                  const parsed = JSON.parse(content);\n                  return parsed.name === this.sanitizePackageName(newName);\n                } catch {\n                  return false;\n                }\n              },\n              backup: true,\n            });\n\n            if (!writeResult.success) {\n              throw writeResult.error || new Error('Failed to update package.json with new name');\n            }\n          },\n          async () => {\n            // Rollback: restore original package.json\n            const backupPath = `${packageJsonPath}.backup.${Date.now()}`;\n            if (await this.exists(backupPath)) {\n              try {\n                await this.fileSystem.rename(backupPath, packageJsonPath);\n              } catch (error) {\n                this.logger.error('Failed to restore package.json backup', error as Error);\n              }\n            }\n          }\n        );\n      }\n\n      // Step 3: Update any internal file references to the old website name\n      transaction.addOperation(\n        async () => {\n          await this.updateInternalReferences(newPath, oldName, newName);\n        },\n        async () => {\n          // Rollback: restore original references\n          try {\n            await this.updateInternalReferences(newPath, newName, oldName);\n          } catch (error) {\n            this.logger.error('Failed to rollback internal references', error as Error);\n          }\n        }\n      );\n\n      // Execute the transaction\n      const result = await transaction.execute();\n\n      if (!result.success) {\n        throw result.error || new Error('Website rename transaction failed');\n      }\n\n      this.logger.info('Website renamed successfully', { oldName, newName });\n      return true;\n    } catch (error) {\n      this.logger.error('Failed to rename website', error as Error, { oldName, newName });\n      throw error;\n    }\n  }\n\n  /**\n   * Update internal references to website name in files.\n   */\n  private async updateInternalReferences(websitePath: string, oldName: string, newName: string): Promise<void> {\n    // Update title in index.md if it contains the old name\n    const indexPath = path.join(websitePath, 'src', 'index.md');\n    if (await this.exists(indexPath)) {\n      const content = (await this.fileSystem.readFile(indexPath, 'utf8')) as string;\n      if (content.includes(oldName)) {\n        const updatedContent = content\n          .replace(new RegExp(`Welcome to ${oldName}!`, 'g'), `Welcome to ${newName}!`)\n          .replace(new RegExp(`About ${oldName}`, 'g'), `About ${newName}`)\n          .replace(new RegExp(`${oldName} is powered by`, 'g'), `${newName} is powered by`);\n\n        if (updatedContent !== content) {\n          const writeResult = await atomicWriteFile(indexPath, updatedContent, { backup: true });\n          if (!writeResult.success) {\n            throw writeResult.error || new Error('Failed to update index.md references');\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if a website exists.\n   */\n  async websiteExists(websiteName: string): Promise<boolean> {\n    const websitePath = this.getWebsitePath(websiteName);\n    return await this.exists(websitePath);\n  }\n\n  /**\n   * Dispose of the website manager service.\n   */\n  async dispose(): Promise<void> {\n    this.logger.debug('Disposing WebsiteManager service');\n    // No cleanup needed for this service currently\n  }\n}\n\n/**\n * Factory function for creating WebsiteManager with proper dependencies.\n */\nexport function createWebsiteManager(\n  logger: ILogger,\n  fileSystem: IFileSystem,\n  atomicOperations: IAtomicOperations\n): IWebsiteManager {\n  return WebsiteManager.create(logger, fileSystem, atomicOperations);\n}\n\n/**\n * Type guard to check if an object is a website manager.\n */\nexport function isWebsiteManager(obj: unknown): obj is WebsiteManager {\n  return (\n    obj !== null &&\n    typeof obj === 'object' &&\n    typeof (obj as WebsiteManager).createWebsite === 'function' &&\n    typeof (obj as WebsiteManager).deleteWebsite === 'function' &&\n    typeof (obj as WebsiteManager).listWebsites === 'function' &&\n    typeof (obj as WebsiteManager).validateWebsiteName === 'function' &&\n    typeof (obj as WebsiteManager).dispose === 'function'\n  );\n}\n\n// Legacy exports for backward compatibility during transition period\n// These should be removed once all consumers are updated to use DI\n\n/**\n * @deprecated Use WebsiteManager service through DI container instead\n * This is kept as a fallback for when DI is not yet initialized.\n */\nexport async function createWebsiteWithName(websiteName: string): Promise<string> {\n  console.warn('Using deprecated createWebsiteWithName - DI not available');\n  // Create a temporary instance for fallback\n  const logger = {\n    debug: () => {},\n    info: () => {},\n    warn: console.warn,\n    error: console.error,\n    child: () => logger,\n  } as any; // eslint-disable-line @typescript-eslint/no-explicit-any\n  const fileSystem = new FileSystemService();\n  const atomicOps = createStubAtomicOperations(fileSystem);\n  const manager = new WebsiteManager(logger, fileSystem, atomicOps);\n  return manager.createWebsite(websiteName);\n}\n\n/**\n * @deprecated Use WebsiteManager service through DI container instead\n * This is kept as a fallback for when DI is not yet initialized.\n */\nexport function validateWebsiteName(name: string): { valid: boolean; error?: string } {\n  console.warn('Using deprecated validateWebsiteName - DI not available');\n  // Create a temporary instance for fallback\n  const logger = {\n    debug: () => {},\n    info: () => {},\n    warn: console.warn,\n    error: console.error,\n    child: () => logger,\n  } as any; // eslint-disable-line @typescript-eslint/no-explicit-any\n  const fileSystem = new FileSystemService();\n  const atomicOps = createStubAtomicOperations(fileSystem);\n  const manager = new WebsiteManager(logger, fileSystem, atomicOps);\n  return manager.validateWebsiteName(name);\n}\n\n/**\n * @deprecated Use WebsiteManager service through DI container instead\n * This is kept as a fallback for when DI is not yet initialized.\n */\nexport async function validateWebsiteNameAsync(name: string): Promise<{ valid: boolean; error?: string }> {\n  console.warn('Using deprecated validateWebsiteNameAsync - DI not available');\n  // Create a temporary instance for fallback\n  const logger = {\n    debug: () => {},\n    info: () => {},\n    warn: console.warn,\n    error: console.error,\n    child: () => logger,\n  } as any; // eslint-disable-line @typescript-eslint/no-explicit-any\n  const fileSystem = new FileSystemService();\n  const atomicOps = createStubAtomicOperations(fileSystem);\n  const manager = new WebsiteManager(logger, fileSystem, atomicOps);\n  return manager.validateWebsiteNameAsync(name);\n}\n\n/**\n * @deprecated Use WebsiteManager service through DI container instead\n * This is kept as a fallback for when DI is not yet initialized.\n */\nexport async function listWebsites(): Promise<string[]> {\n  console.warn('Using deprecated listWebsites - DI not available');\n  // Create a temporary instance for fallback\n  const logger = {\n    debug: () => {},\n    info: () => {},\n    warn: console.warn,\n    error: console.error,\n    child: () => logger,\n  } as any; // eslint-disable-line @typescript-eslint/no-explicit-any\n  const fileSystem = new FileSystemService();\n  const atomicOps = createStubAtomicOperations(fileSystem);\n  const manager = new WebsiteManager(logger, fileSystem, atomicOps);\n  return manager.listWebsites();\n}\n\n/**\n * @deprecated Use WebsiteManager service through DI container instead\n * This is kept as a fallback for when DI is not yet initialized.\n */\nexport function getWebsitePath(websiteName: string): string {\n  console.warn('Using deprecated getWebsitePath - DI not available');\n  // Create a temporary instance for fallback\n  const logger = {\n    debug: () => {},\n    info: () => {},\n    warn: console.warn,\n    error: console.error,\n    child: () => logger,\n  } as any; // eslint-disable-line @typescript-eslint/no-explicit-any\n  const fileSystem = new FileSystemService();\n  const atomicOps = createStubAtomicOperations(fileSystem);\n  const manager = new WebsiteManager(logger, fileSystem, atomicOps);\n  return manager.getWebsitePath(websiteName);\n}\n\n/**\n * @deprecated Use WebsiteManager service through DI container instead\n * This is kept as a fallback for when DI is not yet initialized.\n */\nexport async function renameWebsite(oldName: string, newName: string): Promise<boolean> {\n  console.warn('Using deprecated renameWebsite - DI not available');\n  // Create a temporary instance for fallback\n  const logger = {\n    debug: () => {},\n    info: () => {},\n    warn: console.warn,\n    error: console.error,\n    child: () => logger,\n  } as any; // eslint-disable-line @typescript-eslint/no-explicit-any\n  const fileSystem = new FileSystemService();\n  const atomicOps = createStubAtomicOperations(fileSystem);\n  const manager = new WebsiteManager(logger, fileSystem, atomicOps);\n  return manager.renameWebsite(oldName, newName);\n}\n\n/**\n * @deprecated Use WebsiteManager service through DI container instead\n * This is kept as a fallback for when DI is not yet initialized.\n */\nexport async function deleteWebsite(websiteName: string): Promise<boolean> {\n  console.warn('Using deprecated deleteWebsite - DI not available');\n  // Create a temporary instance for fallback\n  const logger = {\n    debug: () => {},\n    info: () => {},\n    warn: console.warn,\n    error: console.error,\n    child: () => logger,\n  } as any; // eslint-disable-line @typescript-eslint/no-explicit-any\n  const fileSystem = new FileSystemService();\n  const atomicOps = createStubAtomicOperations(fileSystem);\n  const manager = new WebsiteManager(logger, fileSystem, atomicOps);\n  return manager.deleteWebsite(websiteName);\n}\n"],"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","ignoreList":[]}