ea9d675489a100d83c009993785b5df0
"use strict";
/**
 * @file Development webpack configuration for Anglesite
 * @description Optimized for fast rebuilds, hot module replacement, and debugging experience.
 * Merges with common configuration and adds development-specific settings like dev server,
 * React Fast Refresh, and unoptimized source maps for better debugging.
 * @author David W. Keith <git@dwk.io>
 * @since 0.1.0
 */
const path = require('path');
const { merge } = require('webpack-merge');
const ReactRefreshWebpackPlugin = require('@pmmmwh/react-refresh-webpack-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const common = require('./webpack.common.js');
const ASSET_CONFIG = require('./assets.config');
/**
 * Development webpack configuration
 * @type {import('webpack').Configuration}
 */
module.exports = merge(common, {
    /** Development mode for faster builds and better debugging */
    mode: 'development',
    /**
     * Development output configuration
     * Uses simple filenames without hashes for faster rebuilds
     */
    output: {
        path: path.resolve(__dirname, 'dist/app/ui/react'),
        filename: ASSET_CONFIG.output.naming.development.js,
        chunkFilename: '[name].chunk.js',
        publicPath: ASSET_CONFIG.output.publicPath.development,
        clean: ASSET_CONFIG.output.clean,
        assetModuleFilename: 'assets/[name][ext]',
    },
    /** Development-specific module rules */
    module: {
        rules: [
            /**
             * TypeScript/React files with React Fast Refresh support
             * Enables hot reloading of React components without losing state
             */
            {
                test: /\.tsx?$/,
                exclude: /node_modules/,
                use: [
                    {
                        loader: 'ts-loader',
                        options: {
                            transpileOnly: true,
                            configFile: path.resolve(__dirname, 'app/ui/react/tsconfig.json'),
                            compilerOptions: {
                                sourceMap: ASSET_CONFIG.sourceMaps.development.loaders,
                            },
                            getCustomTransformers: () => ({
                                before: [require('react-refresh/babel').transform].filter(Boolean),
                            }),
                        },
                    },
                ],
            },
            /**
             * CSS files with style-loader for hot module replacement
             * Injects CSS directly into the DOM for faster development feedback
             */
            {
                test: /\.css$/,
                use: [
                    'style-loader',
                    {
                        loader: 'css-loader',
                        options: {
                            importLoaders: 2,
                            sourceMap: ASSET_CONFIG.sourceMaps.development.css,
                        },
                    },
                    {
                        loader: 'postcss-loader',
                        options: {
                            sourceMap: ASSET_CONFIG.sourceMaps.development.css,
                        },
                    },
                ],
            },
            /**
             * Responsive images with Sharp adapter
             * Generates multiple image sizes for different screen densities
             */
            {
                test: /\.(png|jpg|jpeg)$/i,
                use: [
                    {
                        loader: 'responsive-loader',
                        options: {
                            adapter: require('responsive-loader/sharp'),
                            sizes: ASSET_CONFIG.images.breakpoints,
                            placeholder: true,
                            placeholderSize: 40,
                            quality: ASSET_CONFIG.images.quality.jpeg,
                            format: 'jpg',
                        },
                    },
                ],
                type: 'javascript/auto',
            },
            /**
             * Static images (SVG, GIF, ICO) with development naming
             * Uses simple filenames for easier debugging
             */
            {
                test: /\.(svg|gif|ico)$/i,
                generator: {
                    filename: ASSET_CONFIG.output.naming.development.images,
                },
            },
            /**
             * Font files with development naming
             * Simple names for faster rebuilds and debugging
             */
            {
                test: /\.(woff|woff2|eot|ttf|otf)$/i,
                generator: {
                    filename: ASSET_CONFIG.output.naming.development.fonts,
                },
            },
        ],
    },
    /** Development-specific plugins */
    plugins: [
        /**
         * HTML template plugin for development
         * Uses HMR-enabled template with unminified output for debugging
         */
        new HtmlWebpackPlugin({
            template: path.resolve(__dirname, 'app/ui/templates/website-editor-react-hmr.html'),
            filename: 'index.html',
            inject: 'body',
            minify: false,
        }),
        /**
         * React Fast Refresh plugin for hot reloading
         * Preserves component state during development
         */
        new ReactRefreshWebpackPlugin({
            overlay: {
                sockIntegration: 'whm',
            },
        }),
    ],
    /**
     * Webpack Dev Server configuration for development
     * Optimized for Electron development with HMR and proxy support
     */
    devServer: {
        /** Development server port */
        port: 3000,
        /** Bind to localhost for security */
        host: '127.0.0.1',
        /** Enable hot module replacement */
        hot: true,
        /** Enable live reloading as fallback */
        liveReload: true,
        /** Enable gzip compression */
        compress: true,
        /** Don't auto-open browser since this is for Electron */
        open: false,
        /** Static file serving configuration from assets config */
        static: ASSET_CONFIG.devServer.static,
        /** CORS headers for development */
        headers: ASSET_CONFIG.devServer.headers,
        /** Client-side dev server configuration */
        client: {
            /** Console logging level */
            logging: 'info',
            /** Show build progress */
            progress: true,
            /** Error overlay configuration */
            overlay: {
                errors: true,
                warnings: false,
                runtimeErrors: true,
            },
            /** WebSocket URL for HMR connection */
            webSocketURL: {
                hostname: '127.0.0.1',
                pathname: '/ws',
                port: 3000,
                protocol: 'ws',
            },
        },
        /** Development middleware configuration */
        devMiddleware: {
            stats: 'minimal',
            writeToDisk: false,
        },
        /**
         * Proxy configuration for backend services
         * Routes API and Eleventy requests to local backend
         */
        proxy: [
            {
                context: ['/api', '/eleventy'],
                target: 'http://127.0.0.1:8080',
                changeOrigin: true,
                secure: false,
                logLevel: 'debug',
                onProxyReq: (proxyReq, req, res) => {
                    console.log(`[Proxy] ${req.method} ${req.url} -> ${proxyReq.path}`);
                },
                onError: (err, req, res) => {
                    console.error('[Proxy Error]', err.message);
                },
            },
        ],
        /**
         * File watching configuration for hot reloading
         * Watches template and React files for changes
         */
        watchFiles: {
            paths: ['app/**/*', 'app/ui/templates/**/*.html', 'app/ui/react/**/*'],
            options: {
                usePolling: false,
                interval: 1000,
                ignored: /node_modules/,
            },
        },
        /**
         * History API fallback for SPA routing
         * Serves index.html for client-side routes
         */
        historyApiFallback: {
            index: '/index.html',
            disableDotRule: true,
        },
    },
    /**
     * Source maps for development debugging
     * Uses fast eval-based source maps for quick rebuilds
     */
    devtool: ASSET_CONFIG.sourceMaps.development.devtool,
    /**
     * Performance hints disabled for development
     * Large bundles are acceptable during development
     */
    performance: {
        hints: false,
    },
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,