{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/server/eleventy-url-resolver.test.ts","mappings":"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","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/server/eleventy-url-resolver.test.ts"],"sourcesContent":["/**\n * @file Tests for Eleventy URL resolver functionality\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { glob } from 'glob';\nimport * as chokidar from 'chokidar';\nimport { EleventyUrlResolver } from '../../app/server/eleventy-url-resolver';\n\n// Mock dependencies\njest.mock('fs');\njest.mock('path');\njest.mock('glob');\njest.mock('chokidar');\n\n// Create typed mocks\nconst mockFs = fs as jest.Mocked<typeof fs>;\nconst mockPath = path as jest.Mocked<typeof path>;\nconst mockGlob = glob as jest.MockedFunction<typeof glob>;\nconst mockChokidar = chokidar as jest.Mocked<typeof chokidar>;\n\ndescribe('EleventyUrlResolver', () => {\n  let resolver: EleventyUrlResolver;\n  let mockWatcher: jest.Mocked<chokidar.FSWatcher>;\n  let consoleLogSpy: jest.SpyInstance;\n  let consoleErrorSpy: jest.SpyInstance;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Setup console spies\n    consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();\n    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n\n    // Setup path mocks\n    mockPath.resolve.mockImplementation((p) => `/resolved/${p}`);\n    mockPath.relative.mockImplementation((from, to) => {\n      // Simple mock implementation for testing\n      const fromParts = from.split('/');\n      const toParts = to.split('/');\n      return toParts.slice(fromParts.length).join('/');\n    });\n    mockPath.extname.mockImplementation((filePath) => {\n      const parts = filePath.split('.');\n      return parts.length > 1 ? `.${parts[parts.length - 1]}` : '';\n    });\n    mockPath.join.mockImplementation((...parts) => parts.join('/'));\n\n    // Setup fs mocks\n    mockFs.existsSync.mockReturnValue(true);\n    mockFs.readdirSync.mockReturnValue([]);\n    mockFs.statSync.mockReturnValue({ isDirectory: () => false } as fs.Stats);\n\n    // Setup chokidar mock\n    mockWatcher = {\n      on: jest.fn().mockReturnThis(),\n      close: jest.fn(),\n      add: jest.fn(),\n      unwatch: jest.fn(),\n      getWatched: jest.fn(),\n      ref: jest.fn(),\n      unref: jest.fn(),\n      options: {},\n      eventNames: jest.fn(),\n      listenerCount: jest.fn(),\n      listeners: jest.fn(),\n      off: jest.fn(),\n      prependListener: jest.fn(),\n      prependOnceListener: jest.fn(),\n      rawListeners: jest.fn(),\n      removeAllListeners: jest.fn(),\n      removeListener: jest.fn(),\n      setMaxListeners: jest.fn(),\n      getMaxListeners: jest.fn(),\n      emit: jest.fn(),\n      once: jest.fn(),\n      addListener: jest.fn(),\n    } as unknown as jest.Mocked<chokidar.FSWatcher>;\n    mockChokidar.watch.mockReturnValue(mockWatcher);\n\n    // Setup glob mock\n    mockGlob.mockResolvedValue([]);\n\n    resolver = new EleventyUrlResolver('/test/input');\n  });\n\n  afterEach(() => {\n    consoleLogSpy.mockRestore();\n    consoleErrorSpy.mockRestore();\n    resolver.destroy();\n  });\n\n  describe('constructor', () => {\n    it('should resolve and store input directory', () => {\n      expect(mockPath.resolve).toHaveBeenCalledWith('/test/input');\n    });\n  });\n\n  describe('initialize', () => {\n    it('should initialize URL resolver successfully', async () => {\n      mockGlob.mockResolvedValue(['/test/input/page1.md', '/test/input/page2.html']);\n\n      await resolver.initialize();\n\n      expect(consoleLogSpy).toHaveBeenCalledWith('Initializing URL resolver for directory: /resolved//test/input');\n      expect(consoleLogSpy).toHaveBeenCalledWith('URL resolver initialization complete for /resolved//test/input');\n      expect(mockGlob).toHaveBeenCalled();\n      expect(mockChokidar.watch).toHaveBeenCalled();\n    });\n\n    it('should handle initialization errors', async () => {\n      const error = new Error('Initialization failed');\n      mockGlob.mockRejectedValue(error);\n\n      await resolver.initialize();\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith('Error building URL map:', error);\n    });\n  });\n\n  describe('destroy', () => {\n    it('should close watcher if it exists', () => {\n      resolver['watcher'] = mockWatcher;\n\n      resolver.destroy();\n\n      expect(mockWatcher.close).toHaveBeenCalled();\n      expect(resolver['watcher']).toBeNull();\n    });\n\n    it('should handle null watcher gracefully', () => {\n      resolver['watcher'] = null;\n\n      expect(() => resolver.destroy()).not.toThrow();\n    });\n  });\n\n  describe('buildUrlMap', () => {\n    it('should build URL map for content files', async () => {\n      const testFiles = ['/test/input/index.md', '/test/input/about.html', '/test/input/blog/post1.md'];\n      mockGlob.mockResolvedValue(testFiles);\n\n      await resolver['buildUrlMap']();\n\n      expect(mockGlob).toHaveBeenCalledWith(\n        expect.arrayContaining([\n          '**/*.md',\n          '**/*.html',\n          '**/*.njk',\n          '**/*.liquid',\n          '**/*.hbs',\n          '**/*.mustache',\n          '**/*.ejs',\n          '**/*.haml',\n          '**/*.pug',\n          '**/*.jstl',\n        ]),\n        {\n          cwd: '/resolved//test/input',\n          ignore: ['node_modules/**', '_site/**', '.git/**'],\n          absolute: true,\n        }\n      );\n\n      expect(consoleLogSpy).toHaveBeenCalledWith('Built URL map for 3 files in /resolved//test/input');\n    });\n\n    it('should handle glob errors', async () => {\n      const error = new Error('Glob failed');\n      mockGlob.mockRejectedValue(error);\n\n      await resolver['buildUrlMap']();\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith('Error building URL map:', error);\n    });\n  });\n\n  describe('setupWatcher', () => {\n    it('should setup file watcher with correct options', () => {\n      resolver['setupWatcher']();\n\n      expect(mockChokidar.watch).toHaveBeenCalledWith('/resolved//test/input', {\n        ignored: [/node_modules/, /_site/, /\\.git/, /\\.DS_Store/],\n        persistent: true,\n        ignoreInitial: true,\n      });\n\n      expect(mockWatcher.on).toHaveBeenCalledWith('add', expect.any(Function));\n      expect(mockWatcher.on).toHaveBeenCalledWith('unlink', expect.any(Function));\n      expect(mockWatcher.on).toHaveBeenCalledWith('change', expect.any(Function));\n    });\n\n    it('should handle file additions for content files', () => {\n      resolver['setupWatcher']();\n\n      // Get the 'add' callback\n      const addCallback = mockWatcher.on.mock.calls.find((call) => call[0] === 'add')?.[1];\n      expect(addCallback).toBeDefined();\n\n      // Mock isContentFile to return true\n      jest.spyOn(resolver as unknown as { isContentFile: () => boolean }, 'isContentFile').mockReturnValue(true);\n      jest\n        .spyOn(resolver as unknown as { calculateEleventyUrl: () => string }, 'calculateEleventyUrl')\n        .mockReturnValue('/test-url');\n\n      addCallback?.('/test/file.md');\n\n      expect(consoleLogSpy).toHaveBeenCalledWith('Added URL mapping: /test/file.md → /test-url');\n    });\n\n    it('should ignore non-content files on addition', () => {\n      resolver['setupWatcher']();\n\n      const addCallback = mockWatcher.on.mock.calls.find((call) => call[0] === 'add')?.[1];\n      jest.spyOn(resolver as unknown as { isContentFile: () => boolean }, 'isContentFile').mockReturnValue(false);\n\n      addCallback?.('/test/file.css');\n\n      expect(consoleLogSpy).not.toHaveBeenCalledWith(expect.stringContaining('Added URL mapping'));\n    });\n\n    it('should handle file deletions', () => {\n      resolver['setupWatcher']();\n\n      // Add a file to the URL map first\n      resolver['urlMap'].set('/test/file.md', '/test-url');\n\n      const unlinkCallback = mockWatcher.on.mock.calls.find((call) => call[0] === 'unlink')?.[1];\n      unlinkCallback?.('/test/file.md');\n\n      expect(consoleLogSpy).toHaveBeenCalledWith('Removed URL mapping: /test/file.md');\n      expect(resolver['urlMap'].has('/test/file.md')).toBe(false);\n    });\n\n    it('should ignore deletion of unmapped files', () => {\n      resolver['setupWatcher']();\n\n      const unlinkCallback = mockWatcher.on.mock.calls.find((call) => call[0] === 'unlink')?.[1];\n      unlinkCallback?.('/unmapped/file.md');\n\n      expect(consoleLogSpy).not.toHaveBeenCalledWith(expect.stringContaining('Removed URL mapping'));\n    });\n\n    it('should handle file changes', () => {\n      resolver['setupWatcher']();\n\n      const changeCallback = mockWatcher.on.mock.calls.find((call) => call[0] === 'change')?.[1];\n\n      // Should not throw\n      expect(() => changeCallback?.('/test/file.md')).not.toThrow();\n    });\n  });\n\n  describe('isContentFile', () => {\n    const testCases = [\n      { file: 'test.md', expected: true },\n      { file: 'test.html', expected: true },\n      { file: 'test.njk', expected: true },\n      { file: 'test.liquid', expected: true },\n      { file: 'test.hbs', expected: true },\n      { file: 'test.mustache', expected: true },\n      { file: 'test.ejs', expected: true },\n      { file: 'test.haml', expected: true },\n      { file: 'test.pug', expected: true },\n      { file: 'test.jstl', expected: true },\n      { file: 'test.css', expected: false },\n      { file: 'test.js', expected: false },\n      { file: 'test.txt', expected: false },\n      { file: 'test', expected: false },\n    ];\n\n    testCases.forEach(({ file, expected }) => {\n      it(`should return ${expected} for ${file}`, () => {\n        const result = resolver['isContentFile'](file);\n        expect(result).toBe(expected);\n      });\n    });\n  });\n\n  describe('calculateEleventyUrl', () => {\n    beforeEach(() => {\n      // Mock path.relative to return the relative path\n      mockPath.relative.mockImplementation((from, to) => {\n        if (to === '/resolved//test/input/index.md') return 'index.md';\n        if (to === '/resolved//test/input/about.html') return 'about.html';\n        if (to === '/resolved//test/input/blog/post.md') return 'blog/post.md';\n        if (to === '/resolved//test/input/styles.css') return 'styles.css';\n        if (to === '/resolved//test/input/blog/index.md') return 'blog/index.md';\n        return 'default.md';\n      });\n    });\n\n    it('should convert markdown files to .html URLs', () => {\n      mockPath.relative.mockReturnValue('about.md');\n      mockPath.extname.mockReturnValue('.md');\n\n      const result = resolver['calculateEleventyUrl']('/resolved//test/input/about.md');\n      expect(result).toBe('/about.html');\n    });\n\n    it('should keep HTML files as .html URLs', () => {\n      const result = resolver['calculateEleventyUrl']('/resolved//test/input/about.html');\n      expect(result).toBe('/about.html');\n    });\n\n    it('should convert template files to .html URLs', () => {\n      const templateExtensions = ['.njk', '.liquid', '.hbs', '.mustache', '.ejs', '.haml', '.pug', '.jstl'];\n\n      templateExtensions.forEach((ext) => {\n        mockPath.relative.mockReturnValue(`test${ext}`);\n        mockPath.extname.mockReturnValue(ext);\n\n        const result = resolver['calculateEleventyUrl'](`/test/input/test${ext}`);\n        expect(result).toBe('/test.html');\n      });\n    });\n\n    it('should handle index.html files specially (root)', () => {\n      mockPath.relative.mockReturnValue('index.html');\n      mockPath.extname.mockReturnValue('.html');\n\n      const result = resolver['calculateEleventyUrl']('/resolved//test/input/index.html');\n      expect(result).toBe('/');\n    });\n\n    it('should handle nested index.html files', () => {\n      mockPath.relative.mockReturnValue('blog/index.html');\n      mockPath.extname.mockReturnValue('.html');\n\n      const result = resolver['calculateEleventyUrl']('/resolved//test/input/blog/index.html');\n      expect(result).toBe('/blog/');\n    });\n\n    it('should handle index.md files specially (root)', () => {\n      mockPath.relative.mockReturnValue('index.md');\n      mockPath.extname.mockReturnValue('.md');\n\n      const result = resolver['calculateEleventyUrl']('/resolved//test/input/index.md');\n      expect(result).toBe('/');\n    });\n\n    it('should handle nested index.md files', () => {\n      mockPath.relative.mockReturnValue('blog/index.md');\n      mockPath.extname.mockReturnValue('.md');\n\n      const result = resolver['calculateEleventyUrl']('/resolved//test/input/blog/index.md');\n      expect(result).toBe('/blog/');\n    });\n\n    it('should preserve asset files as-is', () => {\n      mockPath.relative.mockReturnValue('styles.css');\n      mockPath.extname.mockReturnValue('.css');\n\n      const result = resolver['calculateEleventyUrl']('/resolved//test/input/styles.css');\n      expect(result).toBe('/styles.css');\n    });\n\n    it('should normalize Windows path separators', () => {\n      mockPath.relative.mockReturnValue('blog\\\\post.md');\n      mockPath.extname.mockReturnValue('.md');\n\n      const result = resolver['calculateEleventyUrl']('/resolved//test/input/blog/post.md');\n      expect(result).toBe('/blog/post.html');\n    });\n\n    it('should ensure URLs start with forward slash', () => {\n      mockPath.relative.mockReturnValue('test.md');\n      mockPath.extname.mockReturnValue('.md');\n\n      const result = resolver['calculateEleventyUrl']('/resolved//test/input/test.md');\n      expect(result).toBe('/test.html');\n    });\n  });\n\n  describe('getUrlForFile', () => {\n    it('should return URL for existing file', () => {\n      const filePath = '/test/file.md';\n      const url = '/test.html';\n\n      mockPath.resolve.mockReturnValue('/resolved/test/file.md');\n      resolver['urlMap'].set('/resolved/test/file.md', url);\n\n      const result = resolver.getUrlForFile(filePath);\n      expect(result).toBe(url);\n    });\n\n    it('should return null for non-existing file', () => {\n      const filePath = '/nonexistent/file.md';\n      mockPath.resolve.mockReturnValue('/resolved/nonexistent/file.md');\n\n      const result = resolver.getUrlForFile(filePath);\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('getFileForUrl', () => {\n    it('should return file path for existing URL', () => {\n      const filePath = '/test/file.md';\n      const url = '/test.html';\n\n      resolver['urlMap'].set(filePath, url);\n\n      const result = resolver.getFileForUrl(url);\n      expect(result).toBe(filePath);\n    });\n\n    it('should return null for non-existing URL', () => {\n      const result = resolver.getFileForUrl('/nonexistent.html');\n      expect(result).toBeNull();\n    });\n\n    it('should return first match for duplicate URLs', () => {\n      const filePath1 = '/test/file1.md';\n      const filePath2 = '/test/file2.md';\n      const url = '/test.html';\n\n      resolver['urlMap'].set(filePath1, url);\n      resolver['urlMap'].set(filePath2, url);\n\n      const result = resolver.getFileForUrl(url);\n      expect([filePath1, filePath2]).toContain(result);\n    });\n  });\n\n  describe('getAllMappings', () => {\n    it('should return all file-URL mappings sorted by URL', () => {\n      resolver['urlMap'].set('/test/b.md', '/b.html');\n      resolver['urlMap'].set('/test/a.md', '/a.html');\n      resolver['urlMap'].set('/test/c.md', '/c.html');\n\n      const result = resolver.getAllMappings();\n\n      expect(result).toHaveLength(3);\n      expect(result).toEqual([\n        { filePath: '/test/a.md', url: '/a.html', isDirectory: false },\n        { filePath: '/test/b.md', url: '/b.html', isDirectory: false },\n        { filePath: '/test/c.md', url: '/c.html', isDirectory: false },\n      ]);\n    });\n\n    it('should return empty array when no mappings exist', () => {\n      const result = resolver.getAllMappings();\n      expect(result).toEqual([]);\n    });\n\n    it('should mark all files as non-directories', () => {\n      resolver['urlMap'].set('/test/file.md', '/file.html');\n\n      const result = resolver.getAllMappings();\n      expect(result[0].isDirectory).toBe(false);\n    });\n  });\n\n  describe('getFileTree', () => {\n    it('should build complete file tree successfully', async () => {\n      const mockFiles = [\n        { filePath: '/test/file1.md', url: '/file1.html', isDirectory: false },\n        { filePath: '/test/dir1', url: '/dir1/', isDirectory: true },\n      ];\n\n      jest\n        .spyOn(\n          resolver as unknown as { addDirectoryToTree: (...args: unknown[]) => Promise<void> },\n          'addDirectoryToTree'\n        )\n        .mockImplementation((...args: unknown[]) => {\n          const [, , allFiles] = args;\n          (allFiles as unknown[]).push(...mockFiles);\n          return Promise.resolve();\n        });\n\n      const result = await resolver.getFileTree();\n\n      expect(result).toEqual(mockFiles);\n      expect(consoleLogSpy).toHaveBeenCalledWith('Building file tree for directory: /resolved//test/input');\n      expect(consoleLogSpy).toHaveBeenCalledWith('File tree built successfully. Found 2 files/directories.');\n    });\n\n    it('should log sample files when files exist', async () => {\n      const mockFiles = Array.from({ length: 10 }, (_, i) => ({\n        filePath: `/test/file${i}.md`,\n        url: `/file${i}.html`,\n        isDirectory: false,\n      }));\n\n      jest\n        .spyOn(\n          resolver as unknown as { addDirectoryToTree: (...args: unknown[]) => Promise<void> },\n          'addDirectoryToTree'\n        )\n        .mockImplementation((...args: unknown[]) => {\n          const [, , allFiles] = args;\n          (allFiles as unknown[]).push(...mockFiles);\n          return Promise.resolve();\n        });\n\n      await resolver.getFileTree();\n\n      expect(consoleLogSpy).toHaveBeenCalledWith(\n        'Sample files:',\n        expect.arrayContaining([expect.objectContaining({ path: '/test/file0.md', url: '/file0.html', isDir: false })])\n      );\n    });\n\n    it('should handle file tree building errors', async () => {\n      const error = new Error('File tree failed');\n      jest\n        .spyOn(resolver as unknown as { addDirectoryToTree: () => Promise<void> }, 'addDirectoryToTree')\n        .mockImplementation(() => Promise.reject(error));\n\n      const result = await resolver.getFileTree();\n\n      expect(result).toEqual([]);\n      expect(consoleErrorSpy).toHaveBeenCalledWith('Error building file tree:', error);\n    });\n  });\n\n  // Note: addDirectoryToTree tests are complex due to recursion - skipping to avoid stack overflow\n\n  describe('integration scenarios', () => {\n    it('should handle complete workflow with file watching', async () => {\n      // Setup initial files\n      const initialFiles = ['/test/input/index.md', '/test/input/about.md'];\n      mockGlob.mockResolvedValue(initialFiles);\n\n      // Initialize resolver\n      await resolver.initialize();\n\n      // Verify initialization\n      expect(mockChokidar.watch).toHaveBeenCalled();\n      expect(consoleLogSpy).toHaveBeenCalledWith('Built URL map for 2 files in /resolved//test/input');\n\n      // Simulate file addition\n      const addCallback = mockWatcher.on.mock.calls.find((call) => call[0] === 'add')?.[1];\n      jest.spyOn(resolver as unknown as { isContentFile: () => boolean }, 'isContentFile').mockReturnValue(true);\n      jest\n        .spyOn(resolver as unknown as { calculateEleventyUrl: () => string }, 'calculateEleventyUrl')\n        .mockReturnValue('/new-file.html');\n\n      addCallback?.('/test/input/new-file.md');\n\n      // Verify file was added to map\n      expect(consoleLogSpy).toHaveBeenCalledWith('Added URL mapping: /test/input/new-file.md → /new-file.html');\n\n      // Simulate file deletion\n      const unlinkCallback = mockWatcher.on.mock.calls.find((call) => call[0] === 'unlink')?.[1];\n      resolver['urlMap'].set('/test/input/new-file.md', '/new-file.html');\n\n      unlinkCallback?.('/test/input/new-file.md');\n\n      // Verify file was removed from map\n      expect(consoleLogSpy).toHaveBeenCalledWith('Removed URL mapping: /test/input/new-file.md');\n\n      // Cleanup\n      resolver.destroy();\n      expect(mockWatcher.close).toHaveBeenCalled();\n    });\n  });\n});\n"],"version":3}