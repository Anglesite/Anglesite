{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/app/utils/atomic-operations.test.ts","mappings":"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","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/app/utils/atomic-operations.test.ts"],"sourcesContent":["/**\n * @file Comprehensive tests for atomic operations framework\n *\n * Tests atomic file operations, transactions, rollback mechanisms,\n * and failure scenarios to ensure data integrity.\n */\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport {\n  atomicWriteFile,\n  atomicCopyDirectory,\n  atomicRename,\n  createAtomicTransaction,\n  generateTempPath,\n  withRollback,\n} from '../../../app/utils/atomic-operations';\n\ndescribe('Atomic Operations Framework', () => {\n  let testDir: string;\n  let tempDir: string;\n\n  beforeEach(async () => {\n    // Create temporary test directory\n    testDir = path.join(os.tmpdir(), `atomic-test-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`);\n    tempDir = path.join(testDir, 'temp');\n\n    await fs.promises.mkdir(testDir, { recursive: true });\n    await fs.promises.mkdir(tempDir, { recursive: true });\n  });\n\n  afterEach(async () => {\n    // Cleanup test directory\n    try {\n      await fs.promises.rm(testDir, { recursive: true, force: true });\n    } catch (error) {\n      console.warn('Failed to cleanup test directory:', error);\n    }\n  });\n\n  describe('atomicWriteFile', () => {\n    it('should write file atomically with validation', async () => {\n      const filePath = path.join(testDir, 'test.json');\n      const data = JSON.stringify({ test: 'value' }, null, 2);\n\n      const result = await atomicWriteFile(filePath, data, {\n        validate: (content) => {\n          try {\n            const parsed = JSON.parse(content);\n            return parsed.test === 'value';\n          } catch {\n            return false;\n          }\n        },\n      });\n\n      expect(result.success).toBe(true);\n      expect(result.rollbackPerformed).toBe(false);\n\n      // Verify file was written correctly\n      const writtenData = await fs.promises.readFile(filePath, 'utf-8');\n      expect(JSON.parse(writtenData)).toEqual({ test: 'value' });\n    });\n\n    it('should rollback on validation failure', async () => {\n      const filePath = path.join(testDir, 'test.json');\n      const originalData = JSON.stringify({ original: 'data' });\n\n      // Create original file\n      await fs.promises.writeFile(filePath, originalData, 'utf-8');\n\n      const newData = JSON.stringify({ invalid: 'data' });\n\n      const result = await atomicWriteFile(filePath, newData, {\n        backup: true,\n        validate: () => {\n          // Always fail validation to test rollback\n          return false;\n        },\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.error?.message).toContain('validation failed');\n\n      // Verify original file was restored\n      const restoredData = await fs.promises.readFile(filePath, 'utf-8');\n      expect(JSON.parse(restoredData)).toEqual({ original: 'data' });\n    });\n\n    it('should handle write failures with retries', async () => {\n      const filePath = path.join('/nonexistent/directory', 'test.txt');\n\n      const result = await atomicWriteFile(filePath, 'test data', {\n        maxRetries: 2,\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.error).toBeDefined();\n    });\n\n    it('should create backup when requested', async () => {\n      const filePath = path.join(testDir, 'backup-test.txt');\n      const originalData = 'original content';\n      const newData = 'new content';\n\n      // Create original file\n      await fs.promises.writeFile(filePath, originalData, 'utf-8');\n\n      const result = await atomicWriteFile(filePath, newData, {\n        backup: true,\n      });\n\n      expect(result.success).toBe(true);\n\n      // Verify new content was written\n      const writtenData = await fs.promises.readFile(filePath, 'utf-8');\n      expect(writtenData).toBe(newData);\n\n      // Verify backup exists (we don't clean it up when successful)\n      const backupFiles = await fs.promises.readdir(testDir);\n      const backupFile = backupFiles.find((file) => file.includes('backup-test.txt.backup'));\n      if (backupFile) {\n        const backupData = await fs.promises.readFile(path.join(testDir, backupFile), 'utf-8');\n        expect(backupData).toBe(originalData);\n      }\n    });\n  });\n\n  describe('atomicCopyDirectory', () => {\n    it('should copy directory atomically with validation', async () => {\n      const sourceDir = path.join(testDir, 'source');\n      const targetDir = path.join(testDir, 'target');\n\n      // Create source directory structure\n      await fs.promises.mkdir(sourceDir, { recursive: true });\n      await fs.promises.writeFile(path.join(sourceDir, 'file1.txt'), 'content1', 'utf-8');\n      await fs.promises.writeFile(path.join(sourceDir, 'file2.txt'), 'content2', 'utf-8');\n\n      const subDir = path.join(sourceDir, 'subdir');\n      await fs.promises.mkdir(subDir);\n      await fs.promises.writeFile(path.join(subDir, 'file3.txt'), 'content3', 'utf-8');\n\n      const result = await atomicCopyDirectory(sourceDir, targetDir, {\n        validate: async (contents) => {\n          return contents.includes('file1.txt') && contents.includes('file2.txt') && contents.includes('subdir');\n        },\n      });\n\n      expect(result.success).toBe(true);\n\n      // Verify directory was copied correctly\n      const targetContents = await fs.promises.readdir(targetDir);\n      expect(targetContents).toContain('file1.txt');\n      expect(targetContents).toContain('file2.txt');\n      expect(targetContents).toContain('subdir');\n\n      const file1Content = await fs.promises.readFile(path.join(targetDir, 'file1.txt'), 'utf-8');\n      expect(file1Content).toBe('content1');\n\n      const subDirContents = await fs.promises.readdir(path.join(targetDir, 'subdir'));\n      expect(subDirContents).toContain('file3.txt');\n    });\n\n    it('should rollback on validation failure', async () => {\n      const sourceDir = path.join(testDir, 'source');\n      const targetDir = path.join(testDir, 'target');\n      const originalTargetDir = path.join(testDir, 'original-target');\n\n      // Create source directory\n      await fs.promises.mkdir(sourceDir, { recursive: true });\n      await fs.promises.writeFile(path.join(sourceDir, 'file1.txt'), 'content1', 'utf-8');\n\n      // Create original target directory\n      await fs.promises.mkdir(originalTargetDir);\n      await fs.promises.writeFile(path.join(originalTargetDir, 'original.txt'), 'original content', 'utf-8');\n\n      // Rename to simulate existing target\n      await fs.promises.rename(originalTargetDir, targetDir);\n\n      const result = await atomicCopyDirectory(sourceDir, targetDir, {\n        validate: async () => false, // Always fail validation\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.rollbackPerformed).toBe(true);\n\n      // Verify original target was restored\n      const restoredContents = await fs.promises.readdir(targetDir);\n      expect(restoredContents).toContain('original.txt');\n\n      const originalContent = await fs.promises.readFile(path.join(targetDir, 'original.txt'), 'utf-8');\n      expect(originalContent).toBe('original content');\n    });\n\n    it('should exclude specified files and directories', async () => {\n      const sourceDir = path.join(testDir, 'source');\n      const targetDir = path.join(testDir, 'target');\n\n      // Create source with files to exclude\n      await fs.promises.mkdir(sourceDir, { recursive: true });\n      await fs.promises.writeFile(path.join(sourceDir, 'include.txt'), 'include me', 'utf-8');\n      await fs.promises.writeFile(path.join(sourceDir, 'exclude.txt'), 'exclude me', 'utf-8');\n\n      const nodeModulesDir = path.join(sourceDir, 'node_modules');\n      await fs.promises.mkdir(nodeModulesDir);\n      await fs.promises.writeFile(path.join(nodeModulesDir, 'package.json'), '{}', 'utf-8');\n\n      const result = await atomicCopyDirectory(sourceDir, targetDir, {\n        exclude: ['exclude.txt', 'node_modules'],\n      });\n\n      expect(result.success).toBe(true);\n\n      const targetContents = await fs.promises.readdir(targetDir);\n      expect(targetContents).toContain('include.txt');\n      expect(targetContents).not.toContain('exclude.txt');\n      expect(targetContents).not.toContain('node_modules');\n    });\n  });\n\n  describe('atomicRename', () => {\n    it('should rename file atomically with validation', async () => {\n      const oldPath = path.join(testDir, 'old.txt');\n      const newPath = path.join(testDir, 'new.txt');\n\n      await fs.promises.writeFile(oldPath, 'test content', 'utf-8');\n\n      const result = await atomicRename(oldPath, newPath, {\n        validate: async (path) => {\n          const content = await fs.promises.readFile(path, 'utf-8');\n          return content === 'test content';\n        },\n      });\n\n      expect(result.success).toBe(true);\n\n      // Verify file was renamed\n      expect(\n        await fs.promises\n          .access(oldPath)\n          .then(() => false)\n          .catch(() => true)\n      ).toBe(true);\n      expect(\n        await fs.promises\n          .access(newPath)\n          .then(() => true)\n          .catch(() => false)\n      ).toBe(true);\n\n      const content = await fs.promises.readFile(newPath, 'utf-8');\n      expect(content).toBe('test content');\n    });\n\n    it('should rollback on validation failure', async () => {\n      const oldPath = path.join(testDir, 'old.txt');\n      const newPath = path.join(testDir, 'new.txt');\n\n      await fs.promises.writeFile(oldPath, 'old content', 'utf-8');\n      await fs.promises.writeFile(newPath, 'existing content', 'utf-8');\n\n      const result = await atomicRename(oldPath, newPath, {\n        validate: async () => false, // Always fail validation\n      });\n\n      expect(result.success).toBe(false);\n      expect(result.rollbackPerformed).toBe(true);\n\n      // Verify rollback: old file should exist with original content, new file should have existing content\n      expect(\n        await fs.promises\n          .access(oldPath)\n          .then(() => true)\n          .catch(() => false)\n      ).toBe(true);\n\n      const oldContent = await fs.promises.readFile(oldPath, 'utf-8');\n      expect(oldContent).toBe('old content');\n\n      const newContent = await fs.promises.readFile(newPath, 'utf-8');\n      expect(newContent).toBe('existing content');\n    });\n  });\n\n  describe('AtomicTransaction', () => {\n    it('should execute multiple operations atomically', async () => {\n      const transaction = createAtomicTransaction();\n      const file1Path = path.join(testDir, 'file1.txt');\n      const file2Path = path.join(testDir, 'file2.txt');\n\n      transaction.addOperation(async () => {\n        await fs.promises.writeFile(file1Path, 'content1', 'utf-8');\n      });\n\n      transaction.addOperation(async () => {\n        await fs.promises.writeFile(file2Path, 'content2', 'utf-8');\n      });\n\n      const result = await transaction.execute();\n\n      expect(result.success).toBe(true);\n      expect(result.rollbackPerformed).toBe(false);\n\n      // Verify both files were created\n      expect(await fs.promises.readFile(file1Path, 'utf-8')).toBe('content1');\n      expect(await fs.promises.readFile(file2Path, 'utf-8')).toBe('content2');\n    });\n\n    it('should rollback all operations on failure', async () => {\n      const transaction = createAtomicTransaction();\n      const file1Path = path.join(testDir, 'file1.txt');\n      let file1Created = false;\n      let file1Rolled = false;\n\n      transaction.addOperation(\n        async () => {\n          await fs.promises.writeFile(file1Path, 'content1', 'utf-8');\n          file1Created = true;\n        },\n        async () => {\n          if (\n            await fs.promises\n              .access(file1Path)\n              .then(() => true)\n              .catch(() => false)\n          ) {\n            await fs.promises.unlink(file1Path);\n            file1Rolled = true;\n          }\n        }\n      );\n\n      transaction.addOperation(async () => {\n        // This operation will fail\n        throw new Error('Simulated failure');\n      });\n\n      const result = await transaction.execute();\n\n      expect(result.success).toBe(false);\n      expect(result.rollbackPerformed).toBe(true);\n      expect(result.error?.message).toBe('Simulated failure');\n\n      // Verify first operation was rolled back\n      expect(file1Created).toBe(true);\n      expect(file1Rolled).toBe(true);\n      expect(\n        await fs.promises\n          .access(file1Path)\n          .then(() => false)\n          .catch(() => true)\n      ).toBe(true);\n    });\n\n    it('should handle rollback failures gracefully', async () => {\n      const transaction = createAtomicTransaction();\n\n      transaction.addOperation(\n        async () => {\n          // Operation succeeds\n        },\n        async () => {\n          // Rollback fails\n          throw new Error('Rollback failure');\n        }\n      );\n\n      transaction.addOperation(async () => {\n        throw new Error('Main operation failure');\n      });\n\n      const result = await transaction.execute();\n\n      expect(result.success).toBe(false);\n      expect(result.rollbackPerformed).toBe(false); // Rollback failed\n      expect(result.error?.message).toBe('Main operation failure');\n    });\n  });\n\n  describe('withRollback utility', () => {\n    it('should execute operation successfully without rollback', async () => {\n      const filePath = path.join(testDir, 'success.txt');\n\n      const result = await withRollback(\n        async () => {\n          await fs.promises.writeFile(filePath, 'success', 'utf-8');\n          return 'operation completed';\n        },\n        async () => {\n          // This shouldn't be called\n          await fs.promises.unlink(filePath);\n        }\n      );\n\n      expect(result.success).toBe(true);\n      expect(result.result).toBe('operation completed');\n      expect(result.rollbackPerformed).toBe(false);\n\n      // Verify file was created\n      const content = await fs.promises.readFile(filePath, 'utf-8');\n      expect(content).toBe('success');\n    });\n\n    it('should execute rollback on operation failure', async () => {\n      const filePath = path.join(testDir, 'rollback.txt');\n      let rollbackCalled = false;\n\n      const result = await withRollback(\n        async () => {\n          await fs.promises.writeFile(filePath, 'temp', 'utf-8');\n          throw new Error('Operation failed');\n        },\n        async () => {\n          rollbackCalled = true;\n          if (\n            await fs.promises\n              .access(filePath)\n              .then(() => true)\n              .catch(() => false)\n          ) {\n            await fs.promises.unlink(filePath);\n          }\n        }\n      );\n\n      expect(result.success).toBe(false);\n      expect(result.rollbackPerformed).toBe(true);\n      expect(result.error?.message).toBe('Operation failed');\n      expect(rollbackCalled).toBe(true);\n\n      // Verify file was cleaned up\n      expect(\n        await fs.promises\n          .access(filePath)\n          .then(() => false)\n          .catch(() => true)\n      ).toBe(true);\n    });\n  });\n\n  describe('generateTempPath', () => {\n    it('should generate unique temporary paths', () => {\n      const tempPath1 = generateTempPath('test', tempDir);\n      const tempPath2 = generateTempPath('test', tempDir);\n\n      expect(tempPath1).not.toBe(tempPath2);\n      expect(tempPath1).toContain(tempDir);\n      expect(tempPath1).toContain('test');\n      expect(tempPath1).toMatch(/\\.tmp$/);\n\n      expect(tempPath2).toContain(tempDir);\n      expect(tempPath2).toContain('test');\n      expect(tempPath2).toMatch(/\\.tmp$/);\n    });\n\n    it('should use system temp directory when not specified', () => {\n      const tempPath = generateTempPath('test');\n\n      expect(tempPath).toContain(os.tmpdir());\n      expect(tempPath).toContain('test');\n      expect(tempPath).toMatch(/\\.tmp$/);\n    });\n  });\n\n  describe('Concurrent operations', () => {\n    it('should handle concurrent atomic writes safely', async () => {\n      const filePath = path.join(testDir, 'concurrent.txt');\n\n      const operations = Array.from({ length: 5 }, (_, i) =>\n        atomicWriteFile(filePath, `content-${i}`, {\n          validate: (content) => content.startsWith('content-'),\n        })\n      );\n\n      const results = await Promise.all(operations);\n\n      // All operations should complete (some may fail due to concurrency, but at least one should succeed)\n      const successCount = results.filter((r) => r.success).length;\n      expect(successCount).toBeGreaterThan(0);\n\n      // File should contain valid content from one of the operations\n      const finalContent = await fs.promises.readFile(filePath, 'utf-8');\n      expect(finalContent).toMatch(/^content-\\d$/);\n    });\n  });\n\n  describe('Edge cases', () => {\n    it('should handle empty file writes', async () => {\n      const filePath = path.join(testDir, 'empty.txt');\n\n      const result = await atomicWriteFile(filePath, '');\n\n      expect(result.success).toBe(true);\n\n      const content = await fs.promises.readFile(filePath, 'utf-8');\n      expect(content).toBe('');\n    });\n\n    it('should handle very large file writes', async () => {\n      const filePath = path.join(testDir, 'large.txt');\n      const largeContent = 'x'.repeat(1024 * 1024); // 1MB of 'x'\n\n      const result = await atomicWriteFile(filePath, largeContent);\n\n      expect(result.success).toBe(true);\n\n      const content = await fs.promises.readFile(filePath, 'utf-8');\n      expect(content).toBe(largeContent);\n      expect(content.length).toBe(1024 * 1024);\n    });\n\n    it('should handle file paths with special characters', async () => {\n      const specialName = 'test file with spaces & symbols!@#.txt';\n      const filePath = path.join(testDir, specialName);\n\n      const result = await atomicWriteFile(filePath, 'special content');\n\n      expect(result.success).toBe(true);\n\n      const content = await fs.promises.readFile(filePath, 'utf-8');\n      expect(content).toBe('special content');\n    });\n\n    it('should handle operations on non-existent parent directories', async () => {\n      const deepPath = path.join(testDir, 'deep', 'nested', 'path', 'file.txt');\n\n      const result = await atomicWriteFile(deepPath, 'deep content');\n\n      expect(result.success).toBe(true);\n\n      const content = await fs.promises.readFile(deepPath, 'utf-8');\n      expect(content).toBe('deep content');\n    });\n  });\n});\n"],"version":3}