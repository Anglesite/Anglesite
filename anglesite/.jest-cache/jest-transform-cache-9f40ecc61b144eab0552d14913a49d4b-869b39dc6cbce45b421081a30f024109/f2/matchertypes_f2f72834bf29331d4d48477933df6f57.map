{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/types/matcher-types.ts","mappings":";AAAA;;;;;;GAMG;;;AA0FH,4BAEC;AAOD,gCAEC;AAvBD;;;;GAIG;AACU,QAAA,cAAc,GAAG,CAAC,SAAS,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,cAAc,EAAE,CAAC,CAAC,EAAE,GAAG,CAAU,CAAC;AAE9F;;;;GAIG;AACH,SAAgB,QAAQ,CAAC,KAAc;IACrC,OAAO,OAAO,KAAK,KAAK,QAAQ,CAAC;AACnC,CAAC;AAED;;;;GAIG;AACH,SAAgB,UAAU,CAAC,KAAc;IACvC,OAAO,OAAO,KAAK,KAAK,UAAU,CAAC;AACrC,CAAC","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/types/matcher-types.ts"],"sourcesContent":["/**\n * @file Type definitions for custom Jest matchers\n * @module matcher-types\n * @description Provides comprehensive typing for mock objects and function signatures\n * used by custom Jest matchers in the Anglesite test suite. These types ensure\n * type safety when working with Electron window mocks and test utilities.\n */\n\n/**\n * @typedef {unknown[]} MockCall\n * @description Type representing arguments passed to a mocked function call.\n * Used for asserting function invocations in Jest tests.\n */\nexport type MockCall = unknown[];\n\n/**\n * @interface WindowMock\n * @description Mock object interface that simulates Electron BrowserWindow methods\n * for testing window management functionality without requiring actual Electron windows.\n */\nexport interface WindowMock {\n  /** Mock for checking if window is destroyed */\n  isDestroyed?: jest.Mock<boolean>;\n  /** Mock for checking if window is maximized */\n  isMaximized?: jest.Mock<boolean>;\n  /** Mock for checking if window has focus */\n  isFocused?: jest.Mock<boolean>;\n  /** Mock for getting window title */\n  getTitle?: jest.Mock<string>;\n  /** Mock for focusing the window */\n  focus?: jest.Mock;\n  /** Mock for showing the window */\n  show?: jest.Mock;\n  /** Mock for closing the window */\n  close?: jest.Mock;\n  /** Mock for getting window bounds */\n  getBounds?: jest.Mock;\n  /** Mock for setting window bounds */\n  setBounds?: jest.Mock;\n  /** Mock for maximizing the window */\n  maximize?: jest.Mock;\n  /** Mock for adding event listeners */\n  on?: jest.Mock;\n  /** Mock for adding one-time event listeners */\n  once?: jest.Mock;\n  /** Mock for loading HTML files */\n  loadFile?: jest.Mock;\n  /** Mock for webContents API */\n  webContents?: {\n    /** Mock for sending IPC messages */\n    send?: jest.Mock;\n    /** Mock for checking loading state */\n    isLoading?: jest.Mock;\n    /** Mock for executing JavaScript in renderer */\n    executeJavaScript?: jest.Mock;\n    /** Mock for one-time event listeners on webContents */\n    once?: jest.Mock;\n  };\n}\n\n/**\n * Generic type for functions that handle various input types in tests.\n * @template T The input type\n * @param input The input value to handle\n * @returns The result of handling the input\n */\nexport type InputHandler<T = unknown> = (input: T) => unknown;\n\n/**\n * @interface WindowState\n * @description Configuration object for asserting window state in tests.\n * Used to verify that windows are in expected states during test execution.\n */\nexport interface WindowState {\n  /** Whether the window should be destroyed */\n  destroyed?: boolean;\n  /** Whether the window should be maximized */\n  maximized?: boolean;\n  /** Whether the window should have focus */\n  focused?: boolean;\n  /** Expected window title */\n  title?: string;\n}\n\n/**\n * @constant {ReadonlyArray} INVALID_INPUTS\n * @description Array of invalid input values used for negative test cases.\n * These values test error handling and validation in functions.\n */\nexport const INVALID_INPUTS = [undefined, null, '', [], {}, 'non-existent', -1, NaN] as const;\n\n/**\n * Type guard to check if a value is a string.\n * @param value The value to check\n * @returns True if the value is a string, false otherwise\n */\nexport function isString(value: unknown): value is string {\n  return typeof value === 'string';\n}\n\n/**\n * Type guard to check if a value is a function.\n * @param value The value to check\n * @returns True if the value is a function, false otherwise\n */\nexport function isFunction(value: unknown): value is (...args: unknown[]) => unknown {\n  return typeof value === 'function';\n}\n"],"version":3}