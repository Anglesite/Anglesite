944e52df46f50c4ee0042b23b3cd8cd4
"use strict";
/**
 * @file Type definitions for custom Jest matchers
 * @module matcher-types
 * @description Provides comprehensive typing for mock objects and function signatures
 * used by custom Jest matchers in the Anglesite test suite. These types ensure
 * type safety when working with Electron window mocks and test utilities.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.INVALID_INPUTS = void 0;
exports.isString = isString;
exports.isFunction = isFunction;
/**
 * @constant {ReadonlyArray} INVALID_INPUTS
 * @description Array of invalid input values used for negative test cases.
 * These values test error handling and validation in functions.
 */
exports.INVALID_INPUTS = [undefined, null, '', [], {}, 'non-existent', -1, NaN];
/**
 * Type guard to check if a value is a string.
 * @param value The value to check
 * @returns True if the value is a string, false otherwise
 */
function isString(value) {
    return typeof value === 'string';
}
/**
 * Type guard to check if a value is a function.
 * @param value The value to check
 * @returns True if the value is a function, false otherwise
 */
function isFunction(value) {
    return typeof value === 'function';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2R3ay9EZXZlbG9wZXIvZ2l0bGFiLmNvbS9kYXZpZHdrZWl0aC9AZHdrL2FuZ2xlc2l0ZS90ZXN0L3R5cGVzL21hdGNoZXItdHlwZXMudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7O0FBMEZILDRCQUVDO0FBT0QsZ0NBRUM7QUF2QkQ7Ozs7R0FJRztBQUNVLFFBQUEsY0FBYyxHQUFHLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFVLENBQUM7QUFFOUY7Ozs7R0FJRztBQUNILFNBQWdCLFFBQVEsQ0FBQyxLQUFjO0lBQ3JDLE9BQU8sT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDO0FBQ25DLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsU0FBZ0IsVUFBVSxDQUFDLEtBQWM7SUFDdkMsT0FBTyxPQUFPLEtBQUssS0FBSyxVQUFVLENBQUM7QUFDckMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZHdrL0RldmVsb3Blci9naXRsYWIuY29tL2Rhdmlkd2tlaXRoL0Bkd2svYW5nbGVzaXRlL3Rlc3QvdHlwZXMvbWF0Y2hlci10eXBlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIFR5cGUgZGVmaW5pdGlvbnMgZm9yIGN1c3RvbSBKZXN0IG1hdGNoZXJzXG4gKiBAbW9kdWxlIG1hdGNoZXItdHlwZXNcbiAqIEBkZXNjcmlwdGlvbiBQcm92aWRlcyBjb21wcmVoZW5zaXZlIHR5cGluZyBmb3IgbW9jayBvYmplY3RzIGFuZCBmdW5jdGlvbiBzaWduYXR1cmVzXG4gKiB1c2VkIGJ5IGN1c3RvbSBKZXN0IG1hdGNoZXJzIGluIHRoZSBBbmdsZXNpdGUgdGVzdCBzdWl0ZS4gVGhlc2UgdHlwZXMgZW5zdXJlXG4gKiB0eXBlIHNhZmV0eSB3aGVuIHdvcmtpbmcgd2l0aCBFbGVjdHJvbiB3aW5kb3cgbW9ja3MgYW5kIHRlc3QgdXRpbGl0aWVzLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge3Vua25vd25bXX0gTW9ja0NhbGxcbiAqIEBkZXNjcmlwdGlvbiBUeXBlIHJlcHJlc2VudGluZyBhcmd1bWVudHMgcGFzc2VkIHRvIGEgbW9ja2VkIGZ1bmN0aW9uIGNhbGwuXG4gKiBVc2VkIGZvciBhc3NlcnRpbmcgZnVuY3Rpb24gaW52b2NhdGlvbnMgaW4gSmVzdCB0ZXN0cy5cbiAqL1xuZXhwb3J0IHR5cGUgTW9ja0NhbGwgPSB1bmtub3duW107XG5cbi8qKlxuICogQGludGVyZmFjZSBXaW5kb3dNb2NrXG4gKiBAZGVzY3JpcHRpb24gTW9jayBvYmplY3QgaW50ZXJmYWNlIHRoYXQgc2ltdWxhdGVzIEVsZWN0cm9uIEJyb3dzZXJXaW5kb3cgbWV0aG9kc1xuICogZm9yIHRlc3Rpbmcgd2luZG93IG1hbmFnZW1lbnQgZnVuY3Rpb25hbGl0eSB3aXRob3V0IHJlcXVpcmluZyBhY3R1YWwgRWxlY3Ryb24gd2luZG93cy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBXaW5kb3dNb2NrIHtcbiAgLyoqIE1vY2sgZm9yIGNoZWNraW5nIGlmIHdpbmRvdyBpcyBkZXN0cm95ZWQgKi9cbiAgaXNEZXN0cm95ZWQ/OiBqZXN0Lk1vY2s8Ym9vbGVhbj47XG4gIC8qKiBNb2NrIGZvciBjaGVja2luZyBpZiB3aW5kb3cgaXMgbWF4aW1pemVkICovXG4gIGlzTWF4aW1pemVkPzogamVzdC5Nb2NrPGJvb2xlYW4+O1xuICAvKiogTW9jayBmb3IgY2hlY2tpbmcgaWYgd2luZG93IGhhcyBmb2N1cyAqL1xuICBpc0ZvY3VzZWQ/OiBqZXN0Lk1vY2s8Ym9vbGVhbj47XG4gIC8qKiBNb2NrIGZvciBnZXR0aW5nIHdpbmRvdyB0aXRsZSAqL1xuICBnZXRUaXRsZT86IGplc3QuTW9jazxzdHJpbmc+O1xuICAvKiogTW9jayBmb3IgZm9jdXNpbmcgdGhlIHdpbmRvdyAqL1xuICBmb2N1cz86IGplc3QuTW9jaztcbiAgLyoqIE1vY2sgZm9yIHNob3dpbmcgdGhlIHdpbmRvdyAqL1xuICBzaG93PzogamVzdC5Nb2NrO1xuICAvKiogTW9jayBmb3IgY2xvc2luZyB0aGUgd2luZG93ICovXG4gIGNsb3NlPzogamVzdC5Nb2NrO1xuICAvKiogTW9jayBmb3IgZ2V0dGluZyB3aW5kb3cgYm91bmRzICovXG4gIGdldEJvdW5kcz86IGplc3QuTW9jaztcbiAgLyoqIE1vY2sgZm9yIHNldHRpbmcgd2luZG93IGJvdW5kcyAqL1xuICBzZXRCb3VuZHM/OiBqZXN0Lk1vY2s7XG4gIC8qKiBNb2NrIGZvciBtYXhpbWl6aW5nIHRoZSB3aW5kb3cgKi9cbiAgbWF4aW1pemU/OiBqZXN0Lk1vY2s7XG4gIC8qKiBNb2NrIGZvciBhZGRpbmcgZXZlbnQgbGlzdGVuZXJzICovXG4gIG9uPzogamVzdC5Nb2NrO1xuICAvKiogTW9jayBmb3IgYWRkaW5nIG9uZS10aW1lIGV2ZW50IGxpc3RlbmVycyAqL1xuICBvbmNlPzogamVzdC5Nb2NrO1xuICAvKiogTW9jayBmb3IgbG9hZGluZyBIVE1MIGZpbGVzICovXG4gIGxvYWRGaWxlPzogamVzdC5Nb2NrO1xuICAvKiogTW9jayBmb3Igd2ViQ29udGVudHMgQVBJICovXG4gIHdlYkNvbnRlbnRzPzoge1xuICAgIC8qKiBNb2NrIGZvciBzZW5kaW5nIElQQyBtZXNzYWdlcyAqL1xuICAgIHNlbmQ/OiBqZXN0Lk1vY2s7XG4gICAgLyoqIE1vY2sgZm9yIGNoZWNraW5nIGxvYWRpbmcgc3RhdGUgKi9cbiAgICBpc0xvYWRpbmc/OiBqZXN0Lk1vY2s7XG4gICAgLyoqIE1vY2sgZm9yIGV4ZWN1dGluZyBKYXZhU2NyaXB0IGluIHJlbmRlcmVyICovXG4gICAgZXhlY3V0ZUphdmFTY3JpcHQ/OiBqZXN0Lk1vY2s7XG4gICAgLyoqIE1vY2sgZm9yIG9uZS10aW1lIGV2ZW50IGxpc3RlbmVycyBvbiB3ZWJDb250ZW50cyAqL1xuICAgIG9uY2U/OiBqZXN0Lk1vY2s7XG4gIH07XG59XG5cbi8qKlxuICogR2VuZXJpYyB0eXBlIGZvciBmdW5jdGlvbnMgdGhhdCBoYW5kbGUgdmFyaW91cyBpbnB1dCB0eXBlcyBpbiB0ZXN0cy5cbiAqIEB0ZW1wbGF0ZSBUIFRoZSBpbnB1dCB0eXBlXG4gKiBAcGFyYW0gaW5wdXQgVGhlIGlucHV0IHZhbHVlIHRvIGhhbmRsZVxuICogQHJldHVybnMgVGhlIHJlc3VsdCBvZiBoYW5kbGluZyB0aGUgaW5wdXRcbiAqL1xuZXhwb3J0IHR5cGUgSW5wdXRIYW5kbGVyPFQgPSB1bmtub3duPiA9IChpbnB1dDogVCkgPT4gdW5rbm93bjtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIFdpbmRvd1N0YXRlXG4gKiBAZGVzY3JpcHRpb24gQ29uZmlndXJhdGlvbiBvYmplY3QgZm9yIGFzc2VydGluZyB3aW5kb3cgc3RhdGUgaW4gdGVzdHMuXG4gKiBVc2VkIHRvIHZlcmlmeSB0aGF0IHdpbmRvd3MgYXJlIGluIGV4cGVjdGVkIHN0YXRlcyBkdXJpbmcgdGVzdCBleGVjdXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgV2luZG93U3RhdGUge1xuICAvKiogV2hldGhlciB0aGUgd2luZG93IHNob3VsZCBiZSBkZXN0cm95ZWQgKi9cbiAgZGVzdHJveWVkPzogYm9vbGVhbjtcbiAgLyoqIFdoZXRoZXIgdGhlIHdpbmRvdyBzaG91bGQgYmUgbWF4aW1pemVkICovXG4gIG1heGltaXplZD86IGJvb2xlYW47XG4gIC8qKiBXaGV0aGVyIHRoZSB3aW5kb3cgc2hvdWxkIGhhdmUgZm9jdXMgKi9cbiAgZm9jdXNlZD86IGJvb2xlYW47XG4gIC8qKiBFeHBlY3RlZCB3aW5kb3cgdGl0bGUgKi9cbiAgdGl0bGU/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQGNvbnN0YW50IHtSZWFkb25seUFycmF5fSBJTlZBTElEX0lOUFVUU1xuICogQGRlc2NyaXB0aW9uIEFycmF5IG9mIGludmFsaWQgaW5wdXQgdmFsdWVzIHVzZWQgZm9yIG5lZ2F0aXZlIHRlc3QgY2FzZXMuXG4gKiBUaGVzZSB2YWx1ZXMgdGVzdCBlcnJvciBoYW5kbGluZyBhbmQgdmFsaWRhdGlvbiBpbiBmdW5jdGlvbnMuXG4gKi9cbmV4cG9ydCBjb25zdCBJTlZBTElEX0lOUFVUUyA9IFt1bmRlZmluZWQsIG51bGwsICcnLCBbXSwge30sICdub24tZXhpc3RlbnQnLCAtMSwgTmFOXSBhcyBjb25zdDtcblxuLyoqXG4gKiBUeXBlIGd1YXJkIHRvIGNoZWNrIGlmIGEgdmFsdWUgaXMgYSBzdHJpbmcuXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyBUcnVlIGlmIHRoZSB2YWx1ZSBpcyBhIHN0cmluZywgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIHN0cmluZyB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIFR5cGUgZ3VhcmQgdG8gY2hlY2sgaWYgYSB2YWx1ZSBpcyBhIGZ1bmN0aW9uLlxuICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVja1xuICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgYSBmdW5jdGlvbiwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgKC4uLmFyZ3M6IHVua25vd25bXSkgPT4gdW5rbm93biB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59XG4iXSwidmVyc2lvbiI6M30=