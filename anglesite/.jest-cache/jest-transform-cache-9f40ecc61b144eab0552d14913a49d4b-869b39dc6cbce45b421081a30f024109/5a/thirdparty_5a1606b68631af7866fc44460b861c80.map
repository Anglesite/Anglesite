{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/mocks/third-party.ts","mappings":"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","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/mocks/third-party.ts"],"sourcesContent":["// test/mocks/third-party.ts\n\n// Mock hostile module for DNS management\nexport const mockHostile = {\n  set: jest.fn(),\n  remove: jest.fn(),\n  get: jest.fn(() => []),\n  removeMatching: jest.fn(),\n};\n\njest.mock('hostile', () => mockHostile);\n\n// Mock mkcert module\nexport const mockCreateCA = jest.fn();\nexport const mockCreateCert = jest.fn();\n\njest.mock('mkcert', () => ({\n  createCA: mockCreateCA,\n  createCert: mockCreateCert,\n}));\n\n// Mock archiver module for BagIt exports\nexport const mockArchiver = {\n  create: jest.fn(() => ({\n    pipe: jest.fn(),\n    directory: jest.fn(),\n    file: jest.fn(),\n    append: jest.fn(),\n    finalize: jest.fn(() => Promise.resolve()),\n    on: jest.fn(),\n  })),\n};\n\njest.mock('archiver', () => mockArchiver);\n\n// Mock http-proxy module (conditional)\nexport const mockHttpProxy = {\n  createProxyServer: jest.fn(() => ({\n    on: jest.fn(),\n    web: jest.fn(),\n    ws: jest.fn(),\n    close: jest.fn(),\n  })),\n};\n\ntry {\n  require.resolve('http-proxy');\n  jest.mock('http-proxy', () => mockHttpProxy);\n} catch {\n  // Module not found, skip mocking\n}\n\n// Mock live-server module (conditional)\nexport const mockLiveServer = {\n  start: jest.fn(),\n  shutdown: jest.fn(),\n};\n\ntry {\n  require.resolve('live-server');\n  jest.mock('live-server', () => mockLiveServer);\n} catch {\n  // Module not found, skip mocking\n}\n\n// Mock @11ty/eleventy\nexport const mockEleventyClass = jest.fn().mockImplementation(() => ({\n  init: jest.fn(),\n  write: jest.fn(),\n  watch: jest.fn(),\n  serve: jest.fn(),\n  setConfigPathOverride: jest.fn(),\n  setRunMode: jest.fn(),\n}));\n\njest.mock('@11ty/eleventy', () => mockEleventyClass);\n\n// Mock @11ty/eleventy-dev-server\nexport const mockEleventyDevServerClass = jest.fn().mockImplementation(() => ({\n  serve: jest.fn(),\n  close: jest.fn(),\n  watchFiles: jest.fn(),\n  watcher: {\n    on: jest.fn(),\n    close: jest.fn(),\n  },\n}));\n\njest.mock('@11ty/eleventy-dev-server', () => mockEleventyDevServerClass);\n\n// Mock bagit-fs\nexport const mockBagItFs = jest.fn(() => ({\n  createWriteStream: jest.fn(() => ({\n    on: jest.fn(),\n    write: jest.fn(),\n    end: jest.fn(),\n  })),\n  mkdir: jest.fn((path, callback) => callback && callback()),\n  finalize: jest.fn((callback) => callback && callback()),\n}));\n\njest.mock('bagit-fs', () => mockBagItFs);\n\n// Reset all third-party mocks\nexport const resetThirdPartyMocks = () => {\n  // Reset hostile mocks\n  mockHostile.set.mockClear();\n  mockHostile.remove.mockClear();\n  mockHostile.get.mockClear();\n  mockHostile.removeMatching.mockClear();\n\n  // Reset mkcert mocks\n  mockCreateCA.mockClear();\n  mockCreateCert.mockClear();\n\n  // Reset archiver mocks\n  mockArchiver.create.mockClear();\n\n  // Reset http-proxy mocks\n  mockHttpProxy.createProxyServer.mockClear();\n\n  // Reset live-server mocks\n  mockLiveServer.start.mockClear();\n  mockLiveServer.shutdown.mockClear();\n\n  // Reset eleventy mocks\n  mockEleventyClass.mockClear();\n  mockEleventyDevServerClass.mockClear();\n\n  // Reset bagit-fs mocks\n  mockBagItFs.mockClear();\n};\n"],"version":3}