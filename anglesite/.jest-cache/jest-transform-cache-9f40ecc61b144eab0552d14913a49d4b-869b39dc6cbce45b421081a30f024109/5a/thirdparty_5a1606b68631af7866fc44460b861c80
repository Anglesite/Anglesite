8898bcddefd32828cdeb199db14ee0c4
"use strict";
// test/mocks/third-party.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.resetThirdPartyMocks = exports.mockBagItFs = exports.mockEleventyDevServerClass = exports.mockEleventyClass = exports.mockLiveServer = exports.mockHttpProxy = exports.mockArchiver = exports.mockCreateCert = exports.mockCreateCA = exports.mockHostile = void 0;
jest.mock('hostile', () => exports.mockHostile);
jest.mock('mkcert', () => ({
    createCA: exports.mockCreateCA,
    createCert: exports.mockCreateCert,
}));
jest.mock('archiver', () => exports.mockArchiver);
jest.mock('@11ty/eleventy', () => exports.mockEleventyClass);
jest.mock('@11ty/eleventy-dev-server', () => exports.mockEleventyDevServerClass);
jest.mock('bagit-fs', () => exports.mockBagItFs);
// Mock hostile module for DNS management
exports.mockHostile = {
    set: jest.fn(),
    remove: jest.fn(),
    get: jest.fn(() => []),
    removeMatching: jest.fn(),
};
// Mock mkcert module
exports.mockCreateCA = jest.fn();
exports.mockCreateCert = jest.fn();
// Mock archiver module for BagIt exports
exports.mockArchiver = {
    create: jest.fn(() => ({
        pipe: jest.fn(),
        directory: jest.fn(),
        file: jest.fn(),
        append: jest.fn(),
        finalize: jest.fn(() => Promise.resolve()),
        on: jest.fn(),
    })),
};
// Mock http-proxy module (conditional)
exports.mockHttpProxy = {
    createProxyServer: jest.fn(() => ({
        on: jest.fn(),
        web: jest.fn(),
        ws: jest.fn(),
        close: jest.fn(),
    })),
};
try {
    require.resolve('http-proxy');
    jest.mock('http-proxy', () => exports.mockHttpProxy);
}
catch {
    // Module not found, skip mocking
}
// Mock live-server module (conditional)
exports.mockLiveServer = {
    start: jest.fn(),
    shutdown: jest.fn(),
};
try {
    require.resolve('live-server');
    jest.mock('live-server', () => exports.mockLiveServer);
}
catch {
    // Module not found, skip mocking
}
// Mock @11ty/eleventy
exports.mockEleventyClass = jest.fn().mockImplementation(() => ({
    init: jest.fn(),
    write: jest.fn(),
    watch: jest.fn(),
    serve: jest.fn(),
    setConfigPathOverride: jest.fn(),
    setRunMode: jest.fn(),
}));
// Mock @11ty/eleventy-dev-server
exports.mockEleventyDevServerClass = jest.fn().mockImplementation(() => ({
    serve: jest.fn(),
    close: jest.fn(),
    watchFiles: jest.fn(),
    watcher: {
        on: jest.fn(),
        close: jest.fn(),
    },
}));
// Mock bagit-fs
exports.mockBagItFs = jest.fn(() => ({
    createWriteStream: jest.fn(() => ({
        on: jest.fn(),
        write: jest.fn(),
        end: jest.fn(),
    })),
    mkdir: jest.fn((path, callback) => callback && callback()),
    finalize: jest.fn((callback) => callback && callback()),
}));
// Reset all third-party mocks
const resetThirdPartyMocks = () => {
    // Reset hostile mocks
    exports.mockHostile.set.mockClear();
    exports.mockHostile.remove.mockClear();
    exports.mockHostile.get.mockClear();
    exports.mockHostile.removeMatching.mockClear();
    // Reset mkcert mocks
    exports.mockCreateCA.mockClear();
    exports.mockCreateCert.mockClear();
    // Reset archiver mocks
    exports.mockArchiver.create.mockClear();
    // Reset http-proxy mocks
    exports.mockHttpProxy.createProxyServer.mockClear();
    // Reset live-server mocks
    exports.mockLiveServer.start.mockClear();
    exports.mockLiveServer.shutdown.mockClear();
    // Reset eleventy mocks
    exports.mockEleventyClass.mockClear();
    exports.mockEleventyDevServerClass.mockClear();
    // Reset bagit-fs mocks
    exports.mockBagItFs.mockClear();
};
exports.resetThirdPartyMocks = resetThirdPartyMocks;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,