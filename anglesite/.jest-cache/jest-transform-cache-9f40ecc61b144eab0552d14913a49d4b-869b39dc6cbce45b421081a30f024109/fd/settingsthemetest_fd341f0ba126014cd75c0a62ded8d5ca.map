{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/ui/settings-theme.test.ts","mappings":"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","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/ui/settings-theme.test.ts"],"sourcesContent":["/**\n * @file Tests for Settings window theme switching functionality\n */\n\ninterface MockEventTarget {\n  target: {\n    checked: boolean;\n    value: string;\n  };\n}\n\n// Mock DOM environment\nconst mockDocument = {\n  documentElement: {\n    setAttribute: jest.fn(),\n    removeAttribute: jest.fn(),\n  },\n  querySelector: jest.fn(),\n  querySelectorAll: jest.fn(),\n  getElementById: jest.fn(),\n  addEventListener: jest.fn(),\n};\n\nconst mockWindow = {\n  electronAPI: {\n    getCurrentTheme: jest.fn(),\n    setTheme: jest.fn(),\n    onThemeUpdated: jest.fn(),\n  },\n  close: jest.fn(),\n};\n\n// Mock radio buttons\nconst createMockRadio = (value: string, checked = false) => ({\n  value,\n  checked,\n  addEventListener: jest.fn(),\n  dispatchEvent: jest.fn(),\n});\n\ndescribe('Settings Theme Switching', () => {\n  beforeEach(() => {\n    // Reset all mocks\n    jest.clearAllMocks();\n\n    // Ensure mockWindow.electronAPI exists\n    mockWindow.electronAPI = {\n      getCurrentTheme: jest.fn(),\n      setTheme: jest.fn(),\n      onThemeUpdated: jest.fn(),\n    };\n\n    // Set up global mocks\n    global.document = mockDocument as unknown as Document;\n    global.window = mockWindow as unknown as Window & typeof globalThis;\n\n    // Reset mock implementations\n    mockWindow.electronAPI.getCurrentTheme.mockResolvedValue({\n      userPreference: 'system',\n      resolvedTheme: 'light',\n      systemTheme: 'light',\n    });\n\n    mockWindow.electronAPI.setTheme.mockResolvedValue({\n      userPreference: 'light',\n      resolvedTheme: 'light',\n      systemTheme: 'light',\n    });\n  });\n\n  describe('Theme Loading and Initialization', () => {\n    it('should load current theme on page load', async () => {\n      const mockThemeRadios = [\n        createMockRadio('system', true),\n        createMockRadio('light', false),\n        createMockRadio('dark', false),\n      ];\n\n      mockDocument.querySelectorAll.mockReturnValue(mockThemeRadios);\n      mockDocument.getElementById.mockImplementation((id) => {\n        if (id === 'themeSystem') return mockThemeRadios[0];\n        if (id === 'themeLight') return mockThemeRadios[1];\n        if (id === 'themeDark') return mockThemeRadios[2];\n        return null;\n      });\n\n      mockWindow.electronAPI.getCurrentTheme.mockResolvedValue({\n        userPreference: 'light',\n        resolvedTheme: 'light',\n        systemTheme: 'dark',\n      });\n\n      // Simulate the settings page loading logic\n      const themeInfo = await mockWindow.electronAPI.getCurrentTheme();\n\n      expect(mockWindow.electronAPI.getCurrentTheme).toHaveBeenCalled();\n      expect(themeInfo).toEqual({\n        userPreference: 'light',\n        resolvedTheme: 'light',\n        systemTheme: 'dark',\n      });\n    });\n\n    it('should apply theme immediately on load', async () => {\n      mockWindow.electronAPI.getCurrentTheme.mockResolvedValue({\n        userPreference: 'dark',\n        resolvedTheme: 'dark',\n        systemTheme: 'light',\n      });\n\n      const themeInfo = await mockWindow.electronAPI.getCurrentTheme();\n\n      // Simulate applyTheme function\n      if (themeInfo.resolvedTheme === 'dark') {\n        mockDocument.documentElement.setAttribute('data-theme', 'dark');\n      } else {\n        mockDocument.documentElement.removeAttribute('data-theme');\n      }\n\n      expect(mockDocument.documentElement.setAttribute).toHaveBeenCalledWith('data-theme', 'dark');\n    });\n\n    it('should set up theme update listener', () => {\n      const mockCallback = jest.fn();\n\n      mockWindow.electronAPI.onThemeUpdated(mockCallback);\n\n      expect(mockWindow.electronAPI.onThemeUpdated).toHaveBeenCalledWith(mockCallback);\n    });\n  });\n\n  describe('Immediate Theme Switching', () => {\n    it('should apply theme immediately when radio button changes', async () => {\n      const mockRadios = [\n        createMockRadio('system', false),\n        createMockRadio('light', false),\n        createMockRadio('dark', true), // This one is selected\n      ];\n\n      mockDocument.querySelectorAll.mockReturnValue(mockRadios);\n\n      // Set up the change handler response\n      mockWindow.electronAPI.setTheme.mockResolvedValue({\n        userPreference: 'dark',\n        resolvedTheme: 'dark',\n        systemTheme: 'light',\n      });\n\n      // Simulate setting up event listeners\n      mockRadios.forEach((radio) => {\n        radio.addEventListener('change', async (event: MockEventTarget) => {\n          if (event.target.checked) {\n            const newThemeInfo = await mockWindow.electronAPI.setTheme(event.target.value);\n            // Apply theme immediately\n            if (newThemeInfo.resolvedTheme === 'dark') {\n              mockDocument.documentElement.setAttribute('data-theme', 'dark');\n            } else {\n              mockDocument.documentElement.removeAttribute('data-theme');\n            }\n          }\n        });\n      });\n\n      // Simulate radio button change event\n      const changeEvent = { target: mockRadios[2] };\n      const changeHandler = mockRadios[2].addEventListener.mock.calls.find((call) => call[0] === 'change')[1];\n\n      await changeHandler(changeEvent);\n\n      expect(mockWindow.electronAPI.setTheme).toHaveBeenCalledWith('dark');\n      expect(mockDocument.documentElement.setAttribute).toHaveBeenCalledWith('data-theme', 'dark');\n    });\n\n    it('should switch to light theme immediately', async () => {\n      const mockRadios = [\n        createMockRadio('system', false),\n        createMockRadio('light', true), // This one is selected\n        createMockRadio('dark', false),\n      ];\n\n      mockDocument.querySelectorAll.mockReturnValue(mockRadios);\n\n      mockWindow.electronAPI.setTheme.mockResolvedValue({\n        userPreference: 'light',\n        resolvedTheme: 'light',\n        systemTheme: 'dark',\n      });\n\n      // Set up change handler\n      const changeHandler = async (event: MockEventTarget) => {\n        if (event.target.checked) {\n          const newThemeInfo = await mockWindow.electronAPI.setTheme(event.target.value);\n          if (newThemeInfo.resolvedTheme === 'dark') {\n            mockDocument.documentElement.setAttribute('data-theme', 'dark');\n          } else {\n            mockDocument.documentElement.removeAttribute('data-theme');\n          }\n        }\n      };\n\n      // Simulate change event for light theme\n      await changeHandler({ target: mockRadios[1] });\n\n      expect(mockWindow.electronAPI.setTheme).toHaveBeenCalledWith('light');\n      expect(mockDocument.documentElement.removeAttribute).toHaveBeenCalledWith('data-theme');\n    });\n\n    it('should switch to system theme immediately', async () => {\n      const mockRadios = [\n        createMockRadio('system', true), // This one is selected\n        createMockRadio('light', false),\n        createMockRadio('dark', false),\n      ];\n\n      mockWindow.electronAPI.setTheme.mockResolvedValue({\n        userPreference: 'system',\n        resolvedTheme: 'dark', // System is dark\n        systemTheme: 'dark',\n      });\n\n      // Set up change handler\n      const changeHandler = async (event: MockEventTarget) => {\n        if (event.target.checked) {\n          const newThemeInfo = await mockWindow.electronAPI.setTheme(event.target.value);\n          if (newThemeInfo.resolvedTheme === 'dark') {\n            mockDocument.documentElement.setAttribute('data-theme', 'dark');\n          } else {\n            mockDocument.documentElement.removeAttribute('data-theme');\n          }\n        }\n      };\n\n      // Simulate change event for system theme\n      await changeHandler({ target: mockRadios[0] });\n\n      expect(mockWindow.electronAPI.setTheme).toHaveBeenCalledWith('system');\n      expect(mockDocument.documentElement.setAttribute).toHaveBeenCalledWith('data-theme', 'dark');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle theme switching errors gracefully', async () => {\n      const mockRadios = [createMockRadio('dark', true)];\n      mockDocument.querySelectorAll.mockReturnValue(mockRadios);\n\n      // Mock an error in theme setting\n      const themeError = new Error('Theme setting failed');\n      mockWindow.electronAPI.setTheme.mockRejectedValue(themeError);\n\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      // Set up error handling change handler\n      const changeHandler = async (event: MockEventTarget) => {\n        if (event.target.checked) {\n          try {\n            await mockWindow.electronAPI.setTheme(event.target.value);\n          } catch (error) {\n            console.error('Failed to apply theme immediately:', error);\n          }\n        }\n      };\n\n      // Simulate change event\n      await changeHandler({ target: mockRadios[0] });\n\n      consoleSpy.mockRestore();\n    });\n\n    it('should handle missing electronAPI gracefully', async () => {\n      // Remove electronAPI\n      (mockWindow as { electronAPI?: unknown }).electronAPI = undefined;\n\n      const changeHandler = async (event: MockEventTarget) => {\n        if (event.target.checked) {\n          try {\n            if (mockWindow.electronAPI) {\n              await mockWindow.electronAPI.setTheme(event.target.value);\n            }\n          } catch {\n            // Should not throw\n          }\n        }\n      };\n\n      // Should not throw even without electronAPI\n      expect(async () => {\n        await changeHandler({ target: { checked: true, value: 'dark' } });\n      }).not.toThrow();\n    });\n  });\n\n  describe('Theme State Consistency', () => {\n    it('should maintain theme state across multiple changes', async () => {\n      // Restore electronAPI for this test\n      mockWindow.electronAPI = {\n        getCurrentTheme: jest.fn(),\n        setTheme: jest.fn(),\n        onThemeUpdated: jest.fn(),\n      };\n\n      const mockRadios = [\n        createMockRadio('system', false),\n        createMockRadio('light', false),\n        createMockRadio('dark', false),\n      ];\n\n      // Track theme state changes\n      const themeStates: Array<{ userPreference: string; resolvedTheme: string; systemTheme: string }> = [];\n\n      const changeHandler = async (event: MockEventTarget) => {\n        if (event.target.checked) {\n          const newThemeInfo = await mockWindow.electronAPI.setTheme(event.target.value);\n          themeStates.push(newThemeInfo);\n        }\n      };\n\n      // Simulate multiple theme changes\n      mockWindow.electronAPI.setTheme\n        .mockResolvedValueOnce({ userPreference: 'light', resolvedTheme: 'light', systemTheme: 'dark' })\n        .mockResolvedValueOnce({ userPreference: 'dark', resolvedTheme: 'dark', systemTheme: 'dark' })\n        .mockResolvedValueOnce({ userPreference: 'system', resolvedTheme: 'dark', systemTheme: 'dark' });\n\n      // Change to light\n      mockRadios[1].checked = true;\n      await changeHandler({ target: mockRadios[1] });\n\n      // Change to dark\n      mockRadios[1].checked = false;\n      mockRadios[2].checked = true;\n      await changeHandler({ target: mockRadios[2] });\n\n      // Change to system\n      mockRadios[2].checked = false;\n      mockRadios[0].checked = true;\n      await changeHandler({ target: mockRadios[0] });\n\n      expect(themeStates).toHaveLength(3);\n      expect(themeStates[0].userPreference).toBe('light');\n      expect(themeStates[1].userPreference).toBe('dark');\n      expect(themeStates[2].userPreference).toBe('system');\n    });\n  });\n\n  describe('Save Settings Behavior', () => {\n    it('should not duplicate theme saving when Save Settings is clicked', async () => {\n      // Restore electronAPI for this test\n      mockWindow.electronAPI = {\n        getCurrentTheme: jest.fn(),\n        setTheme: jest.fn(),\n        onThemeUpdated: jest.fn(),\n      };\n\n      // Theme has already been saved via immediate switching\n      const mockCheckedRadio = createMockRadio('dark', true);\n      mockDocument.querySelector.mockReturnValue(mockCheckedRadio);\n\n      // Simulate Save Settings click (theme should already be saved)\n      const saveSettings = async () => {\n        // Theme is already saved immediately when changed, so just handle other settings\n        // const autoDomains = mockDocument.getElementById('autoDomains')?.checked;\n        // TODO: Save autoDomains to store when implemented\n        mockWindow.close();\n      };\n\n      await saveSettings();\n\n      // electronAPI.setTheme should NOT be called again during save\n      expect(mockWindow.electronAPI.setTheme).not.toHaveBeenCalled();\n      expect(mockWindow.close).toHaveBeenCalled();\n    });\n  });\n});\n"],"version":3}