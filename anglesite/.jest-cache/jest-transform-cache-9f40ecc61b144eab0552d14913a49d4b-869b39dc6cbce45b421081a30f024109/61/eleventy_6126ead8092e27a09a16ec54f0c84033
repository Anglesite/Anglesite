ffbfbf95d531ef6159325a953a7664a4
"use strict";
const anglesiteEleventy = require('@dwk/anglesite-11ty');
const EleventyWebcPlugin = require('@11ty/eleventy-plugin-webc');
const fs = require('fs');
const path = require('path');
/**
 * Eleventy configuration function for Anglesite websites.
 * @param eleventyConfig Configuration object
 * @returns Configuration return object
 */
module.exports = function (eleventyConfig) {
    // FIXME: Workaround for a known issue in eleventy-plugin-webc (https://github.com/11ty/eleventy-plugin-webc/issues/86).
    // When using `permalink` in front matter, especially with dynamic values or for non-HTML files,
    // `page.url` may not be correctly populated or available to other plugins/filters.
    // To avoid build errors and ensure consistent URL generation, explicitly duplicate the `permalink`
    // value in `page.url` within the front matter for affected templates.
    eleventyConfig.setFreezeReservedData(false);
    // Anglesite 11ty is the configuration that Anglesite needs
    // of an 11ty project for it to work with the UX of Anglesite
    eleventyConfig.addPlugin(anglesiteEleventy);
    // Override WebC configuration after anglesite
    eleventyConfig.addPlugin(EleventyWebcPlugin, {
        components: 'src/_includes/**/*.webc',
    });
    // Add global data functions to make data accessible to npm components
    eleventyConfig.addGlobalData('eleventy', () => ({
        generator: process.env.ELEVENTY_VERSION ? `Eleventy v${process.env.ELEVENTY_VERSION}` : 'Eleventy',
    }));
    // Check for base layout and configure accordingly
    const baseLayoutPath = path.join(process.cwd(), 'src/_includes/base.webc');
    if (fs.existsSync(baseLayoutPath)) {
        eleventyConfig.setDataFileBaseName('anglesite');
    }
    // Update config for the actual website files to be in src/ for
    // simpler editing in Anglesite.
    return {
        templateFormats: ['11ty.js', 'webc', 'md', 'html'],
        markdownTemplateEngine: 'webc',
        htmlTemplateEngine: 'webc',
        dir: {
            input: 'src',
            output: '_site',
            includes: '_includes',
            layouts: '_includes',
        },
    };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2R3ay9EZXZlbG9wZXIvZ2l0bGFiLmNvbS9kYXZpZHdrZWl0aC9AZHdrL2FuZ2xlc2l0ZS9hcHAvZWxldmVudHkvLmVsZXZlbnR5LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ3pELE1BQU0sa0JBQWtCLEdBQUcsT0FBTyxDQUFDLDRCQUE0QixDQUFDLENBQUM7QUFDakUsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pCLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUU3Qjs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFVLGNBQWM7SUFDdkMsd0hBQXdIO0lBQ3hILGdHQUFnRztJQUNoRyxtRkFBbUY7SUFDbkYsbUdBQW1HO0lBQ25HLHNFQUFzRTtJQUN0RSxjQUFjLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFNUMsMkRBQTJEO0lBQzNELDZEQUE2RDtJQUM3RCxjQUFjLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFFNUMsOENBQThDO0lBQzlDLGNBQWMsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEVBQUU7UUFDM0MsVUFBVSxFQUFFLHlCQUF5QjtLQUN0QyxDQUFDLENBQUM7SUFFSCxzRUFBc0U7SUFDdEUsY0FBYyxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUM5QyxTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsYUFBYSxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVU7S0FDbkcsQ0FBQyxDQUFDLENBQUM7SUFFSixrREFBa0Q7SUFDbEQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUseUJBQXlCLENBQUMsQ0FBQztJQUMzRSxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztRQUNsQyxjQUFjLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELCtEQUErRDtJQUMvRCxnQ0FBZ0M7SUFDaEMsT0FBTztRQUNMLGVBQWUsRUFBRSxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQztRQUNsRCxzQkFBc0IsRUFBRSxNQUFNO1FBQzlCLGtCQUFrQixFQUFFLE1BQU07UUFDMUIsR0FBRyxFQUFFO1lBQ0gsS0FBSyxFQUFFLEtBQUs7WUFDWixNQUFNLEVBQUUsT0FBTztZQUNmLFFBQVEsRUFBRSxXQUFXO1lBQ3JCLE9BQU8sRUFBRSxXQUFXO1NBQ3JCO0tBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZHdrL0RldmVsb3Blci9naXRsYWIuY29tL2Rhdmlkd2tlaXRoL0Bkd2svYW5nbGVzaXRlL2FwcC9lbGV2ZW50eS8uZWxldmVudHkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYW5nbGVzaXRlRWxldmVudHkgPSByZXF1aXJlKCdAZHdrL2FuZ2xlc2l0ZS0xMXR5Jyk7XG5jb25zdCBFbGV2ZW50eVdlYmNQbHVnaW4gPSByZXF1aXJlKCdAMTF0eS9lbGV2ZW50eS1wbHVnaW4td2ViYycpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuLyoqXG4gKiBFbGV2ZW50eSBjb25maWd1cmF0aW9uIGZ1bmN0aW9uIGZvciBBbmdsZXNpdGUgd2Vic2l0ZXMuXG4gKiBAcGFyYW0gZWxldmVudHlDb25maWcgQ29uZmlndXJhdGlvbiBvYmplY3RcbiAqIEByZXR1cm5zIENvbmZpZ3VyYXRpb24gcmV0dXJuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChlbGV2ZW50eUNvbmZpZykge1xuICAvLyBGSVhNRTogV29ya2Fyb3VuZCBmb3IgYSBrbm93biBpc3N1ZSBpbiBlbGV2ZW50eS1wbHVnaW4td2ViYyAoaHR0cHM6Ly9naXRodWIuY29tLzExdHkvZWxldmVudHktcGx1Z2luLXdlYmMvaXNzdWVzLzg2KS5cbiAgLy8gV2hlbiB1c2luZyBgcGVybWFsaW5rYCBpbiBmcm9udCBtYXR0ZXIsIGVzcGVjaWFsbHkgd2l0aCBkeW5hbWljIHZhbHVlcyBvciBmb3Igbm9uLUhUTUwgZmlsZXMsXG4gIC8vIGBwYWdlLnVybGAgbWF5IG5vdCBiZSBjb3JyZWN0bHkgcG9wdWxhdGVkIG9yIGF2YWlsYWJsZSB0byBvdGhlciBwbHVnaW5zL2ZpbHRlcnMuXG4gIC8vIFRvIGF2b2lkIGJ1aWxkIGVycm9ycyBhbmQgZW5zdXJlIGNvbnNpc3RlbnQgVVJMIGdlbmVyYXRpb24sIGV4cGxpY2l0bHkgZHVwbGljYXRlIHRoZSBgcGVybWFsaW5rYFxuICAvLyB2YWx1ZSBpbiBgcGFnZS51cmxgIHdpdGhpbiB0aGUgZnJvbnQgbWF0dGVyIGZvciBhZmZlY3RlZCB0ZW1wbGF0ZXMuXG4gIGVsZXZlbnR5Q29uZmlnLnNldEZyZWV6ZVJlc2VydmVkRGF0YShmYWxzZSk7XG5cbiAgLy8gQW5nbGVzaXRlIDExdHkgaXMgdGhlIGNvbmZpZ3VyYXRpb24gdGhhdCBBbmdsZXNpdGUgbmVlZHNcbiAgLy8gb2YgYW4gMTF0eSBwcm9qZWN0IGZvciBpdCB0byB3b3JrIHdpdGggdGhlIFVYIG9mIEFuZ2xlc2l0ZVxuICBlbGV2ZW50eUNvbmZpZy5hZGRQbHVnaW4oYW5nbGVzaXRlRWxldmVudHkpO1xuXG4gIC8vIE92ZXJyaWRlIFdlYkMgY29uZmlndXJhdGlvbiBhZnRlciBhbmdsZXNpdGVcbiAgZWxldmVudHlDb25maWcuYWRkUGx1Z2luKEVsZXZlbnR5V2ViY1BsdWdpbiwge1xuICAgIGNvbXBvbmVudHM6ICdzcmMvX2luY2x1ZGVzLyoqLyoud2ViYycsXG4gIH0pO1xuXG4gIC8vIEFkZCBnbG9iYWwgZGF0YSBmdW5jdGlvbnMgdG8gbWFrZSBkYXRhIGFjY2Vzc2libGUgdG8gbnBtIGNvbXBvbmVudHNcbiAgZWxldmVudHlDb25maWcuYWRkR2xvYmFsRGF0YSgnZWxldmVudHknLCAoKSA9PiAoe1xuICAgIGdlbmVyYXRvcjogcHJvY2Vzcy5lbnYuRUxFVkVOVFlfVkVSU0lPTiA/IGBFbGV2ZW50eSB2JHtwcm9jZXNzLmVudi5FTEVWRU5UWV9WRVJTSU9OfWAgOiAnRWxldmVudHknLFxuICB9KSk7XG5cbiAgLy8gQ2hlY2sgZm9yIGJhc2UgbGF5b3V0IGFuZCBjb25maWd1cmUgYWNjb3JkaW5nbHlcbiAgY29uc3QgYmFzZUxheW91dFBhdGggPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3NyYy9faW5jbHVkZXMvYmFzZS53ZWJjJyk7XG4gIGlmIChmcy5leGlzdHNTeW5jKGJhc2VMYXlvdXRQYXRoKSkge1xuICAgIGVsZXZlbnR5Q29uZmlnLnNldERhdGFGaWxlQmFzZU5hbWUoJ2FuZ2xlc2l0ZScpO1xuICB9XG5cbiAgLy8gVXBkYXRlIGNvbmZpZyBmb3IgdGhlIGFjdHVhbCB3ZWJzaXRlIGZpbGVzIHRvIGJlIGluIHNyYy8gZm9yXG4gIC8vIHNpbXBsZXIgZWRpdGluZyBpbiBBbmdsZXNpdGUuXG4gIHJldHVybiB7XG4gICAgdGVtcGxhdGVGb3JtYXRzOiBbJzExdHkuanMnLCAnd2ViYycsICdtZCcsICdodG1sJ10sXG4gICAgbWFya2Rvd25UZW1wbGF0ZUVuZ2luZTogJ3dlYmMnLFxuICAgIGh0bWxUZW1wbGF0ZUVuZ2luZTogJ3dlYmMnLFxuICAgIGRpcjoge1xuICAgICAgaW5wdXQ6ICdzcmMnLFxuICAgICAgb3V0cHV0OiAnX3NpdGUnLFxuICAgICAgaW5jbHVkZXM6ICdfaW5jbHVkZXMnLFxuICAgICAgbGF5b3V0czogJ19pbmNsdWRlcycsXG4gICAgfSxcbiAgfTtcbn07XG4iXSwidmVyc2lvbiI6M30=