2a0bb37a836f48621712385d2f7f6648
"use strict";
/**
 * @file Tests for website creation flow and timing fixes
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock Electron first
jest.mock('electron', () => ({
    app: {
        getPath: jest.fn(() => test_constants_1.TEST_CONSTANTS.PATHS.MOCK_PATH),
    },
    nativeTheme: {
        shouldUseDarkColors: false,
        on: jest.fn(),
    },
    ipcMain: {
        handle: jest.fn(),
        on: jest.fn(),
    },
    BrowserWindow: {
        getAllWindows: jest.fn(() => []),
    },
}));
// Set up mocks
jest.mock('../../app/ui/multi-window-manager', () => ({
    createWebsiteWindow: mockCreateWebsiteWindow,
    loadWebsiteContent: mockLoadWebsiteContent,
}));
jest.mock('../../app/dns/hosts-manager', () => ({
    addLocalDnsResolution: mockAddLocalDnsResolutionWC,
}));
jest.mock('../../app/server/https-proxy', () => ({
    restartHttpsProxy: mockRestartHttpsProxyWC,
}));
// Store class removed - now using DI with StoreService
jest.mock('../../app/utils/website-manager', () => ({
    createWebsiteWithName: jest.fn(() => Promise.resolve(test_constants_1.TEST_CONSTANTS.PATHS.WEBSITE_PATH)),
    getWebsitePath: jest.fn(() => test_constants_1.TEST_CONSTANTS.PATHS.WEBSITE_PATH),
}));
const test_constants_1 = require("../constants/test-constants");
// Mock modules
const mockCreateWebsiteWindow = jest.fn();
const mockLoadWebsiteContent = jest.fn();
const mockAddLocalDnsResolutionWC = jest.fn(() => Promise.resolve());
const mockRestartHttpsProxyWC = jest.fn(() => Promise.resolve(true));
const mockStoreWC = {
    get: jest.fn(() => 'https'),
};
describe('Website Creation Flow', () => {
    beforeAll(() => {
        // Import after mocks are set up
        require('../../app/ipc/handlers');
    });
    beforeEach(() => {
        // Reset all mocks
        jest.clearAllMocks();
        // Set default mock implementations
        mockStoreWC.get.mockReturnValue('https');
        // Server startup now handled internally by multi-window-manager
        mockAddLocalDnsResolutionWC.mockResolvedValue(undefined);
        mockRestartHttpsProxyWC.mockResolvedValue(true);
    });
    describe('Website Creation Timing', () => {
        it('should verify timing order of website creation operations', async () => {
            // This test documents the expected order of operations
            // The actual timing fix was implemented in app/ipc/handlers.ts
            expect(mockCreateWebsiteWindow).toBeDefined();
            // Verify multi-window integration
            expect(mockAddLocalDnsResolutionWC).toBeDefined();
            expect(mockRestartHttpsProxyWC).toBeDefined();
            expect(mockLoadWebsiteContent).toBeDefined();
            // The correct order should be:
            // 1. createWebsiteWindow
            // 2. startWebsiteServer (via per-website-server.ts)
            // 3. addLocalDnsResolution
            // 4. restartHttpsProxy (if HTTPS mode)
            // 5. loadWebsiteContent (AFTER proxy setup)
        });
        it('should load website content AFTER DNS setup in HTTP mode', async () => {
            // Set HTTP mode
            mockStoreWC.get.mockReturnValue('http');
            const callOrder = [];
            mockCreateWebsiteWindow.mockImplementation(() => {
                callOrder.push('createWebsiteWindow');
            });
            // Note: startWebsiteServer is now handled internally by multi-window-manager
            mockAddLocalDnsResolutionWC.mockImplementation(async () => {
                callOrder.push('addLocalDnsResolution');
            });
            mockLoadWebsiteContent.mockImplementation(() => {
                callOrder.push('loadWebsiteContent');
            });
            // In HTTP mode, HTTPS proxy should not be called
            expect(mockRestartHttpsProxyWC).not.toHaveBeenCalled();
        });
        it('should handle HTTPS proxy failure gracefully', async () => {
            // Mock HTTPS proxy failure
            mockRestartHttpsProxyWC.mockResolvedValue(false);
            const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
            // Website loading should still proceed even if HTTPS proxy fails
            expect(mockLoadWebsiteContent).toBeDefined();
            consoleSpy.mockRestore();
        });
    });
    describe('Error Handling', () => {
        it('should handle DNS setup failure', async () => {
            mockAddLocalDnsResolutionWC.mockRejectedValue(new Error('DNS setup failed'));
            // Website creation should handle DNS failures gracefully
            // and still attempt to load content
            expect(mockAddLocalDnsResolutionWC).toBeDefined();
        });
        it('should handle Eleventy server switch failure', async () => {
            // Server failures now handled by per-website-server
            // Should handle server switch failures
            // Verify multi-window integration
        });
    });
    describe('Configuration Handling', () => {
        it('should respect user HTTPS preference', () => {
            mockStoreWC.get.mockReturnValue('https');
            // Should call HTTPS proxy setup when user prefers HTTPS
            expect(mockStoreWC.get).toBeDefined();
        });
        it('should respect user HTTP preference', () => {
            mockStoreWC.get.mockReturnValue('http');
            // Should skip HTTPS proxy setup when user prefers HTTP
            expect(mockStoreWC.get).toBeDefined();
        });
        it('should handle missing HTTPS preference', () => {
            mockStoreWC.get.mockReturnValue('http');
            // Should have a default behavior when preference is not set
            expect(mockStoreWC.get).toBeDefined();
        });
    });
    describe('URL Generation', () => {
        it('should generate correct test domain URLs', () => {
            const websiteName = test_constants_1.TEST_CONSTANTS.WEBSITES.MY_TEST_SITE;
            const expectedUrl = `https://${websiteName}.${test_constants_1.TEST_CONSTANTS.DOMAINS.TEST_DOMAIN}:${test_constants_1.TEST_CONSTANTS.PORTS.DEFAULT_HTTPS}`;
            const expectedHostname = `${websiteName}.${test_constants_1.TEST_CONSTANTS.DOMAINS.TEST_DOMAIN}`;
            // The URLs should follow the pattern website-name.test:8080
            expect(expectedUrl).toBe('https://my-test-site.test:8080');
            expect(expectedHostname).toBe('my-test-site.test');
        });
    });
    describe('Module Integration', () => {
        it('should integrate with all required modules', () => {
            // Verify all mocked modules are being called
            expect(mockCreateWebsiteWindow).toBeDefined();
            expect(mockLoadWebsiteContent).toBeDefined();
            // Verify multi-window integration
            expect(mockAddLocalDnsResolutionWC).toBeDefined();
            expect(mockRestartHttpsProxyWC).toBeDefined();
        });
    });
    describe('Website Opening Integration', () => {
        it('should properly export openWebsiteInNewWindow function', () => {
            // Import the handlers module to check exports
            const handlers = require('../../app/ipc/handlers');
            // Verify that openWebsiteInNewWindow is exported
            expect(handlers.openWebsiteInNewWindow).toBeDefined();
            expect(typeof handlers.openWebsiteInNewWindow).toBe('function');
        });
        it('should handle individual server startup gracefully', async () => {
            // Mock the multi-window manager functions
            const mockStartWebsiteServerAndUpdateWindow = jest.fn(() => Promise.resolve());
            // Test that the function handles both success and failure cases
            mockStartWebsiteServerAndUpdateWindow.mockResolvedValueOnce(undefined);
            // Should not throw when server starts successfully
            await expect(mockStartWebsiteServerAndUpdateWindow()).resolves.toBeUndefined();
            // Test error handling
            mockStartWebsiteServerAndUpdateWindow.mockRejectedValueOnce(new Error('Server failed'));
            // Should handle server failure gracefully
            await expect(mockStartWebsiteServerAndUpdateWindow()).rejects.toThrow('Server failed');
        });
        it('should handle fallback content loading when server fails', () => {
            // Test the fallback mechanism when individual server startup fails
            const mockLoadWebsiteContent = jest.fn();
            // Should call loadWebsiteContent as fallback
            mockLoadWebsiteContent('test-fallback-site');
            expect(mockLoadWebsiteContent).toHaveBeenCalledWith('test-fallback-site');
        });
        it('should validate website directory exists before opening', () => {
            const handlers = require('../../app/ipc/handlers');
            const fs = require('fs');
            // Mock fs.existsSync to return false (directory doesn't exist)
            const originalExistsSync = fs.existsSync;
            fs.existsSync = jest.fn().mockReturnValue(false);
            try {
                // Should throw error about missing directory
                expect(handlers.openWebsiteInNewWindow).toBeDefined();
                // Note: Actual validation happens at runtime, this tests the interface exists
                expect(typeof handlers.openWebsiteInNewWindow).toBe('function');
            }
            finally {
                // Restore original function
                fs.existsSync = originalExistsSync;
            }
        });
        it('should provide error context for debugging', () => {
            // Test that error messages include helpful context
            const testError = new Error('Test error message');
            const errorWithContext = `Failed to open website "test-site": ${testError.message}`;
            expect(errorWithContext).toContain('Failed to open website');
            expect(errorWithContext).toContain('test-site');
            expect(errorWithContext).toContain('Test error message');
        });
        it('should handle cleanup of partially created websites', () => {
            const fs = require('fs');
            // Test cleanup function interface (actual cleanup happens in runtime)
            expect(typeof fs.rmSync).toBe('function');
            // Verify rmSync can be called with correct parameters
            const mockRmSync = jest.fn();
            fs.rmSync = mockRmSync;
            // Simulate cleanup call
            fs.rmSync('/test/path', { recursive: true, force: true });
            expect(mockRmSync).toHaveBeenCalledWith('/test/path', { recursive: true, force: true });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,