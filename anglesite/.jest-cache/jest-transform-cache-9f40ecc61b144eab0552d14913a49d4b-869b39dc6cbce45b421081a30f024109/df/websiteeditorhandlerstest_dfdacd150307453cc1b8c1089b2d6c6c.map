{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/ipc/website-editor-handlers.test.ts","mappings":"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","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/ipc/website-editor-handlers.test.ts"],"sourcesContent":["/**\n * @file Test website editor IPC handlers\n */\n\nimport { ipcMain, BrowserWindow, IpcMainEvent } from 'electron';\nimport { setupWebsiteHandlers } from '../../app/ipc/website';\nimport { setupFileHandlers } from '../../app/ipc/file';\nimport { setupPreviewHandlers } from '../../app/ipc/preview';\nimport { setupExportHandlers } from '../../app/ipc/export';\n\n// Mock electron app\njest.mock('electron', () => ({\n  ipcMain: {\n    emit: jest.fn(),\n    removeAllListeners: jest.fn(),\n    on: jest.fn(),\n    handle: jest.fn(),\n  },\n  BrowserWindow: {\n    fromWebContents: jest.fn(),\n  },\n  app: {\n    getPath: jest.fn(() => '/mock/user/data'),\n  },\n  nativeTheme: {\n    themeSource: 'system',\n    shouldUseDarkColors: false,\n    on: jest.fn(),\n  },\n  dialog: {\n    showMessageBox: jest.fn(),\n    showSaveDialog: jest.fn(),\n  },\n}));\n\n// Mock the multi-window-manager module\njest.mock('../../app/ui/multi-window-manager', () => ({\n  showWebsitePreview: jest.fn(),\n  hideWebsitePreview: jest.fn(),\n  getAllWebsiteWindows: jest.fn(() => new Map()),\n  getWebsiteServer: jest.fn(),\n}));\n\n// Type definitions for IPC handlers\ntype HandleHandler = (event: IpcMainEvent, ...args: unknown[]) => unknown;\ntype OnHandler = (event: IpcMainEvent, ...args: unknown[]) => void;\n\ndescribe('Website Editor IPC Handlers', () => {\n  let mockWindow: Partial<BrowserWindow>;\n  let mockEvent: Partial<IpcMainEvent>;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    mockWindow = {\n      isDestroyed: jest.fn(() => false),\n    };\n\n    mockEvent = {\n      sender: {\n        send: jest.fn(),\n      } as Partial<import('electron').WebContents>,\n    } as Partial<IpcMainEvent>;\n\n    // Reset ipcMain mocks\n    (ipcMain.on as jest.Mock).mockClear();\n    (ipcMain.handle as jest.Mock).mockClear();\n\n    // Set up ipcMain.on to actually register listeners for testing\n    const listeners = new Map<string, (event: IpcMainEvent) => void>();\n    (ipcMain.on as jest.Mock).mockImplementation((channel: string, handler: (event: IpcMainEvent) => void) => {\n      listeners.set(channel, handler);\n    });\n\n    // Mock ipcMain.emit to call the registered handler\n    (ipcMain.emit as jest.Mock).mockImplementation((channel: string, event: IpcMainEvent) => {\n      const handler = listeners.get(channel);\n      if (handler) {\n        return handler(event);\n      }\n    });\n\n    // Mock BrowserWindow.fromWebContents\n    (BrowserWindow.fromWebContents as jest.Mock).mockReturnValue(mockWindow);\n\n    setupWebsiteHandlers();\n    setupFileHandlers();\n    setupPreviewHandlers();\n    setupExportHandlers();\n  });\n\n  afterEach(() => {\n    ipcMain.removeAllListeners('website-editor-show-preview');\n    ipcMain.removeAllListeners('website-editor-show-edit');\n  });\n\n  describe('website-editor-show-preview', () => {\n    it('should call showWebsitePreview when window and website name are found', async () => {\n      const { showWebsitePreview, getAllWebsiteWindows } = require('../../app/ui/multi-window-manager');\n\n      // Set up the mock so that the window appears in the website windows map\n      const mockWebsiteWindows = new Map([['test-website', { window: mockWindow }]]);\n      getAllWebsiteWindows.mockReturnValue(mockWebsiteWindows);\n\n      // Make sure BrowserWindow.fromWebContents returns our mock window\n      (BrowserWindow.fromWebContents as jest.Mock).mockReturnValue(mockWindow);\n\n      // Emit the event\n      ipcMain.emit('website-editor-show-preview', mockEvent);\n\n      // Wait for async import to complete\n      await new Promise((resolve) => setTimeout(resolve, 50));\n\n      expect(showWebsitePreview).toHaveBeenCalledWith('test-website');\n    });\n\n    it('should not call showWebsitePreview when window not found', async () => {\n      const { showWebsitePreview } = require('../../app/ui/multi-window-manager');\n      (BrowserWindow.fromWebContents as jest.Mock).mockReturnValue(null);\n\n      ipcMain.emit('website-editor-show-preview', mockEvent);\n\n      await new Promise((resolve) => setTimeout(resolve, 10));\n\n      expect(showWebsitePreview).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('website-editor-show-edit', () => {\n    it('should call hideWebsitePreview when window and website name are found', async () => {\n      const { hideWebsitePreview, getAllWebsiteWindows } = require('../../app/ui/multi-window-manager');\n\n      // Set up the mock so that the window appears in the website windows map\n      const mockWebsiteWindows = new Map([['test-website', { window: mockWindow }]]);\n      getAllWebsiteWindows.mockReturnValue(mockWebsiteWindows);\n\n      // Make sure BrowserWindow.fromWebContents returns our mock window\n      (BrowserWindow.fromWebContents as jest.Mock).mockReturnValue(mockWindow);\n\n      ipcMain.emit('website-editor-show-edit', mockEvent);\n\n      await new Promise((resolve) => setTimeout(resolve, 50));\n\n      expect(hideWebsitePreview).toHaveBeenCalledWith('test-website');\n    });\n\n    it('should not call hideWebsitePreview when window not found', async () => {\n      const { hideWebsitePreview } = require('../../app/ui/multi-window-manager');\n      (BrowserWindow.fromWebContents as jest.Mock).mockReturnValue(null);\n\n      ipcMain.emit('website-editor-show-edit', mockEvent);\n\n      await new Promise((resolve) => setTimeout(resolve, 10));\n\n      expect(hideWebsitePreview).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('get-file-url', () => {\n    it('should return file URL when website server and URL resolver exist', async () => {\n      const { getWebsiteServer } = require('../../app/ui/multi-window-manager');\n      const mockUrlResolver = {\n        getUrlForFile: jest.fn(() => '/test-file.html'),\n      };\n      const mockWebsiteServer = {\n        urlResolver: mockUrlResolver,\n      };\n\n      getWebsiteServer.mockReturnValue(mockWebsiteServer);\n\n      // Set up ipcMain.handle to actually register handlers\n      const handleHandlers = new Map<string, HandleHandler>();\n      (ipcMain.handle as jest.Mock).mockImplementation((channel: string, handler: HandleHandler) => {\n        handleHandlers.set(channel, handler);\n      });\n\n      setupWebsiteHandlers();\n      setupFileHandlers();\n      setupPreviewHandlers();\n      setupExportHandlers();\n\n      const handler = handleHandlers.get('get-file-url');\n      expect(handler).toBeDefined();\n\n      if (handler) {\n        const result = await handler(mockEvent as IpcMainEvent, 'test-website', '/path/to/file.md');\n        expect(result).toBe('/test-file.html');\n        expect(getWebsiteServer).toHaveBeenCalledWith('test-website');\n        expect(mockUrlResolver.getUrlForFile).toHaveBeenCalledWith('/path/to/file.md');\n      }\n    });\n\n    it('should return null when website server does not exist', async () => {\n      const { getWebsiteServer } = require('../../app/ui/multi-window-manager');\n      getWebsiteServer.mockReturnValue(null);\n\n      const handleHandlers = new Map<string, HandleHandler>();\n      (ipcMain.handle as jest.Mock).mockImplementation((channel: string, handler: HandleHandler) => {\n        handleHandlers.set(channel, handler);\n      });\n\n      setupWebsiteHandlers();\n      setupFileHandlers();\n      setupPreviewHandlers();\n      setupExportHandlers();\n\n      const handler = handleHandlers.get('get-file-url');\n      if (handler) {\n        const result = await handler(mockEvent as IpcMainEvent, 'nonexistent-website', '/path/to/file.md');\n        expect(result).toBeNull();\n      }\n    });\n  });\n\n  describe('get-website-server-url', () => {\n    it('should return server URL when website window exists', async () => {\n      const { getAllWebsiteWindows } = require('../../app/ui/multi-window-manager');\n      const mockWebsiteWindows = new Map([\n        [\n          'test-website',\n          {\n            window: mockWindow,\n            serverUrl: 'http://localhost:8080',\n          },\n        ],\n      ]);\n      getAllWebsiteWindows.mockReturnValue(mockWebsiteWindows);\n\n      const handleHandlers = new Map<string, HandleHandler>();\n      (ipcMain.handle as jest.Mock).mockImplementation((channel: string, handler: HandleHandler) => {\n        handleHandlers.set(channel, handler);\n      });\n\n      setupWebsiteHandlers();\n      setupFileHandlers();\n      setupPreviewHandlers();\n      setupExportHandlers();\n\n      const handler = handleHandlers.get('get-website-server-url');\n      if (handler) {\n        const result = await handler(mockEvent as IpcMainEvent, 'test-website');\n        expect(result).toBe('http://localhost:8080');\n      }\n    });\n\n    it('should return null when website window does not exist', async () => {\n      const { getAllWebsiteWindows } = require('../../app/ui/multi-window-manager');\n      getAllWebsiteWindows.mockReturnValue(new Map());\n\n      const handleHandlers = new Map<string, HandleHandler>();\n      (ipcMain.handle as jest.Mock).mockImplementation((channel: string, handler: HandleHandler) => {\n        handleHandlers.set(channel, handler);\n      });\n\n      setupWebsiteHandlers();\n      setupFileHandlers();\n      setupPreviewHandlers();\n      setupExportHandlers();\n\n      const handler = handleHandlers.get('get-website-server-url');\n      if (handler) {\n        const result = await handler(mockEvent as IpcMainEvent, 'nonexistent-website');\n        expect(result).toBeNull();\n      }\n    });\n  });\n\n  describe('load-file-preview', () => {\n    it('should load URL in WebContentsView when website window exists', async () => {\n      const { getAllWebsiteWindows } = require('../../app/ui/multi-window-manager');\n      const mockWebContents = {\n        loadURL: jest.fn(),\n        isDestroyed: jest.fn(() => false),\n      };\n      const mockWebContentsView = {\n        webContents: mockWebContents,\n      };\n      const mockWebsiteWindows = new Map([\n        [\n          'test-website',\n          {\n            window: mockWindow,\n            webContentsView: mockWebContentsView,\n          },\n        ],\n      ]);\n      getAllWebsiteWindows.mockReturnValue(mockWebsiteWindows);\n\n      const onHandlers = new Map<string, OnHandler>();\n      (ipcMain.on as jest.Mock).mockImplementation((channel: string, handler: OnHandler) => {\n        onHandlers.set(channel, handler);\n      });\n\n      setupWebsiteHandlers();\n      setupFileHandlers();\n      setupPreviewHandlers();\n      setupExportHandlers();\n\n      const handler = onHandlers.get('load-file-preview');\n      if (handler) {\n        await handler(mockEvent as IpcMainEvent, 'test-website', 'http://localhost:8080/test.html');\n        expect(mockWebContents.loadURL).toHaveBeenCalledWith('http://localhost:8080/test.html');\n      }\n    });\n\n    it('should handle missing website window gracefully', async () => {\n      const { getAllWebsiteWindows } = require('../../app/ui/multi-window-manager');\n      getAllWebsiteWindows.mockReturnValue(new Map());\n\n      const onHandlers = new Map<string, OnHandler>();\n      (ipcMain.on as jest.Mock).mockImplementation((channel: string, handler: OnHandler) => {\n        onHandlers.set(channel, handler);\n      });\n\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n\n      setupWebsiteHandlers();\n      setupFileHandlers();\n      setupPreviewHandlers();\n      setupExportHandlers();\n\n      const handler = onHandlers.get('load-file-preview');\n      if (handler) {\n        await handler(mockEvent as IpcMainEvent, 'nonexistent-website', 'http://localhost:8080/test.html');\n      }\n\n      consoleSpy.mockRestore();\n    });\n  });\n});\n"],"version":3}