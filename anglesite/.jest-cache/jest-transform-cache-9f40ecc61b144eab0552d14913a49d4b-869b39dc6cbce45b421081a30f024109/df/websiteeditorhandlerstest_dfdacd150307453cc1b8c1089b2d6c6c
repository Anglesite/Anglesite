fb5e12cde4eba884c18a74d095ff1527
"use strict";
/**
 * @file Test website editor IPC handlers
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock electron app
jest.mock('electron', () => ({
    ipcMain: {
        emit: jest.fn(),
        removeAllListeners: jest.fn(),
        on: jest.fn(),
        handle: jest.fn(),
    },
    BrowserWindow: {
        fromWebContents: jest.fn(),
    },
    app: {
        getPath: jest.fn(() => '/mock/user/data'),
    },
    nativeTheme: {
        themeSource: 'system',
        shouldUseDarkColors: false,
        on: jest.fn(),
    },
    dialog: {
        showMessageBox: jest.fn(),
        showSaveDialog: jest.fn(),
    },
}));
// Mock the multi-window-manager module
jest.mock('../../app/ui/multi-window-manager', () => ({
    showWebsitePreview: jest.fn(),
    hideWebsitePreview: jest.fn(),
    getAllWebsiteWindows: jest.fn(() => new Map()),
    getWebsiteServer: jest.fn(),
}));
const electron_1 = require("electron");
const website_1 = require("../../app/ipc/website");
const file_1 = require("../../app/ipc/file");
const preview_1 = require("../../app/ipc/preview");
const export_1 = require("../../app/ipc/export");
describe('Website Editor IPC Handlers', () => {
    let mockWindow;
    let mockEvent;
    beforeEach(() => {
        jest.clearAllMocks();
        mockWindow = {
            isDestroyed: jest.fn(() => false),
        };
        mockEvent = {
            sender: {
                send: jest.fn(),
            },
        };
        // Reset ipcMain mocks
        electron_1.ipcMain.on.mockClear();
        electron_1.ipcMain.handle.mockClear();
        // Set up ipcMain.on to actually register listeners for testing
        const listeners = new Map();
        electron_1.ipcMain.on.mockImplementation((channel, handler) => {
            listeners.set(channel, handler);
        });
        // Mock ipcMain.emit to call the registered handler
        electron_1.ipcMain.emit.mockImplementation((channel, event) => {
            const handler = listeners.get(channel);
            if (handler) {
                return handler(event);
            }
        });
        // Mock BrowserWindow.fromWebContents
        electron_1.BrowserWindow.fromWebContents.mockReturnValue(mockWindow);
        (0, website_1.setupWebsiteHandlers)();
        (0, file_1.setupFileHandlers)();
        (0, preview_1.setupPreviewHandlers)();
        (0, export_1.setupExportHandlers)();
    });
    afterEach(() => {
        electron_1.ipcMain.removeAllListeners('website-editor-show-preview');
        electron_1.ipcMain.removeAllListeners('website-editor-show-edit');
    });
    describe('website-editor-show-preview', () => {
        it('should call showWebsitePreview when window and website name are found', async () => {
            const { showWebsitePreview, getAllWebsiteWindows } = require('../../app/ui/multi-window-manager');
            // Set up the mock so that the window appears in the website windows map
            const mockWebsiteWindows = new Map([['test-website', { window: mockWindow }]]);
            getAllWebsiteWindows.mockReturnValue(mockWebsiteWindows);
            // Make sure BrowserWindow.fromWebContents returns our mock window
            electron_1.BrowserWindow.fromWebContents.mockReturnValue(mockWindow);
            // Emit the event
            electron_1.ipcMain.emit('website-editor-show-preview', mockEvent);
            // Wait for async import to complete
            await new Promise((resolve) => setTimeout(resolve, 50));
            expect(showWebsitePreview).toHaveBeenCalledWith('test-website');
        });
        it('should not call showWebsitePreview when window not found', async () => {
            const { showWebsitePreview } = require('../../app/ui/multi-window-manager');
            electron_1.BrowserWindow.fromWebContents.mockReturnValue(null);
            electron_1.ipcMain.emit('website-editor-show-preview', mockEvent);
            await new Promise((resolve) => setTimeout(resolve, 10));
            expect(showWebsitePreview).not.toHaveBeenCalled();
        });
    });
    describe('website-editor-show-edit', () => {
        it('should call hideWebsitePreview when window and website name are found', async () => {
            const { hideWebsitePreview, getAllWebsiteWindows } = require('../../app/ui/multi-window-manager');
            // Set up the mock so that the window appears in the website windows map
            const mockWebsiteWindows = new Map([['test-website', { window: mockWindow }]]);
            getAllWebsiteWindows.mockReturnValue(mockWebsiteWindows);
            // Make sure BrowserWindow.fromWebContents returns our mock window
            electron_1.BrowserWindow.fromWebContents.mockReturnValue(mockWindow);
            electron_1.ipcMain.emit('website-editor-show-edit', mockEvent);
            await new Promise((resolve) => setTimeout(resolve, 50));
            expect(hideWebsitePreview).toHaveBeenCalledWith('test-website');
        });
        it('should not call hideWebsitePreview when window not found', async () => {
            const { hideWebsitePreview } = require('../../app/ui/multi-window-manager');
            electron_1.BrowserWindow.fromWebContents.mockReturnValue(null);
            electron_1.ipcMain.emit('website-editor-show-edit', mockEvent);
            await new Promise((resolve) => setTimeout(resolve, 10));
            expect(hideWebsitePreview).not.toHaveBeenCalled();
        });
    });
    describe('get-file-url', () => {
        it('should return file URL when website server and URL resolver exist', async () => {
            const { getWebsiteServer } = require('../../app/ui/multi-window-manager');
            const mockUrlResolver = {
                getUrlForFile: jest.fn(() => '/test-file.html'),
            };
            const mockWebsiteServer = {
                urlResolver: mockUrlResolver,
            };
            getWebsiteServer.mockReturnValue(mockWebsiteServer);
            // Set up ipcMain.handle to actually register handlers
            const handleHandlers = new Map();
            electron_1.ipcMain.handle.mockImplementation((channel, handler) => {
                handleHandlers.set(channel, handler);
            });
            (0, website_1.setupWebsiteHandlers)();
            (0, file_1.setupFileHandlers)();
            (0, preview_1.setupPreviewHandlers)();
            (0, export_1.setupExportHandlers)();
            const handler = handleHandlers.get('get-file-url');
            expect(handler).toBeDefined();
            if (handler) {
                const result = await handler(mockEvent, 'test-website', '/path/to/file.md');
                expect(result).toBe('/test-file.html');
                expect(getWebsiteServer).toHaveBeenCalledWith('test-website');
                expect(mockUrlResolver.getUrlForFile).toHaveBeenCalledWith('/path/to/file.md');
            }
        });
        it('should return null when website server does not exist', async () => {
            const { getWebsiteServer } = require('../../app/ui/multi-window-manager');
            getWebsiteServer.mockReturnValue(null);
            const handleHandlers = new Map();
            electron_1.ipcMain.handle.mockImplementation((channel, handler) => {
                handleHandlers.set(channel, handler);
            });
            (0, website_1.setupWebsiteHandlers)();
            (0, file_1.setupFileHandlers)();
            (0, preview_1.setupPreviewHandlers)();
            (0, export_1.setupExportHandlers)();
            const handler = handleHandlers.get('get-file-url');
            if (handler) {
                const result = await handler(mockEvent, 'nonexistent-website', '/path/to/file.md');
                expect(result).toBeNull();
            }
        });
    });
    describe('get-website-server-url', () => {
        it('should return server URL when website window exists', async () => {
            const { getAllWebsiteWindows } = require('../../app/ui/multi-window-manager');
            const mockWebsiteWindows = new Map([
                [
                    'test-website',
                    {
                        window: mockWindow,
                        serverUrl: 'http://localhost:8080',
                    },
                ],
            ]);
            getAllWebsiteWindows.mockReturnValue(mockWebsiteWindows);
            const handleHandlers = new Map();
            electron_1.ipcMain.handle.mockImplementation((channel, handler) => {
                handleHandlers.set(channel, handler);
            });
            (0, website_1.setupWebsiteHandlers)();
            (0, file_1.setupFileHandlers)();
            (0, preview_1.setupPreviewHandlers)();
            (0, export_1.setupExportHandlers)();
            const handler = handleHandlers.get('get-website-server-url');
            if (handler) {
                const result = await handler(mockEvent, 'test-website');
                expect(result).toBe('http://localhost:8080');
            }
        });
        it('should return null when website window does not exist', async () => {
            const { getAllWebsiteWindows } = require('../../app/ui/multi-window-manager');
            getAllWebsiteWindows.mockReturnValue(new Map());
            const handleHandlers = new Map();
            electron_1.ipcMain.handle.mockImplementation((channel, handler) => {
                handleHandlers.set(channel, handler);
            });
            (0, website_1.setupWebsiteHandlers)();
            (0, file_1.setupFileHandlers)();
            (0, preview_1.setupPreviewHandlers)();
            (0, export_1.setupExportHandlers)();
            const handler = handleHandlers.get('get-website-server-url');
            if (handler) {
                const result = await handler(mockEvent, 'nonexistent-website');
                expect(result).toBeNull();
            }
        });
    });
    describe('load-file-preview', () => {
        it('should load URL in WebContentsView when website window exists', async () => {
            const { getAllWebsiteWindows } = require('../../app/ui/multi-window-manager');
            const mockWebContents = {
                loadURL: jest.fn(),
                isDestroyed: jest.fn(() => false),
            };
            const mockWebContentsView = {
                webContents: mockWebContents,
            };
            const mockWebsiteWindows = new Map([
                [
                    'test-website',
                    {
                        window: mockWindow,
                        webContentsView: mockWebContentsView,
                    },
                ],
            ]);
            getAllWebsiteWindows.mockReturnValue(mockWebsiteWindows);
            const onHandlers = new Map();
            electron_1.ipcMain.on.mockImplementation((channel, handler) => {
                onHandlers.set(channel, handler);
            });
            (0, website_1.setupWebsiteHandlers)();
            (0, file_1.setupFileHandlers)();
            (0, preview_1.setupPreviewHandlers)();
            (0, export_1.setupExportHandlers)();
            const handler = onHandlers.get('load-file-preview');
            if (handler) {
                await handler(mockEvent, 'test-website', 'http://localhost:8080/test.html');
                expect(mockWebContents.loadURL).toHaveBeenCalledWith('http://localhost:8080/test.html');
            }
        });
        it('should handle missing website window gracefully', async () => {
            const { getAllWebsiteWindows } = require('../../app/ui/multi-window-manager');
            getAllWebsiteWindows.mockReturnValue(new Map());
            const onHandlers = new Map();
            electron_1.ipcMain.on.mockImplementation((channel, handler) => {
                onHandlers.set(channel, handler);
            });
            const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => { });
            (0, website_1.setupWebsiteHandlers)();
            (0, file_1.setupFileHandlers)();
            (0, preview_1.setupPreviewHandlers)();
            (0, export_1.setupExportHandlers)();
            const handler = onHandlers.get('load-file-preview');
            if (handler) {
                await handler(mockEvent, 'nonexistent-website', 'http://localhost:8080/test.html');
            }
            consoleSpy.mockRestore();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,