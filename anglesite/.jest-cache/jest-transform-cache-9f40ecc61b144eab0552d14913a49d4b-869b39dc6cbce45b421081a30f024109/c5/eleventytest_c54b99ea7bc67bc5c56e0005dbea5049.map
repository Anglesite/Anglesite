{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/eleventy.test.ts","mappings":"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","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/eleventy.test.ts"],"sourcesContent":["/**\n * @file Tests for the Eleventy configuration.\n */\n\n// Mock the dependencies that .eleventy.js requires\njest.mock('@11ty/eleventy-plugin-webc', () => ({}));\njest.mock('@dwk/anglesite-11ty', () => jest.fn(() => ({ name: '@dwk/anglesite-11ty' })));\njest.mock('fs', () => ({\n  existsSync: jest.fn((path: string) => {\n    // Mock that the base layout exists\n    return path.includes('base.webc');\n  }),\n}));\njest.mock('path', () => ({\n  join: jest.fn((...args: string[]) => args.join('/')),\n}));\n\n// Now require the module\nconst eleventyConfig = require('../app/eleventy/.eleventy.js');\n\n/**\n * Describes the Eleventy configuration tests.\n */\ndescribe('Eleventy Configuration', () => {\n  let mockConfig: {\n    addBundle: jest.Mock;\n    addPlugin: jest.Mock;\n    setDataFileBaseName: jest.Mock;\n    setFreezeReservedData: jest.Mock;\n    addGlobalData: jest.Mock;\n  };\n  let consoleLogSpy: jest.SpyInstance;\n  let consoleErrorSpy: jest.SpyInstance;\n\n  beforeEach(() => {\n    // Mock console methods to prevent noise in test output\n    consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();\n    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n\n    // Create a mock Eleventy config object with all required methods\n    mockConfig = {\n      addBundle: jest.fn(),\n      addPlugin: jest.fn(),\n      setDataFileBaseName: jest.fn(),\n      setFreezeReservedData: jest.fn(),\n      addGlobalData: jest.fn(),\n    };\n  });\n\n  afterEach(() => {\n    consoleLogSpy.mockRestore();\n    consoleErrorSpy.mockRestore();\n  });\n\n  it('should configure plugins correctly', () => {\n    eleventyConfig(mockConfig);\n\n    expect(mockConfig.addPlugin).toHaveBeenCalledTimes(2);\n    expect(mockConfig.setFreezeReservedData).toHaveBeenCalledWith(false);\n  });\n\n  it('should add the anglesite-11ty plugin', () => {\n    const anglesitePlugin = require('@dwk/anglesite-11ty');\n    eleventyConfig(mockConfig);\n\n    expect(mockConfig.addPlugin).toHaveBeenCalledWith(anglesitePlugin);\n  });\n\n  it('should add WebC plugin with correct component paths', () => {\n    eleventyConfig(mockConfig);\n\n    // Check that WebC plugin was added (it's the second call to addPlugin)\n    expect(mockConfig.addPlugin).toHaveBeenCalledTimes(2);\n\n    // Find the WebC plugin call (not the anglesite plugin)\n    const webCCall = mockConfig.addPlugin.mock.calls.find(\n      (call: unknown[]) => call[1] && typeof call[1] === 'object' && call[1] !== null && 'components' in call[1]\n    );\n\n    expect(webCCall).toBeDefined();\n    expect(webCCall?.[1]).toEqual({\n      components: 'src/_includes/**/*.webc',\n    });\n  });\n\n  it('should set data file base name to anglesite when base layout exists', () => {\n    const mockFs = require('fs');\n    mockFs.existsSync.mockReturnValue(true);\n\n    eleventyConfig(mockConfig);\n\n    expect(mockConfig.setDataFileBaseName).toHaveBeenCalledWith('anglesite');\n  });\n\n  it('should return correct configuration object', () => {\n    const config = eleventyConfig(mockConfig);\n\n    expect(config).toEqual({\n      templateFormats: ['11ty.js', 'webc', 'md', 'html'],\n      markdownTemplateEngine: 'webc',\n      htmlTemplateEngine: 'webc',\n      dir: {\n        input: 'src',\n        output: '_site',\n        includes: '_includes',\n        layouts: '_includes',\n      },\n    });\n  });\n\n  it('should define correct directory structure', () => {\n    const config = eleventyConfig(mockConfig);\n\n    expect(config.dir).toBeDefined();\n    expect(config.dir.includes).toBe('_includes');\n    expect(config.dir.layouts).toBe('_includes');\n    expect(config.dir.input).toBe('src');\n    expect(config.dir.output).toBe('_site');\n  });\n\n  it('should configure WebC as the template engine for markdown and HTML', () => {\n    const config = eleventyConfig(mockConfig);\n\n    expect(config.markdownTemplateEngine).toBe('webc');\n    expect(config.htmlTemplateEngine).toBe('webc');\n  });\n\n  it('should support the correct template formats', () => {\n    const config = eleventyConfig(mockConfig);\n\n    expect(config.templateFormats).toContain('11ty.js');\n    expect(config.templateFormats).toContain('webc');\n    expect(config.templateFormats).toContain('md');\n    expect(config.templateFormats).toContain('html');\n    expect(config.templateFormats).toHaveLength(4);\n  });\n});\n"],"version":3}