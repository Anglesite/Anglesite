{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/config/eslint-config.test.ts","mappings":"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","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/config/eslint-config.test.ts"],"sourcesContent":["/**\n * @file Tests for ESLint configuration, especially JavaScript mock file support\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ninterface ESLintConfigItem {\n  files?: string[];\n  languageOptions?: {\n    globals?: Record<string, unknown>;\n  };\n}\n\ndescribe('ESLint Configuration', () => {\n  let eslintConfig: ESLintConfigItem[];\n\n  beforeAll(() => {\n    // Load the ESLint configuration\n    // Use require.resolve to get the actual path and delete from cache\n    delete require.cache[require.resolve('../../eslint.config.cjs')];\n    eslintConfig = require('../../eslint.config.cjs');\n  });\n\n  it('should have configuration for JavaScript test files', () => {\n    expect(Array.isArray(eslintConfig)).toBe(true);\n\n    // Find the configuration for JavaScript test files\n    const jsTestConfig = eslintConfig.find((config) => config.files && config.files.includes('test/**/*.js'));\n\n    expect(jsTestConfig).toBeDefined();\n    expect(jsTestConfig?.languageOptions).toBeDefined();\n  });\n\n  it('should include Jest globals for JavaScript test files', () => {\n    const jsTestConfig = eslintConfig.find((config) => config.files && config.files.includes('test/**/*.js'));\n\n    expect(jsTestConfig?.languageOptions?.globals).toBeDefined();\n    expect(jsTestConfig?.languageOptions?.globals).toHaveProperty('jest');\n    expect(jsTestConfig?.languageOptions?.globals).toHaveProperty('describe');\n    expect(jsTestConfig?.languageOptions?.globals).toHaveProperty('it');\n    expect(jsTestConfig?.languageOptions?.globals).toHaveProperty('expect');\n  });\n\n  it('should have proper configuration for TypeScript test files', () => {\n    const tsTestConfig = eslintConfig.find((config) => config.files && config.files.includes('test/**/*.ts'));\n\n    expect(tsTestConfig).toBeDefined();\n    expect(tsTestConfig?.languageOptions?.globals).toHaveProperty('jest');\n  });\n\n  it('should validate that mock files exist and follow naming convention', () => {\n    const mockDir = path.resolve(process.cwd(), 'test/mocks/__mocks__');\n    expect(fs.existsSync(mockDir)).toBe(true);\n\n    const mockFiles = fs.readdirSync(mockDir);\n    expect(mockFiles.length).toBeGreaterThan(0);\n\n    // Check that mock files are JavaScript files\n    const jsFiles = mockFiles.filter((file) => file.endsWith('.js'));\n    expect(jsFiles.length).toBeGreaterThan(0);\n\n    // Verify specific mock files exist\n    expect(mockFiles).toContain('bagit-fs.js');\n    expect(mockFiles).toContain('eleventy.js');\n    expect(mockFiles).toContain('eleventy-dev-server.js');\n  });\n\n  it('should allow mock files to use Jest globals without errors', () => {\n    const jestMockFiles = ['test/mocks/__mocks__/bagit-fs.js', 'test/mocks/__mocks__/eleventy-dev-server.js'];\n\n    const classBasedMockFiles = ['test/mocks/__mocks__/eleventy.js'];\n\n    // Check files that use jest.fn\n    jestMockFiles.forEach((filePath) => {\n      const fullPath = path.resolve(process.cwd(), filePath);\n      expect(fs.existsSync(fullPath)).toBe(true);\n\n      const content = fs.readFileSync(fullPath, 'utf8');\n      // These mocks use custom jestFn instead of jest.fn\n      expect(content.includes('jestFn') || content.includes('jest.fn')).toBe(true);\n    });\n\n    // Check class-based mocks that don't necessarily use jest.fn\n    classBasedMockFiles.forEach((filePath) => {\n      const fullPath = path.resolve(process.cwd(), filePath);\n      expect(fs.existsSync(fullPath)).toBe(true);\n\n      const content = fs.readFileSync(fullPath, 'utf8');\n      expect(content.includes('class Mock')).toBe(true);\n    });\n  });\n});\n"],"version":3}