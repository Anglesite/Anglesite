e3c51429e604abf272fc968f0614b3ec
"use strict";
/**
 * @file Simplified tests for menu functionality
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('electron', () => ({
    Menu: mockMenu,
    BrowserWindow: mockBrowserWindow,
    app: mockApp,
    shell: { openExternal: jest.fn() },
    clipboard: { writeText: jest.fn() },
}));
// Mock dependencies
jest.mock('../../app/ui/multi-window-manager', () => ({
    getHelpWindow: jest.fn(),
    getAllWebsiteWindows: jest.fn(() => new Map()),
    createHelpWindow: jest.fn(),
    isWebsiteEditorFocused: jest.fn(),
}));
jest.mock('../../app/ui/window-manager', () => ({
    openSettingsWindow: jest.fn(),
    openWebsiteSelectionWindow: jest.fn(),
    getNativeInput: jest.fn(),
}));
jest.mock('../../app/ipc/handlers', () => ({
    exportSiteHandler: jest.fn(),
    openWebsiteInNewWindow: jest.fn(),
}));
jest.mock('../../app/utils/website-manager', () => ({
    createWebsiteWithName: jest.fn(),
    validateWebsiteName: jest.fn(),
}));
// Mock electron modules
const mockBrowserWindow = {
    getFocusedWindow: jest.fn(),
};
const mockMenu = {
    buildFromTemplate: jest.fn(),
    setApplicationMenu: jest.fn(),
};
const mockApp = {
    getPath: jest.fn(() => '/mock/user/data'),
};
const menu = __importStar(require("../../app/ui/menu"));
describe('Menu', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    describe('updateApplicationMenu', () => {
        it('should build and set application menu', () => {
            const mockMenuInstance = { items: [] };
            mockMenu.buildFromTemplate.mockReturnValue(mockMenuInstance);
            menu.updateApplicationMenu();
            expect(mockMenu.buildFromTemplate).toHaveBeenCalledWith(expect.any(Array));
            expect(mockMenu.setApplicationMenu).toHaveBeenCalledWith(mockMenuInstance);
        });
    });
    describe('createApplicationMenu', () => {
        it('should create a menu template', () => {
            const mockMenuInstance = { items: [] };
            mockMenu.buildFromTemplate.mockReturnValue(mockMenuInstance);
            const result = menu.createApplicationMenu();
            expect(mockMenu.buildFromTemplate).toHaveBeenCalledWith(expect.any(Array));
            expect(result).toBe(mockMenuInstance);
        });
    });
    describe('isWebsiteWindowFocused', () => {
        it('should return false when no window is focused', () => {
            mockBrowserWindow.getFocusedWindow.mockReturnValue(null);
            const { isWebsiteEditorFocused } = require('../../app/ui/multi-window-manager');
            isWebsiteEditorFocused.mockReturnValue(false);
            // Since isWebsiteWindowFocused is not exported, we test it indirectly via createApplicationMenu
            menu.createApplicationMenu();
            expect(mockBrowserWindow.getFocusedWindow).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2R3ay9EZXZlbG9wZXIvZ2l0bGFiLmNvbS9kYXZpZHdrZWl0aC9AZHdrL2FuZ2xlc2l0ZS90ZXN0L3VpL21lbnUtc2ltcGxpZmllZC50ZXN0LnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQkgsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUMzQixJQUFJLEVBQUUsUUFBUTtJQUNkLGFBQWEsRUFBRSxpQkFBaUI7SUFDaEMsR0FBRyxFQUFFLE9BQU87SUFDWixLQUFLLEVBQUUsRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFO0lBQ2xDLFNBQVMsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUU7Q0FDcEMsQ0FBQyxDQUFDLENBQUM7QUFFSixvQkFBb0I7QUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELGFBQWEsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0lBQ3hCLG9CQUFvQixFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUM5QyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0lBQzNCLHNCQUFzQixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7Q0FDbEMsQ0FBQyxDQUFDLENBQUM7QUFFSixJQUFJLENBQUMsSUFBSSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDOUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUM3QiwwQkFBMEIsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0lBQ3JDLGNBQWMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0NBQzFCLENBQUMsQ0FBQyxDQUFDO0FBRUosSUFBSSxDQUFDLElBQUksQ0FB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LENBQUMscUJBQXFCLEVBQUUsQ0FBQztZQUM3QixNQUFNLENBQUMsaUJBQWlCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ2hFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZHdrL0RldmVsb3Blci9naXRsYWIuY29tL2Rhdmlkd2tlaXRoL0Bkd2svYW5nbGVzaXRlL3Rlc3QvdWkvbWVudS1zaW1wbGlmaWVkLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBTaW1wbGlmaWVkIHRlc3RzIGZvciBtZW51IGZ1bmN0aW9uYWxpdHlcbiAqL1xuXG4vLyBNb2NrIGVsZWN0cm9uIG1vZHVsZXNcbmNvbnN0IG1vY2tCcm93c2VyV2luZG93ID0ge1xuICBnZXRGb2N1c2VkV2luZG93OiBqZXN0LmZuKCksXG59O1xuXG5jb25zdCBtb2NrTWVudSA9IHtcbiAgYnVpbGRGcm9tVGVtcGxhdGU6IGplc3QuZm4oKSxcbiAgc2V0QXBwbGljYXRpb25NZW51OiBqZXN0LmZuKCksXG59O1xuXG5jb25zdCBtb2NrQXBwID0ge1xuICBnZXRQYXRoOiBqZXN0LmZuKCgpID0+ICcvbW9jay91c2VyL2RhdGEnKSxcbn07XG5cbmplc3QubW9jaygnZWxlY3Ryb24nLCAoKSA9PiAoe1xuICBNZW51OiBtb2NrTWVudSxcbiAgQnJvd3NlcldpbmRvdzogbW9ja0Jyb3dzZXJXaW5kb3csXG4gIGFwcDogbW9ja0FwcCxcbiAgc2hlbGw6IHsgb3BlbkV4dGVybmFsOiBqZXN0LmZuKCkgfSxcbiAgY2xpcGJvYXJkOiB7IHdyaXRlVGV4dDogamVzdC5mbigpIH0sXG59KSk7XG5cbi8vIE1vY2sgZGVwZW5kZW5jaWVzXG5qZXN0Lm1vY2soJy4uLy4uL2FwcC91aS9tdWx0aS13aW5kb3ctbWFuYWdlcicsICgpID0+ICh7XG4gIGdldEhlbHBXaW5kb3c6IGplc3QuZm4oKSxcbiAgZ2V0QWxsV2Vic2l0ZVdpbmRvd3M6IGplc3QuZm4oKCkgPT4gbmV3IE1hcCgpKSxcbiAgY3JlYXRlSGVscFdpbmRvdzogamVzdC5mbigpLFxuICBpc1dlYnNpdGVFZGl0b3JGb2N1c2VkOiBqZXN0LmZuKCksXG59KSk7XG5cbmplc3QubW9jaygnLi4vLi4vYXBwL3VpL3dpbmRvdy1tYW5hZ2VyJywgKCkgPT4gKHtcbiAgb3BlblNldHRpbmdzV2luZG93OiBqZXN0LmZuKCksXG4gIG9wZW5XZWJzaXRlU2VsZWN0aW9uV2luZG93OiBqZXN0LmZuKCksXG4gIGdldE5hdGl2ZUlucHV0OiBqZXN0LmZuKCksXG59KSk7XG5cbmplc3QubW9jaygnLi4vLi4vYXBwL2lwYy9oYW5kbGVycycsICgpID0+ICh7XG4gIGV4cG9ydFNpdGVIYW5kbGVyOiBqZXN0LmZuKCksXG4gIG9wZW5XZWJzaXRlSW5OZXdXaW5kb3c6IGplc3QuZm4oKSxcbn0pKTtcblxuamVzdC5tb2NrKCcuLi8uLi9hcHAvdXRpbHMvd2Vic2l0ZS1tYW5hZ2VyJywgKCkgPT4gKHtcbiAgY3JlYXRlV2Vic2l0ZVdpdGhOYW1lOiBqZXN0LmZuKCksXG4gIHZhbGlkYXRlV2Vic2l0ZU5hbWU6IGplc3QuZm4oKSxcbn0pKTtcblxuaW1wb3J0ICogYXMgbWVudSBmcm9tICcuLi8uLi9hcHAvdWkvbWVudSc7XG5cbmRlc2NyaWJlKCdNZW51JywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3VwZGF0ZUFwcGxpY2F0aW9uTWVudScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGJ1aWxkIGFuZCBzZXQgYXBwbGljYXRpb24gbWVudScsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tNZW51SW5zdGFuY2UgPSB7IGl0ZW1zOiBbXSB9O1xuICAgICAgbW9ja01lbnUuYnVpbGRGcm9tVGVtcGxhdGUubW9ja1JldHVyblZhbHVlKG1vY2tNZW51SW5zdGFuY2UpO1xuXG4gICAgICBtZW51LnVwZGF0ZUFwcGxpY2F0aW9uTWVudSgpO1xuXG4gICAgICBleHBlY3QobW9ja01lbnUuYnVpbGRGcm9tVGVtcGxhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGV4cGVjdC5hbnkoQXJyYXkpKTtcbiAgICAgIGV4cGVjdChtb2NrTWVudS5zZXRBcHBsaWNhdGlvbk1lbnUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKG1vY2tNZW51SW5zdGFuY2UpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnY3JlYXRlQXBwbGljYXRpb25NZW51JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY3JlYXRlIGEgbWVudSB0ZW1wbGF0ZScsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tNZW51SW5zdGFuY2UgPSB7IGl0ZW1zOiBbXSB9O1xuICAgICAgbW9ja01lbnUuYnVpbGRGcm9tVGVtcGxhdGUubW9ja1JldHVyblZhbHVlKG1vY2tNZW51SW5zdGFuY2UpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBtZW51LmNyZWF0ZUFwcGxpY2F0aW9uTWVudSgpO1xuXG4gICAgICBleHBlY3QobW9ja01lbnUuYnVpbGRGcm9tVGVtcGxhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGV4cGVjdC5hbnkoQXJyYXkpKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUobW9ja01lbnVJbnN0YW5jZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdpc1dlYnNpdGVXaW5kb3dGb2N1c2VkJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIGZhbHNlIHdoZW4gbm8gd2luZG93IGlzIGZvY3VzZWQnLCAoKSA9PiB7XG4gICAgICBtb2NrQnJvd3NlcldpbmRvdy5nZXRGb2N1c2VkV2luZG93Lm1vY2tSZXR1cm5WYWx1ZShudWxsKTtcbiAgICAgIGNvbnN0IHsgaXNXZWJzaXRlRWRpdG9yRm9jdXNlZCB9ID0gcmVxdWlyZSgnLi4vLi4vYXBwL3VpL211bHRpLXdpbmRvdy1tYW5hZ2VyJyk7XG4gICAgICBpc1dlYnNpdGVFZGl0b3JGb2N1c2VkLm1vY2tSZXR1cm5WYWx1ZShmYWxzZSk7XG5cbiAgICAgIC8vIFNpbmNlIGlzV2Vic2l0ZVdpbmRvd0ZvY3VzZWQgaXMgbm90IGV4cG9ydGVkLCB3ZSB0ZXN0IGl0IGluZGlyZWN0bHkgdmlhIGNyZWF0ZUFwcGxpY2F0aW9uTWVudVxuICAgICAgbWVudS5jcmVhdGVBcHBsaWNhdGlvbk1lbnUoKTtcbiAgICAgIGV4cGVjdChtb2NrQnJvd3NlcldpbmRvdy5nZXRGb2N1c2VkV2luZG93KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=