{"version":3,"names":["cov_1nw8za6v5w","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","Inject","DIContainer","constructor","options","services","Map","resolving","Set","parent","register","factory","lifetime","dependencies","isAsync","isAsyncFactory","set","registerClass","dependencyNames","map","depName","resolve","registerInstance","instance","has","cycle","Array","from","join","Error","serviceDefinition","get","add","delete","resolveAsync","factoryResult","Promise","isRegistered","createScope","getServiceNames","keys","getServiceDefinition","validateDependencies","serviceName","definition","dependency","clear","replace","existing","dispose","disposePromises","result","push","catch","error","console","warn","all","toString","includes","container","ServiceLocator","target","propertyKey","Object","defineProperty","configurable","ServiceKeys","STORE","LOGGER","CONFIG","WEBSITE_MANAGER","WEBSITE_SERVER_MANAGER","MENU_MANAGER","WINDOW_MANAGER","DNS_MANAGER","CERTIFICATE_MANAGER","ATOMIC_OPERATIONS","FILE_SYSTEM"],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/core/container.ts"],"sourcesContent":["/**\n * @file Dependency Injection Container\n *\n * Provides a lightweight, type-safe dependency injection system for Anglesite.\n * Supports singleton and transient lifetimes, circular dependency detection.\n * and easy testing through service substitution.\n *\n * Features:\n * - Type-safe service registration and resolution\n * - Singleton and transient service lifetimes\n * - Circular dependency detection\n * - Service substitution for testing\n * - Lazy initialization\n * - Hierarchical containers for scope isolation\n */\n\nexport type ServiceFactory<T = any> = () => T | Promise<T>; // eslint-disable-line @typescript-eslint/no-explicit-any\nexport type ServiceConstructor<T = any> = new (...args: any[]) => T; // eslint-disable-line @typescript-eslint/no-explicit-any\n\n// prettier-ignore\nexport interface ServiceDefinition<T = any> { // eslint-disable-line @typescript-eslint/no-explicit-any\n  factory: ServiceFactory<T>;\n  lifetime: 'singleton' | 'transient';\n  dependencies?: string[];\n  instance?: T;\n  isAsync?: boolean;\n}\n\nexport interface ContainerOptions {\n  parent?: DIContainer;\n  name?: string;\n}\n\n/**\n * Lightweight dependency injection container with type safety and lifecycle management.\n */\nexport class DIContainer {\n  private services = new Map<string, ServiceDefinition>();\n  private resolving = new Set<string>(); // Circular dependency detection\n  private parent?: DIContainer;\n  private name: string;\n\n  constructor(options: ContainerOptions = {}) {\n    this.parent = options.parent;\n    this.name = options.name || 'root';\n  }\n\n  /**\n   * Register a service with factory function.\n   * @param name Service identifier\n   * @param factory Function that creates the service instance\n   * @param lifetime Service lifetime (singleton or transient)\n   * @param dependencies Optional dependency names for validation\n   */\n  register<T>(\n    name: string,\n    factory: ServiceFactory<T>,\n    lifetime: 'singleton' | 'transient' = 'singleton',\n    dependencies: string[] = []\n  ): DIContainer {\n    const isAsync = this.isAsyncFactory(factory);\n\n    this.services.set(name, {\n      factory,\n      lifetime,\n      dependencies,\n      isAsync,\n    });\n\n    return this; // Fluent interface\n  }\n\n  /**\n   * Register a service using class constructor.\n   * @param name Service identifier\n   * @param constructor Class constructor to instantiate\n   * @param lifetime Service lifetime\n   * @param dependencyNames Names of services to inject into constructor\n   */\n  registerClass<T>(\n    name: string,\n    constructor: ServiceConstructor<T>,\n    lifetime: 'singleton' | 'transient' = 'singleton',\n    dependencyNames: string[] = []\n  ): DIContainer {\n    const factory: ServiceFactory<T> = () => {\n      const dependencies = dependencyNames.map((depName) => this.resolve(depName));\n      return new constructor(...dependencies);\n    };\n\n    return this.register(name, factory, lifetime, dependencyNames);\n  }\n\n  /**\n   * Register a service instance directly (always singleton).\n   * @param name Service identifier\n   * @param instance Service instance\n   */\n  registerInstance<T>(name: string, instance: T): DIContainer {\n    this.services.set(name, {\n      factory: () => instance,\n      lifetime: 'singleton',\n      dependencies: [],\n      instance,\n    });\n\n    return this;\n  }\n\n  /**\n   * Resolve a service by name with type safety.\n   * @param name Service identifier\n   * @returns Service instance\n   */\n  resolve<T>(name: string): T {\n    // Check for circular dependencies\n    if (this.resolving.has(name)) {\n      const cycle = Array.from(this.resolving).join(' -> ') + ' -> ' + name;\n      throw new Error(`Circular dependency detected: ${cycle}`);\n    }\n\n    // Try to resolve from current container\n    const serviceDefinition = this.services.get(name);\n\n    if (!serviceDefinition) {\n      // Try parent container\n      if (this.parent) {\n        return this.parent.resolve<T>(name);\n      }\n\n      throw new Error(`Service '${name}' is not registered in container '${this.name}'`);\n    }\n\n    // Return existing singleton instance if available\n    if (serviceDefinition.lifetime === 'singleton' && serviceDefinition.instance) {\n      return serviceDefinition.instance as T;\n    }\n\n    // Check for async factory in synchronous resolution\n    if (serviceDefinition.isAsync) {\n      throw new Error(`Service '${name}' requires async resolution. Use resolveAsync() instead.`);\n    }\n\n    // Mark as resolving for circular dependency detection\n    this.resolving.add(name);\n\n    try {\n      // Create new instance\n      const instance = serviceDefinition.factory() as T;\n\n      // Store singleton instance\n      if (serviceDefinition.lifetime === 'singleton') {\n        serviceDefinition.instance = instance;\n      }\n\n      return instance;\n    } finally {\n      // Clear resolving flag\n      this.resolving.delete(name);\n    }\n  }\n\n  /**\n   * Resolve a service asynchronously.\n   * @param name Service identifier\n   * @returns Promise resolving to service instance\n   */\n  async resolveAsync<T>(name: string): Promise<T> {\n    // Check for circular dependencies\n    if (this.resolving.has(name)) {\n      const cycle = Array.from(this.resolving).join(' -> ') + ' -> ' + name;\n      throw new Error(`Circular dependency detected: ${cycle}`);\n    }\n\n    // Try to resolve from current container\n    const serviceDefinition = this.services.get(name);\n\n    if (!serviceDefinition) {\n      // Try parent container\n      if (this.parent) {\n        return this.parent.resolveAsync<T>(name);\n      }\n\n      throw new Error(`Service '${name}' is not registered in container '${this.name}'`);\n    }\n\n    // Return existing singleton instance if available\n    if (serviceDefinition.lifetime === 'singleton' && serviceDefinition.instance) {\n      return serviceDefinition.instance as T;\n    }\n\n    // Mark as resolving for circular dependency detection\n    this.resolving.add(name);\n\n    try {\n      // Create new instance (handle both sync and async factories)\n      const factoryResult = serviceDefinition.factory();\n      const instance = (await Promise.resolve(factoryResult)) as T;\n\n      // Store singleton instance\n      if (serviceDefinition.lifetime === 'singleton') {\n        serviceDefinition.instance = instance;\n      }\n\n      return instance;\n    } finally {\n      // Clear resolving flag\n      this.resolving.delete(name);\n    }\n  }\n\n  /**\n   * Check if a service is registered.\n   * @param name Service identifier\n   * @returns True if service is registered\n   */\n  isRegistered(name: string): boolean {\n    return this.services.has(name) || (this.parent?.isRegistered(name) ?? false);\n  }\n\n  /**\n   * Create a child container for scope isolation.\n   * @param name Optional name for the child container\n   * @returns New child container\n   */\n  createScope(name?: string): DIContainer {\n    return new DIContainer({ parent: this, name });\n  }\n\n  /**\n   * Get all registered service names in current container.\n   * @returns Array of service names\n   */\n  getServiceNames(): string[] {\n    return Array.from(this.services.keys());\n  }\n\n  /**\n   * Get service definition for debugging.\n   * @param name Service identifier\n   * @returns Service definition or undefined\n   */\n  getServiceDefinition(name: string): ServiceDefinition | undefined {\n    return this.services.get(name);\n  }\n\n  /**\n   * Performs dependency validation to ensure all service dependencies are properly registered and resolvable.\n   * @throws Error if any dependencies are missing\n   */\n  validateDependencies(): void {\n    for (const serviceName of this.services.keys()) {\n      const definition = this.services.get(serviceName)!;\n      if (definition.dependencies) {\n        for (const dependency of definition.dependencies) {\n          if (!this.isRegistered(dependency)) {\n            throw new Error(`Service '${serviceName}' depends on '${dependency}' which is not registered`);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Clear all services and instances (useful for testing).\n   */\n  clear(): void {\n    this.services.clear();\n    this.resolving.clear();\n  }\n\n  /**\n   * Replace a service registration (useful for testing).\n   * @param name Service identifier\n   * @param factory New factory function\n   */\n  replace<T>(name: string, factory: ServiceFactory<T>): void {\n    if (!this.services.has(name)) {\n      throw new Error(`Cannot replace service '${name}' - it is not registered`);\n    }\n\n    const existing = this.services.get(name)!;\n    this.services.set(name, {\n      ...existing,\n      factory,\n      instance: undefined, // Clear existing instance\n    });\n  }\n\n  /**\n   * Gracefully shuts down all singleton service instances by calling their dispose methods when available.\n   */\n  async dispose(): Promise<void> {\n    const disposePromises: Promise<void>[] = [];\n\n    for (const serviceName of this.services.keys()) {\n      const definition = this.services.get(serviceName)!;\n      if (definition.instance && typeof definition.instance === 'object') {\n        const instance = definition.instance as any; // eslint-disable-line @typescript-eslint/no-explicit-any\n        if (typeof instance.dispose === 'function') {\n          try {\n            const result = instance.dispose();\n            if (result instanceof Promise) {\n              disposePromises.push(\n                result.catch((error) => {\n                  console.warn('Service dispose error:', error);\n                })\n              );\n            }\n          } catch (error) {\n            // Handle sync dispose errors\n            console.warn('Service dispose error:', error);\n          }\n        }\n      }\n    }\n\n    await Promise.all(disposePromises);\n    this.clear();\n  }\n\n  /**\n   * Check if factory function is async.\n   * @param factory Factory function to check\n   * @returns True if factory returns a Promise\n   */\n  private isAsyncFactory(factory: ServiceFactory): boolean {\n    try {\n      // Create a test call to check return type\n      const result = factory.toString();\n      return result.includes('async ') || result.includes('Promise') || result.includes('await ');\n    } catch {\n      return false; // Conservative fallback\n    }\n  }\n}\n\n/**\n * Global container instance for application-wide services.\n */\nexport const container = new DIContainer({ name: 'global' });\n\n/**\n * Service locator pattern for quick access to common services.\n * Use sparingly - prefer constructor injection when possible.\n */\nexport class ServiceLocator {\n  static resolve<T>(name: string): T {\n    return container.resolve<T>(name);\n  }\n\n  static async resolveAsync<T>(name: string): Promise<T> {\n    return container.resolveAsync<T>(name);\n  }\n\n  static isRegistered(name: string): boolean {\n    return container.isRegistered(name);\n  }\n}\n\n/**\n * Decorator for automatic service injection (experimental).\n * @param serviceName Name of service to inject\n */\nexport function Inject(serviceName: string) {\n  // prettier-ignore\n  return function (target: any, propertyKey: string | symbol) { // eslint-disable-line @typescript-eslint/no-explicit-any\n    Object.defineProperty(target, propertyKey, {\n      get() {\n        return container.resolve(serviceName);\n      },\n      configurable: true,\n    });\n  };\n}\n\n/**\n * Type-safe service keys for better IDE support.\n */\nexport const ServiceKeys = {\n  // Core services\n  STORE: 'store',\n  LOGGER: 'logger',\n  CONFIG: 'config',\n\n  // Website management\n  WEBSITE_MANAGER: 'websiteManager',\n  WEBSITE_SERVER_MANAGER: 'websiteServerManager',\n\n  // UI services\n  MENU_MANAGER: 'menuManager',\n  WINDOW_MANAGER: 'windowManager',\n\n  // System services\n  DNS_MANAGER: 'dnsManager',\n  CERTIFICATE_MANAGER: 'certificateManager',\n\n  // Utilities\n  ATOMIC_OPERATIONS: 'atomicOperations',\n  FILE_SYSTEM: 'fileSystem',\n} as const;\n\nexport type ServiceKey = (typeof ServiceKeys)[keyof typeof ServiceKeys];\n"],"mappings":"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","ignoreList":[]}