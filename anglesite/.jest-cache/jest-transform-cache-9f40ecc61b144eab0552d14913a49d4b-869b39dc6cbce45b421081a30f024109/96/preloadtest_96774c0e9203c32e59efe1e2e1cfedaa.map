{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/app/preload.test.ts","mappings":"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","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/app/preload.test.ts"],"sourcesContent":["/**\n * @file Tests for Electron preload script\n */\n\n// Mock electron modules\nconst mockContextBridge = {\n  exposeInMainWorld: jest.fn(),\n};\n\nconst mockIpcRenderer = {\n  send: jest.fn(),\n  invoke: jest.fn(),\n  on: jest.fn(),\n  removeAllListeners: jest.fn(),\n};\n\n// Mock electron before importing preload\njest.mock('electron', () => ({\n  contextBridge: mockContextBridge,\n  ipcRenderer: mockIpcRenderer,\n}));\n\ninterface ElectronAPI {\n  send: jest.Mock;\n  invoke: jest.Mock;\n  on: jest.Mock;\n  removeAllListeners: jest.Mock;\n  getCurrentTheme: jest.Mock;\n  setTheme: jest.Mock;\n  onThemeUpdated: jest.Mock;\n}\n\ndescribe('Preload Script', () => {\n  let electronAPI: ElectronAPI;\n\n  beforeAll(() => {\n    // Clear any previous mock calls\n    mockContextBridge.exposeInMainWorld.mockClear();\n\n    // Delete from require cache if it exists\n    delete require.cache[require.resolve('../../app/preload')];\n\n    // Import preload script to trigger the contextBridge.exposeInMainWorld call\n    require('../../app/preload');\n\n    // Get the electronAPI that was exposed\n    const exposeCall = mockContextBridge.exposeInMainWorld.mock.calls.find((call) => call[0] === 'electronAPI');\n    electronAPI = exposeCall ? exposeCall[1] : null;\n  });\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  afterAll(() => {\n    jest.resetModules();\n  });\n\n  describe('Context Bridge Setup', () => {\n    it('should expose electronAPI in main world', () => {\n      // The preload script should have been loaded and exposed the API\n      expect(electronAPI).toBeDefined();\n      expect(electronAPI).not.toBeNull();\n    });\n\n    it('should expose all expected API methods', () => {\n      expect(electronAPI).toHaveProperty('send');\n      expect(electronAPI).toHaveProperty('invoke');\n      expect(electronAPI).toHaveProperty('on');\n      expect(electronAPI).toHaveProperty('removeAllListeners');\n      expect(electronAPI).toHaveProperty('getCurrentTheme');\n      expect(electronAPI).toHaveProperty('setTheme');\n      expect(electronAPI).toHaveProperty('onThemeUpdated');\n    });\n  });\n\n  describe('send method', () => {\n    const validSendChannels = [\n      'new-website',\n      'preview',\n      'open-browser',\n      'reload-preview',\n      'toggle-devtools',\n      'hide-preview',\n      'export-site',\n      'create-website-with-name',\n      'renderer-loaded',\n      'input-dialog-result',\n      'show-website-context-menu',\n      'delete-website',\n    ];\n\n    validSendChannels.forEach((channel) => {\n      it(`should send valid channel: ${channel}`, () => {\n        electronAPI.send(channel, 'test-arg');\n\n        expect(mockIpcRenderer.send).toHaveBeenCalledWith(channel, 'test-arg');\n      });\n    });\n\n    it('should send with multiple arguments', () => {\n      electronAPI.send('new-website', 'arg1', 'arg2', 'arg3');\n\n      expect(mockIpcRenderer.send).toHaveBeenCalledWith('new-website', 'arg1', 'arg2', 'arg3');\n    });\n\n    it('should not send invalid channels', () => {\n      electronAPI.send('invalid-channel', 'test-arg');\n\n      expect(mockIpcRenderer.send).not.toHaveBeenCalled();\n    });\n\n    it('should handle empty arguments', () => {\n      electronAPI.send('preview');\n\n      expect(mockIpcRenderer.send).toHaveBeenCalledWith('preview');\n    });\n  });\n\n  describe('invoke method', () => {\n    const validInvokeChannels = [\n      'list-websites',\n      'validate-website-name',\n      'rename-website',\n      'get-current-theme',\n      'set-theme',\n    ];\n\n    validInvokeChannels.forEach((channel) => {\n      it(`should invoke valid channel: ${channel}`, async () => {\n        const mockResult = { success: true };\n        mockIpcRenderer.invoke.mockResolvedValue(mockResult);\n\n        const result = await electronAPI.invoke(channel, 'test-arg');\n\n        expect(mockIpcRenderer.invoke).toHaveBeenCalledWith(channel, 'test-arg');\n        expect(result).toEqual(mockResult);\n      });\n    });\n\n    it('should invoke with multiple arguments', async () => {\n      const mockResult = { data: 'test' };\n      mockIpcRenderer.invoke.mockResolvedValue(mockResult);\n\n      const result = await electronAPI.invoke('rename-website', 'oldName', 'newName');\n\n      expect(mockIpcRenderer.invoke).toHaveBeenCalledWith('rename-website', 'oldName', 'newName');\n      expect(result).toEqual(mockResult);\n    });\n\n    it('should reject invalid channels', async () => {\n      await expect(electronAPI.invoke('invalid-channel', 'test-arg')).rejects.toThrow(\n        'Invalid invoke channel: invalid-channel'\n      );\n\n      expect(mockIpcRenderer.invoke).not.toHaveBeenCalled();\n    });\n\n    it('should handle invoke errors', async () => {\n      const error = new Error('IPC error');\n      mockIpcRenderer.invoke.mockRejectedValue(error);\n\n      await expect(electronAPI.invoke('list-websites')).rejects.toThrow('IPC error');\n    });\n  });\n\n  describe('on method', () => {\n    const validOnChannels = [\n      'preview-loaded',\n      'preview-error',\n      'menu-new-website',\n      'menu-reload',\n      'menu-toggle-devtools',\n      'menu-export-site',\n      'show-website-name-input',\n      'website-context-menu-action',\n      'website-operation-completed',\n      'theme-updated',\n      'trigger-new-website',\n    ];\n\n    validOnChannels.forEach((channel) => {\n      it(`should register listener for valid channel: ${channel}`, () => {\n        const mockCallback = jest.fn();\n\n        electronAPI.on(channel, mockCallback);\n\n        expect(mockIpcRenderer.on).toHaveBeenCalledWith(channel, expect.any(Function));\n      });\n    });\n\n    it('should call callback when event is received', () => {\n      const mockCallback = jest.fn();\n      let eventHandler: (...args: unknown[]) => void;\n\n      // Capture the event handler\n      mockIpcRenderer.on.mockImplementation((channel, handler) => {\n        eventHandler = handler;\n      });\n\n      electronAPI.on('preview-loaded', mockCallback);\n\n      // Simulate event reception\n      const mockEvent = { preventDefault: jest.fn() };\n      eventHandler!(mockEvent, 'arg1', 'arg2');\n\n      expect(mockCallback).toHaveBeenCalledWith('arg1', 'arg2');\n    });\n\n    it('should not register listener for invalid channels', () => {\n      const mockCallback = jest.fn();\n\n      electronAPI.on('invalid-channel', mockCallback);\n\n      expect(mockIpcRenderer.on).not.toHaveBeenCalled();\n    });\n\n    it('should handle callback without arguments', () => {\n      const mockCallback = jest.fn();\n      let eventHandler: (...args: unknown[]) => void;\n\n      mockIpcRenderer.on.mockImplementation((channel, handler) => {\n        eventHandler = handler;\n      });\n\n      electronAPI.on('preview-loaded', mockCallback);\n\n      const mockEvent = { preventDefault: jest.fn() };\n      eventHandler!(mockEvent);\n\n      expect(mockCallback).toHaveBeenCalledWith();\n    });\n  });\n\n  describe('removeAllListeners method', () => {\n    const validRemoveChannels = ['preview-loaded', 'preview-error'];\n\n    validRemoveChannels.forEach((channel) => {\n      it(`should remove listeners for valid channel: ${channel}`, () => {\n        electronAPI.removeAllListeners(channel);\n\n        expect(mockIpcRenderer.removeAllListeners).toHaveBeenCalledWith(channel);\n      });\n    });\n\n    it('should not remove listeners for invalid channels', () => {\n      electronAPI.removeAllListeners('invalid-channel');\n\n      expect(mockIpcRenderer.removeAllListeners).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Theme API methods', () => {\n    describe('getCurrentTheme', () => {\n      it('should invoke get-current-theme', async () => {\n        const mockTheme = 'dark';\n        mockIpcRenderer.invoke.mockResolvedValue(mockTheme);\n\n        const result = await electronAPI.getCurrentTheme();\n\n        expect(mockIpcRenderer.invoke).toHaveBeenCalledWith('get-current-theme');\n        expect(result).toBe(mockTheme);\n      });\n\n      it('should handle getCurrentTheme errors', async () => {\n        const error = new Error('Theme error');\n        mockIpcRenderer.invoke.mockRejectedValue(error);\n\n        await expect(electronAPI.getCurrentTheme()).rejects.toThrow('Theme error');\n      });\n    });\n\n    describe('setTheme', () => {\n      it('should invoke set-theme with theme parameter', async () => {\n        const mockResult = { success: true };\n        mockIpcRenderer.invoke.mockResolvedValue(mockResult);\n\n        const result = await electronAPI.setTheme('light');\n\n        expect(mockIpcRenderer.invoke).toHaveBeenCalledWith('set-theme', 'light');\n        expect(result).toEqual(mockResult);\n      });\n\n      it('should handle setTheme errors', async () => {\n        const error = new Error('Set theme error');\n        mockIpcRenderer.invoke.mockRejectedValue(error);\n\n        await expect(electronAPI.setTheme('dark')).rejects.toThrow('Set theme error');\n      });\n    });\n\n    describe('onThemeUpdated', () => {\n      it('should register listener for theme-updated events', () => {\n        const mockCallback = jest.fn();\n\n        electronAPI.onThemeUpdated(mockCallback);\n\n        expect(mockIpcRenderer.on).toHaveBeenCalledWith('theme-updated', expect.any(Function));\n      });\n\n      it('should call callback when theme-updated event is received', () => {\n        const mockCallback = jest.fn();\n        let eventHandler: (...args: unknown[]) => void;\n\n        mockIpcRenderer.on.mockImplementation((channel, handler) => {\n          if (channel === 'theme-updated') {\n            eventHandler = handler;\n          }\n        });\n\n        electronAPI.onThemeUpdated(mockCallback);\n\n        // Simulate theme update event\n        const mockEvent = { preventDefault: jest.fn() };\n        eventHandler!(mockEvent, 'new-theme', { additional: 'data' });\n\n        expect(mockCallback).toHaveBeenCalledWith('new-theme', { additional: 'data' });\n      });\n    });\n  });\n\n  describe('Security validation', () => {\n    it('should only allow whitelisted send channels', () => {\n      const invalidChannels = ['malicious-channel', 'arbitrary-command', 'system-access', 'file-access'];\n\n      invalidChannels.forEach((channel) => {\n        electronAPI.send(channel, 'malicious-payload');\n        expect(mockIpcRenderer.send).not.toHaveBeenCalledWith(channel, 'malicious-payload');\n      });\n    });\n\n    it('should only allow whitelisted invoke channels', async () => {\n      const invalidChannels = ['malicious-invoke', 'system-command', 'file-read', 'process-spawn'];\n\n      for (const channel of invalidChannels) {\n        await expect(electronAPI.invoke(channel, 'payload')).rejects.toThrow(`Invalid invoke channel: ${channel}`);\n        expect(mockIpcRenderer.invoke).not.toHaveBeenCalledWith(channel, 'payload');\n      }\n    });\n\n    it('should only allow whitelisted on channels', () => {\n      const invalidChannels = ['malicious-listener', 'system-event', 'arbitrary-event'];\n\n      invalidChannels.forEach((channel) => {\n        electronAPI.on(channel, jest.fn());\n        expect(mockIpcRenderer.on).not.toHaveBeenCalledWith(channel, expect.any(Function));\n      });\n    });\n\n    it('should only allow whitelisted removeAllListeners channels', () => {\n      const invalidChannels = ['malicious-remove', 'system-cleanup', 'arbitrary-cleanup'];\n\n      invalidChannels.forEach((channel) => {\n        electronAPI.removeAllListeners(channel);\n        expect(mockIpcRenderer.removeAllListeners).not.toHaveBeenCalledWith(channel);\n      });\n    });\n  });\n\n  describe('Error handling and edge cases', () => {\n    it('should handle undefined callback in on method', () => {\n      expect(() => {\n        electronAPI.on('preview-loaded', undefined);\n      }).not.toThrow();\n\n      expect(mockIpcRenderer.on).toHaveBeenCalled();\n    });\n\n    it('should handle null arguments in send method', () => {\n      electronAPI.send('preview', null, undefined);\n\n      expect(mockIpcRenderer.send).toHaveBeenCalledWith('preview', null, undefined);\n    });\n\n    it('should handle empty string channels', () => {\n      electronAPI.send('');\n      electronAPI.on('', jest.fn());\n\n      expect(mockIpcRenderer.send).not.toHaveBeenCalled();\n      expect(mockIpcRenderer.on).not.toHaveBeenCalled();\n    });\n\n    it('should handle case-sensitive channel validation', () => {\n      electronAPI.send('NEW-WEBSITE'); // Wrong case\n      electronAPI.send('new-Website'); // Wrong case\n\n      expect(mockIpcRenderer.send).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Integration scenarios', () => {\n    it('should support typical website creation workflow', async () => {\n      // 1. Send new-website command\n      electronAPI.send('new-website');\n      expect(mockIpcRenderer.send).toHaveBeenCalledWith('new-website');\n\n      // 2. Register for website name input\n      const mockCallback = jest.fn();\n      electronAPI.on('show-website-name-input', mockCallback);\n      expect(mockIpcRenderer.on).toHaveBeenCalledWith('show-website-name-input', expect.any(Function));\n\n      // 3. Send website creation with name\n      electronAPI.send('create-website-with-name', 'My New Site');\n      expect(mockIpcRenderer.send).toHaveBeenCalledWith('create-website-with-name', 'My New Site');\n    });\n\n    it('should support theme management workflow', async () => {\n      // 1. Get current theme\n      mockIpcRenderer.invoke.mockResolvedValue('light');\n      const currentTheme = await electronAPI.getCurrentTheme();\n      expect(currentTheme).toBe('light');\n\n      // 2. Set new theme\n      mockIpcRenderer.invoke.mockResolvedValue({ success: true });\n      await electronAPI.setTheme('dark');\n      expect(mockIpcRenderer.invoke).toHaveBeenCalledWith('set-theme', 'dark');\n\n      // 3. Listen for theme updates\n      const mockCallback = jest.fn();\n      electronAPI.onThemeUpdated(mockCallback);\n      expect(mockIpcRenderer.on).toHaveBeenCalledWith('theme-updated', expect.any(Function));\n    });\n\n    it('should support website management workflow', async () => {\n      // 1. List websites\n      mockIpcRenderer.invoke.mockResolvedValue(['site1', 'site2']);\n      const websites = await electronAPI.invoke('list-websites');\n      expect(websites).toEqual(['site1', 'site2']);\n\n      // 2. Validate website name\n      mockIpcRenderer.invoke.mockResolvedValue({ valid: true });\n      const validation = await electronAPI.invoke('validate-website-name', 'new-site');\n      expect(validation).toEqual({ valid: true });\n\n      // 3. Show context menu\n      electronAPI.send('show-website-context-menu', 'site1', { x: 100, y: 200 });\n      expect(mockIpcRenderer.send).toHaveBeenCalledWith('show-website-context-menu', 'site1', { x: 100, y: 200 });\n    });\n  });\n});\n"],"version":3}