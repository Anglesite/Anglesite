{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/ui/theme-test-utils.ts","mappings":"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","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/ui/theme-test-utils.ts"],"sourcesContent":["/**\n * @file Theme Testing Utilities\n *\n * Centralized utilities for theme-related testing to ensure consistency\n * and maintainability across all theme tests.\n */\n\nimport type { MockStore, MockNativeTheme, PartialMockWindow } from './test-types';\n\n/**\n * Enhanced mock for nativeTheme that supports property assignment.\n */\nexport function createMockNativeTheme(): MockNativeTheme & { themeSource: string } {\n  let currentThemeSource = 'system';\n\n  const mock = {\n    shouldUseDarkColors: false,\n    get themeSource() {\n      return currentThemeSource;\n    },\n    set themeSource(value: string) {\n      currentThemeSource = value;\n    },\n    on: jest.fn(),\n  };\n\n  return mock as MockNativeTheme & { themeSource: string };\n}\n\n/**\n * Enhanced mock for IPC that tracks handlers for later access.\n */\nexport function createMockIpcMain() {\n  const handlers = new Map<string, (...args: unknown[]) => unknown>();\n\n  const mock = {\n    handle: jest.fn(),\n    on: jest.fn(),\n    // Helper to get handlers\n    getHandler: (channel: string) => handlers.get(channel),\n    // Helper to check if handler exists\n    hasHandler: (channel: string) => handlers.has(channel),\n    // Helper to clear handlers (for test cleanup)\n    clearHandlers: () => handlers.clear(),\n  };\n\n  // Set up the implementation for the handle mock\n  mock.handle.mockImplementation((channel: string, handler: (...args: unknown[]) => unknown) => {\n    handlers.set(channel, handler);\n  });\n\n  return mock;\n}\n\n/**\n * Create a mock window with all necessary theme-related methods.\n */\nexport function createMockWindow(\n  overrides: Partial<PartialMockWindow> = {}\n): PartialMockWindow & { webContents: NonNullable<PartialMockWindow['webContents']> } {\n  const baseWindow = {\n    isDestroyed: () => false,\n    webContents: {\n      send: jest.fn(),\n      isLoading: jest.fn(() => false),\n      executeJavaScript: jest.fn(() => Promise.resolve()),\n      once: jest.fn(),\n    },\n  };\n\n  const merged = { ...baseWindow, ...overrides };\n  // Ensure webContents is not null\n  if (!merged.webContents) {\n    merged.webContents = baseWindow.webContents;\n  }\n\n  return merged as PartialMockWindow & { webContents: NonNullable<PartialMockWindow['webContents']> };\n}\n\n/**\n * Create a mock store with theme-related methods.\n */\nexport function createMockStore(defaultTheme: string = 'system'): MockStore {\n  return {\n    get: jest.fn(() => defaultTheme),\n    set: jest.fn(),\n  };\n}\n\n/**\n * Create a mock BrowserWindow module.\n */\nexport function createMockBrowserWindow(windows: PartialMockWindow[] = []) {\n  return {\n    getAllWindows: jest.fn(() => windows),\n    fromWebContents: jest.fn(),\n  };\n}\n\n/**\n * Theme test scenario helpers.\n */\nexport class ThemeTestScenarios {\n  /**\n   * Set up a basic theme test scenario.\n   */\n  static setupBasicTheme(\n    mockNativeTheme: ReturnType<typeof createMockNativeTheme>,\n    mockStore: MockStore,\n    theme: 'light' | 'dark' | 'system' = 'system'\n  ) {\n    mockStore.get.mockReturnValue(theme);\n    mockNativeTheme.shouldUseDarkColors = theme === 'dark' || (theme === 'system' && false);\n    mockNativeTheme.themeSource = theme;\n  }\n\n  /**\n   * Create a mock window with all necessary theme-related methods.\n   */\n  static createMockWindow(\n    overrides: Partial<PartialMockWindow> = {}\n  ): PartialMockWindow & { webContents: NonNullable<PartialMockWindow['webContents']> } {\n    return createMockWindow(overrides);\n  }\n\n  /**\n   * Set up a window theme scenario.\n   */\n  static setupWindowScenario(mockBrowserWindow: ReturnType<typeof createMockBrowserWindow>, windowCount: number = 2) {\n    const windows = Array.from({ length: windowCount }, () =>\n      ThemeTestScenarios.createMockWindow({\n        webContents: {\n          send: jest.fn(),\n          isLoading: jest.fn(() => false),\n          executeJavaScript: jest.fn(() => Promise.resolve()),\n          once: jest.fn(),\n        },\n      })\n    );\n\n    mockBrowserWindow.getAllWindows.mockReturnValue(windows);\n    return windows;\n  }\n\n  /**\n   * Verify theme was applied to windows.\n   */\n  static expectThemeAppliedToWindows(windows: PartialMockWindow[], theme: 'light' | 'dark', userPreference: string) {\n    windows.forEach((window) => {\n      expect(window.webContents?.send).toHaveBeenCalledWith(\n        'theme-updated',\n        expect.objectContaining({\n          userPreference,\n          resolvedTheme: theme,\n        })\n      );\n    });\n  }\n\n  /**\n   * Verify IPC handlers are registered.\n   */\n  static expectIpcHandlersRegistered(mockIpcMain: ReturnType<typeof createMockIpcMain>) {\n    // Instead of checking if handle was called, check if handlers exist\n    expect(mockIpcMain.hasHandler('get-current-theme')).toBe(true);\n    expect(mockIpcMain.hasHandler('set-theme')).toBe(true);\n  }\n\n  /**\n   * Test IPC handler functionality.\n   */\n  static testIpcHandlers(mockIpcMain: ReturnType<typeof createMockIpcMain>, expectedTheme: string) {\n    const getThemeHandler = mockIpcMain.getHandler('get-current-theme');\n    const setThemeHandler = mockIpcMain.getHandler('set-theme');\n\n    expect(getThemeHandler).toBeDefined();\n    expect(setThemeHandler).toBeDefined();\n\n    if (getThemeHandler) {\n      const result = getThemeHandler();\n      expect(result).toHaveProperty('userPreference');\n      expect(result).toHaveProperty('resolvedTheme');\n      expect(result).toHaveProperty('systemTheme');\n    }\n\n    if (setThemeHandler) {\n      const result = setThemeHandler(null, expectedTheme);\n      expect(result).toHaveProperty('userPreference', expectedTheme);\n    }\n  }\n}\n\n/**\n * Mock factory for complete theme testing setup.\n */\nexport function createThemeTestSetup() {\n  const mockNativeTheme = createMockNativeTheme();\n  const mockStore = createMockStore();\n  const mockIpcMain = createMockIpcMain();\n  const mockBrowserWindow = createMockBrowserWindow();\n\n  // Service registry mock\n  const mockServiceRegistry = {\n    getGlobalContext: () => ({\n      getService: (key: string) => {\n        if (key === 'store') {\n          return mockStore;\n        }\n        throw new Error(`Unknown service: ${key}`);\n      },\n    }),\n  };\n\n  return {\n    mocks: {\n      nativeTheme: mockNativeTheme,\n      store: mockStore,\n      ipcMain: mockIpcMain,\n      browserWindow: mockBrowserWindow,\n      serviceRegistry: mockServiceRegistry,\n    },\n    // Reset all mocks\n    reset: () => {\n      // Only clear specific mocks that need to be reset between tests\n      // Don't clear ipcMain.handle calls since we need them for tests\n      mockStore.get.mockClear();\n      mockStore.set.mockClear();\n      mockBrowserWindow.getAllWindows.mockClear();\n\n      // Reset theme state but preserve handlers\n      ThemeTestScenarios.setupBasicTheme(mockNativeTheme, mockStore);\n      mockBrowserWindow.getAllWindows.mockReturnValue([]);\n    },\n    scenarios: {\n      ...ThemeTestScenarios,\n      createMockWindow: ThemeTestScenarios.createMockWindow,\n      expectIpcHandlersRegistered: ThemeTestScenarios.expectIpcHandlersRegistered,\n    },\n  };\n}\n\n/**\n * Jest setup helper for theme tests.\n */\nexport function setupThemeTestMocks() {\n  const setup = createThemeTestSetup();\n\n  // Set up Jest mocks\n  jest.mock('electron', () => ({\n    BrowserWindow: setup.mocks.browserWindow,\n    nativeTheme: setup.mocks.nativeTheme,\n    ipcMain: setup.mocks.ipcMain,\n  }));\n\n  jest.mock('../../app/core/service-registry', () => setup.mocks.serviceRegistry);\n\n  return setup;\n}\n"],"version":3}