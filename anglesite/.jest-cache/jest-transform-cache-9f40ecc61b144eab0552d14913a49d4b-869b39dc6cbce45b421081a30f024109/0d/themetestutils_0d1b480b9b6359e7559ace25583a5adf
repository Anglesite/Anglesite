622e021a82d6a56da58fe45814645a2a
"use strict";
/**
 * @file Theme Testing Utilities
 *
 * Centralized utilities for theme-related testing to ensure consistency
 * and maintainability across all theme tests.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThemeTestScenarios = void 0;
exports.createMockNativeTheme = createMockNativeTheme;
exports.createMockIpcMain = createMockIpcMain;
exports.createMockWindow = createMockWindow;
exports.createMockStore = createMockStore;
exports.createMockBrowserWindow = createMockBrowserWindow;
exports.createThemeTestSetup = createThemeTestSetup;
exports.setupThemeTestMocks = setupThemeTestMocks;
/**
 * Enhanced mock for nativeTheme that supports property assignment.
 */
function createMockNativeTheme() {
    let currentThemeSource = 'system';
    const mock = {
        shouldUseDarkColors: false,
        get themeSource() {
            return currentThemeSource;
        },
        set themeSource(value) {
            currentThemeSource = value;
        },
        on: jest.fn(),
    };
    return mock;
}
/**
 * Enhanced mock for IPC that tracks handlers for later access.
 */
function createMockIpcMain() {
    const handlers = new Map();
    const mock = {
        handle: jest.fn(),
        on: jest.fn(),
        // Helper to get handlers
        getHandler: (channel) => handlers.get(channel),
        // Helper to check if handler exists
        hasHandler: (channel) => handlers.has(channel),
        // Helper to clear handlers (for test cleanup)
        clearHandlers: () => handlers.clear(),
    };
    // Set up the implementation for the handle mock
    mock.handle.mockImplementation((channel, handler) => {
        handlers.set(channel, handler);
    });
    return mock;
}
/**
 * Create a mock window with all necessary theme-related methods.
 */
function createMockWindow(overrides = {}) {
    const baseWindow = {
        isDestroyed: () => false,
        webContents: {
            send: jest.fn(),
            isLoading: jest.fn(() => false),
            executeJavaScript: jest.fn(() => Promise.resolve()),
            once: jest.fn(),
        },
    };
    const merged = { ...baseWindow, ...overrides };
    // Ensure webContents is not null
    if (!merged.webContents) {
        merged.webContents = baseWindow.webContents;
    }
    return merged;
}
/**
 * Create a mock store with theme-related methods.
 */
function createMockStore(defaultTheme = 'system') {
    return {
        get: jest.fn(() => defaultTheme),
        set: jest.fn(),
    };
}
/**
 * Create a mock BrowserWindow module.
 */
function createMockBrowserWindow(windows = []) {
    return {
        getAllWindows: jest.fn(() => windows),
        fromWebContents: jest.fn(),
    };
}
/**
 * Theme test scenario helpers.
 */
class ThemeTestScenarios {
    /**
     * Set up a basic theme test scenario.
     */
    static setupBasicTheme(mockNativeTheme, mockStore, theme = 'system') {
        mockStore.get.mockReturnValue(theme);
        mockNativeTheme.shouldUseDarkColors = theme === 'dark' || (theme === 'system' && false);
        mockNativeTheme.themeSource = theme;
    }
    /**
     * Create a mock window with all necessary theme-related methods.
     */
    static createMockWindow(overrides = {}) {
        return createMockWindow(overrides);
    }
    /**
     * Set up a window theme scenario.
     */
    static setupWindowScenario(mockBrowserWindow, windowCount = 2) {
        const windows = Array.from({ length: windowCount }, () => ThemeTestScenarios.createMockWindow({
            webContents: {
                send: jest.fn(),
                isLoading: jest.fn(() => false),
                executeJavaScript: jest.fn(() => Promise.resolve()),
                once: jest.fn(),
            },
        }));
        mockBrowserWindow.getAllWindows.mockReturnValue(windows);
        return windows;
    }
    /**
     * Verify theme was applied to windows.
     */
    static expectThemeAppliedToWindows(windows, theme, userPreference) {
        windows.forEach((window) => {
            expect(window.webContents?.send).toHaveBeenCalledWith('theme-updated', expect.objectContaining({
                userPreference,
                resolvedTheme: theme,
            }));
        });
    }
    /**
     * Verify IPC handlers are registered.
     */
    static expectIpcHandlersRegistered(mockIpcMain) {
        // Instead of checking if handle was called, check if handlers exist
        expect(mockIpcMain.hasHandler('get-current-theme')).toBe(true);
        expect(mockIpcMain.hasHandler('set-theme')).toBe(true);
    }
    /**
     * Test IPC handler functionality.
     */
    static testIpcHandlers(mockIpcMain, expectedTheme) {
        const getThemeHandler = mockIpcMain.getHandler('get-current-theme');
        const setThemeHandler = mockIpcMain.getHandler('set-theme');
        expect(getThemeHandler).toBeDefined();
        expect(setThemeHandler).toBeDefined();
        if (getThemeHandler) {
            const result = getThemeHandler();
            expect(result).toHaveProperty('userPreference');
            expect(result).toHaveProperty('resolvedTheme');
            expect(result).toHaveProperty('systemTheme');
        }
        if (setThemeHandler) {
            const result = setThemeHandler(null, expectedTheme);
            expect(result).toHaveProperty('userPreference', expectedTheme);
        }
    }
}
exports.ThemeTestScenarios = ThemeTestScenarios;
/**
 * Mock factory for complete theme testing setup.
 */
function createThemeTestSetup() {
    const mockNativeTheme = createMockNativeTheme();
    const mockStore = createMockStore();
    const mockIpcMain = createMockIpcMain();
    const mockBrowserWindow = createMockBrowserWindow();
    // Service registry mock
    const mockServiceRegistry = {
        getGlobalContext: () => ({
            getService: (key) => {
                if (key === 'store') {
                    return mockStore;
                }
                throw new Error(`Unknown service: ${key}`);
            },
        }),
    };
    return {
        mocks: {
            nativeTheme: mockNativeTheme,
            store: mockStore,
            ipcMain: mockIpcMain,
            browserWindow: mockBrowserWindow,
            serviceRegistry: mockServiceRegistry,
        },
        // Reset all mocks
        reset: () => {
            // Only clear specific mocks that need to be reset between tests
            // Don't clear ipcMain.handle calls since we need them for tests
            mockStore.get.mockClear();
            mockStore.set.mockClear();
            mockBrowserWindow.getAllWindows.mockClear();
            // Reset theme state but preserve handlers
            ThemeTestScenarios.setupBasicTheme(mockNativeTheme, mockStore);
            mockBrowserWindow.getAllWindows.mockReturnValue([]);
        },
        scenarios: {
            ...ThemeTestScenarios,
            createMockWindow: ThemeTestScenarios.createMockWindow,
            expectIpcHandlersRegistered: ThemeTestScenarios.expectIpcHandlersRegistered,
        },
    };
}
/**
 * Jest setup helper for theme tests.
 */
function setupThemeTestMocks() {
    // Set up Jest mocks
    jest.mock('electron', () => ({
        BrowserWindow: setup.mocks.browserWindow,
        nativeTheme: setup.mocks.nativeTheme,
        ipcMain: setup.mocks.ipcMain,
    }));
    jest.mock('../../app/core/service-registry', () => setup.mocks.serviceRegistry);
    const setup = createThemeTestSetup();
    return setup;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,