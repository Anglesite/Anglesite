{"version":3,"names":["exports","addLocalDnsResolution","cov_xp4bvnosa","s","checkAndSuggestTouchIdSetup","updateHostsFile","cleanupHostsFile","electron_1","require","child_process_1","util_1","service_registry_1","container_1","hostile","__importStar","sudo_prompt_1","__importDefault","native_is_elevated_1","execFileAsync","promisify","execFile","hostname","f","autoConfigEnabled","b","anglesiteSectionExists","checkAnglesiteSection","success","setupAnglesiteWildcardSection","dialog","showMessageBox","type","title","message","detail","buttons","console","log","addToAnglesiteSection","error","warn","hostEntryExists","isTouchIdAvailable","process","platform","touchIdConfigured","stdout","parseInt","trim","touchIdHardware","biometryCheck","includes","debug","canEnableTouchId","touchIdAvailable","canEnable","executeWithElevatedPrivileges","command","args","alreadyElevated","default","output","options","name","icns","undefined","escapedArgs","map","arg","replace","fullCommand","join","Promise","resolve","exec","code","toString","Error","String","addHostEntry","ipAddress","result","removeHostEntry","get","err","lines","exists","some","host","existingWebsites","appContext","getGlobalContext","websiteManager","getService","ServiceKeys","WEBSITE_MANAGER","listWebsites","diError","then","websiteNames","Array","isArray","validDomains","Set","hostEntries","reject","orphanedDomains","ip","line","parts","split","length","endsWith","has","push","allSucceeded","domain"],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/dns/hosts-manager.ts"],"sourcesContent":["/**\n * @file DNS and hosts file management for Anglesite development domains.\n *\n * This module handles:\n * - Adding .test domains to /etc/hosts for local DNS resolution\n * - Managing the Anglesite section in the hosts file\n * - Cleaning up orphaned domain entries\n * - Cross-platform hosts file modifications using hostile library.\n */\nimport { dialog } from 'electron';\nimport { execFile } from 'child_process';\nimport { promisify } from 'util';\n// Import for DI access\nimport { getGlobalContext } from '../core/service-registry';\nimport { ServiceKeys } from '../core/container';\nimport { IWebsiteManager } from '../core/interfaces';\nimport * as hostile from 'hostile';\n\nimport sudoPrompt from 'sudo-prompt';\nimport isElevated from 'native-is-elevated';\n\nconst execFileAsync = promisify(execFile);\n\n/**\n * Add local DNS resolution for a hostname with biometric authentication.\n *\n * Automatically configures /etc/hosts to resolve the specified hostname to 127.0.0.1\n * for local development. Uses Touch ID when available for secure privilege escalation.\n *\n * Features:\n * - First-time setup creates Anglesite section with user confirmation dialog\n * - Subsequent additions are silent and automatic\n * - Touch ID biometric authentication when available\n * - Fallback to password authentication\n * - Comprehensive error handling with user feedback.\n * @param hostname The .test hostname to add (e.g., \"mysite.test\").\n * @returns Promise that resolves when DNS resolution is configured.\n * @example\n * ```typescript\n * await addLocalDnsResolution('my-website.test');\n * // Now https://my-website.test:8080 resolves to localhost\n * ```\n */\nexport async function addLocalDnsResolution(hostname: string): Promise<void> {\n  // Check if auto-configuration is enabled\n  const autoConfigEnabled = true; // TODO: Get from settings\n\n  if (autoConfigEnabled) {\n    // Check if Anglesite section exists\n    const anglesiteSectionExists = await checkAnglesiteSection();\n\n    if (!anglesiteSectionExists) {\n      // Set up the wildcard section for the first time\n      const success = await setupAnglesiteWildcardSection();\n      if (success) {\n        dialog.showMessageBox({\n          type: 'info',\n          title: 'DNS Configuration Complete',\n          message: 'Development domains configured successfully!',\n          detail: `Your site is now available at:\n\n‚Ä¢ https://${hostname}:8080\n‚Ä¢ https://localhost:8080\n\nAll future websites will automatically work at:\n‚Ä¢ https://[website-name].test:8080`,\n          buttons: ['OK'],\n        });\n        return;\n      } else {\n        dialog.showMessageBox({\n          type: 'warning',\n          title: 'Setup Failed',\n          message: 'Could not enable automatic domain configuration',\n          detail: `To access your site at https://${hostname}:8080, please add this line to /etc/hosts:\\n\\n127.0.0.1\\t${hostname}`,\n          buttons: ['OK'],\n        });\n      }\n    } else {\n      // Anglesite section exists - add domain silently\n      console.log(`Adding ${hostname} to existing Anglesite section‚Ä¶`);\n      const success = await addToAnglesiteSection(hostname);\n      if (success) {\n        console.log(`‚úÖ DNS resolution for ${hostname} configured automatically`);\n      } else {\n        console.error(`‚ùå Failed to add ${hostname} to hosts file`);\n      }\n    }\n    return;\n  }\n\n  try {\n    // This section is handled by the auto-configuration above\n    // No need to check for wildcard entries with hostile\n\n    // Inform user about DNS setup\n    console.log(`\\n========================================`);\n    console.log(`üìå Development Server Access:`);\n    console.log(`========================================`);\n    console.log(`‚úÖ Available at: https://localhost:8080`);\n    console.log(`‚ú® Custom domain: https://${hostname}:8080`);\n    console.log(`1. Enable auto-configuration in Settings`);\n    console.log(`2. Or manually add: 127.0.0.1\\t*.test to /etc/hosts`);\n    console.log(`========================================\\n`);\n  } catch (error) {\n    console.warn('Could not check DNS resolution:', error);\n    console.log(`\\nAccess your site at: https://localhost:8080`);\n    console.log(`Or set up custom domain in Settings`);\n  }\n}\n\n/**\n * Check if anglesite.test domain exists in hosts file.\n */\nasync function checkAnglesiteSection(): Promise<boolean> {\n  try {\n    return await hostEntryExists('anglesite.test');\n  } catch (error) {\n    console.error('Error checking hosts file:', error);\n    return false;\n  }\n}\n\n/**\n * Check if Touch ID is available and configured for sudo on macOS.\n */\nasync function isTouchIdAvailable(): Promise<boolean> {\n  if (process.platform !== 'darwin') {\n    return false;\n  }\n\n  try {\n    // Check if pam_tid.so is configured in sudo PAM configuration\n    let touchIdConfigured = false;\n    try {\n      const { stdout } = await execFileAsync('grep', ['-c', 'pam_tid.so', '/etc/pam.d/sudo']);\n      touchIdConfigured = parseInt(stdout.trim()) > 0;\n    } catch {\n      // File not found or no matches - Touch ID not configured\n      touchIdConfigured = false;\n    }\n\n    // Check if Touch ID hardware is available\n    let touchIdHardware = false;\n    try {\n      const { stdout: biometryCheck } = await execFileAsync('bioutil', ['-r']);\n      touchIdHardware = biometryCheck.includes('Touch ID');\n    } catch {\n      // bioutil not available or no Touch ID hardware\n      touchIdHardware = false;\n    }\n\n    return touchIdConfigured && touchIdHardware;\n  } catch (error) {\n    console.debug('Could not check Touch ID availability:', error);\n    return false;\n  }\n}\n\n/**\n * Check if Touch ID hardware is available but not configured for sudo.\n */\nasync function canEnableTouchId(): Promise<boolean> {\n  if (process.platform !== 'darwin') {\n    return false;\n  }\n\n  try {\n    // Check if Touch ID hardware is available\n    let touchIdHardware = false;\n    try {\n      const { stdout: biometryCheck } = await execFileAsync('bioutil', ['-r']);\n      touchIdHardware = biometryCheck.includes('Touch ID');\n    } catch {\n      // bioutil not available or no Touch ID hardware\n      touchIdHardware = false;\n    }\n\n    // Check if pam_tid.so is NOT configured in sudo PAM configuration\n    let touchIdConfigured = false;\n    try {\n      const { stdout } = await execFileAsync('grep', ['-c', 'pam_tid.so', '/etc/pam.d/sudo']);\n      touchIdConfigured = parseInt(stdout.trim()) > 0;\n    } catch {\n      // File not found or no matches - Touch ID not configured\n      touchIdConfigured = false;\n    }\n\n    return touchIdHardware && !touchIdConfigured;\n  } catch (error) {\n    console.debug('Could not check Touch ID configuration possibility:', error);\n    return false;\n  }\n}\n\n/**\n * Show Touch ID setup information to user if available but not configured.\n */\nexport async function checkAndSuggestTouchIdSetup(): Promise<void> {\n  if (process.platform !== 'darwin') {\n    return;\n  }\n\n  const touchIdAvailable = await isTouchIdAvailable();\n  const canEnable = await canEnableTouchId();\n\n  if (touchIdAvailable) {\n    console.log('üîê Touch ID is configured for sudo commands - biometric authentication available');\n  } else if (canEnable) {\n    console.log('üí° Touch ID detected but not configured for sudo.');\n    console.log('   To enable Touch ID for administrator access:');\n    console.log('   1. Open Terminal');\n    console.log('   2. Run: sudo cp /etc/pam.d/sudo_local.template /etc/pam.d/sudo_local');\n    console.log('   3. Edit: sudo nano /etc/pam.d/sudo_local');\n    console.log('   4. Uncomment: auth sufficient pam_tid.so');\n    console.log('   5. Save and restart Terminal');\n    console.log('   This will enable Touch ID for all sudo operations.');\n  }\n}\n\n/**\n * Execute a command with elevated privileges using sudo-prompt with Touch ID support.\n */\nasync function executeWithElevatedPrivileges(\n  command: string,\n  args: string[]\n): Promise<{ success: boolean; output?: string }> {\n  try {\n    // Check if we already have elevated privileges\n    const alreadyElevated = await isElevated();\n\n    if (alreadyElevated) {\n      // We already have elevated privileges, run directly using secure execFile\n      const { stdout } = await execFileAsync(command, args);\n      return { success: true, output: stdout };\n    } else {\n      // Check if Touch ID is available\n      const touchIdAvailable = await isTouchIdAvailable();\n\n      // Need to request elevated privileges\n      const options = {\n        name: 'Anglesite DNS',\n        icns: process.platform === 'darwin' ? undefined : undefined, // Can be set to app icon path\n      };\n\n      // Log authentication method for debugging\n      if (touchIdAvailable) {\n        console.log('üîê Requesting administrator access (Touch ID available)');\n      } else {\n        console.log('üîë Requesting administrator access (password required)');\n      }\n\n      // Create a secure command string for sudo-prompt\n      // Unfortunately, sudo-prompt requires a string, but we can at least properly escape it\n      const escapedArgs = args.map((arg) => `'${arg.replace(/'/g, \"'\\\"'\\\"'\")}'`);\n      const fullCommand = `${command} ${escapedArgs.join(' ')}`;\n\n      return new Promise((resolve) => {\n        sudoPrompt.exec(fullCommand, options, (error?: Error, stdout?: string | Buffer) => {\n          if (error) {\n            // Check for specific Touch ID cancellation or failure\n            if (error.message.includes('User cancelled') || (error as Error & { code?: number }).code === -128) {\n              console.log('Authentication cancelled by user');\n            } else if (touchIdAvailable) {\n              console.log('Touch ID authentication failed, may have fallen back to password');\n            }\n            console.error('Failed to execute with elevated privileges:', error.message);\n            resolve({ success: false });\n          } else {\n            if (touchIdAvailable) {\n              console.log('‚úÖ Authentication successful (Touch ID or password)');\n            } else {\n              console.log('‚úÖ Authentication successful (password)');\n            }\n            resolve({ success: true, output: stdout?.toString() });\n          }\n        });\n      });\n    }\n  } catch (error: unknown) {\n    console.error(\n      'Failed to execute with elevated privileges:',\n      error instanceof Error ? error.message : String(error)\n    );\n    return { success: false };\n  }\n}\n\n/**\n * Add a host entry using hostile with native system authentication.\n */\nasync function addHostEntry(hostname: string, ipAddress: string = '127.0.0.1'): Promise<boolean> {\n  try {\n    const result = await executeWithElevatedPrivileges('npx', ['hostile', 'set', ipAddress, hostname]);\n\n    if (result.success) {\n      console.log(`‚úÖ Added ${hostname} to hosts file`);\n      return true;\n    } else {\n      console.error(`Failed to add ${hostname} to hosts file`);\n      return false;\n    }\n  } catch (error) {\n    console.error(`Failed to add ${hostname} to hosts file:`, error);\n    return false;\n  }\n}\n\n/**\n * Remove a host entry using hostile with native system authentication.\n */\nasync function removeHostEntry(hostname: string): Promise<boolean> {\n  try {\n    const result = await executeWithElevatedPrivileges('npx', ['hostile', 'remove', hostname]);\n\n    if (result.success) {\n      console.log(`‚úÖ Removed ${hostname} from hosts file`);\n      return true;\n    } else {\n      console.error(`Failed to remove ${hostname} from hosts file`);\n      return false;\n    }\n  } catch (error) {\n    console.error(`Failed to remove ${hostname} from hosts file:`, error);\n    return false;\n  }\n}\n\n/**\n * Check if a host entry exists using hostile library.\n */\nasync function hostEntryExists(hostname: string): Promise<boolean> {\n  return new Promise((resolve) => {\n    hostile.get(false, (err: Error | null, lines: unknown) => {\n      if (err) {\n        console.error(`Failed to check hosts file for ${hostname}:`, err);\n        resolve(false);\n        return;\n      }\n\n      // hostile.get returns array of [ip, hostname] tuples\n      const exists = (lines as Array<[string, string]>).some(([, host]) => {\n        return host === hostname;\n      });\n      resolve(exists);\n    });\n  });\n}\n\n/**\n * Set up initial Anglesite domain using hostile library.\n */\nasync function setupAnglesiteWildcardSection(): Promise<boolean> {\n  try {\n    // Add the main anglesite.test domain\n    const success = await addHostEntry('anglesite.test', '127.0.0.1');\n    if (success) {\n      console.log('Anglesite domain configured successfully');\n    }\n    return success;\n  } catch (error) {\n    console.error('Failed to setup Anglesite domain:', error);\n    return false;\n  }\n}\n\n/**\n * Add hostname to hosts file using hostile library.\n */\nasync function addToAnglesiteSection(hostname: string, ipAddress: string = '127.0.0.1'): Promise<boolean> {\n  try {\n    // Check if entry already exists\n    const exists = await hostEntryExists(hostname);\n    if (exists) {\n      console.log(`${hostname} already exists in hosts file`);\n      return true;\n    }\n\n    // Add the host entry\n    return await addHostEntry(hostname, ipAddress);\n  } catch (error) {\n    console.error('Failed to add to hosts file:', error);\n    return false;\n  }\n}\n\n/**\n * Update hosts file with new entries.\n */\nexport async function updateHostsFile(hostname: string, ipAddress: string = '127.0.0.1'): Promise<boolean> {\n  return addToAnglesiteSection(hostname, ipAddress);\n}\n\n/**\n * Clean up orphaned .test domain entries using hostile library\n * Removes domains that no longer have corresponding website folders.\n * @returns Promise resolving to true if cleanup succeeded or no changes needed, false if failed.\n */\nexport async function cleanupHostsFile(): Promise<boolean> {\n  try {\n    // Get list of actual website directories\n    let existingWebsites: string[];\n    try {\n      // Use DI-based website manager\n      const appContext = getGlobalContext();\n      const websiteManager = appContext.getService<IWebsiteManager>(ServiceKeys.WEBSITE_MANAGER);\n      existingWebsites = await websiteManager.listWebsites();\n    } catch (diError) {\n      console.warn('Failed to list websites via DI, falling back to legacy method:', diError);\n      // Fallback to legacy method if DI fails (for when DI is not initialized yet)\n      const { listWebsites } = await import('../utils/website-manager');\n      existingWebsites = await listWebsites();\n    }\n    console.log('Existing websites:', existingWebsites);\n\n    // Always include anglesite.test for the main docs\n    const websiteNames = Array.isArray(existingWebsites) ? existingWebsites : [];\n    const validDomains = new Set(['anglesite.test', ...websiteNames.map((name: string) => `${name}.test`)]);\n\n    // Get current hosts file entries\n    const hostEntries = await new Promise<Array<[string, string]>>((resolve, reject) => {\n      hostile.get(false, (err: Error | null, lines: unknown) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(lines as Array<[string, string]>);\n      });\n    });\n\n    // Find orphaned .test domains\n    const orphanedDomains: string[] = [];\n    for (const [ip, line] of hostEntries) {\n      const parts = line.split(/\\s+/);\n      if (parts.length >= 2) {\n        const hostname = parts[1];\n        if (hostname.endsWith('.test') && ip === '127.0.0.1') {\n          if (!validDomains.has(hostname)) {\n            orphanedDomains.push(hostname);\n          }\n        }\n      }\n    }\n\n    // Remove orphaned domains\n    let allSucceeded = true;\n    for (const domain of orphanedDomains) {\n      console.log(`Removing orphaned domain: ${domain}`);\n      const success = await removeHostEntry(domain);\n      if (!success) {\n        allSucceeded = false;\n      }\n    }\n\n    if (orphanedDomains.length === 0) {\n      console.log('Hosts file is already clean, no changes needed');\n    } else {\n      console.log(`Cleaned up ${orphanedDomains.length} orphaned domain(s)`);\n    }\n\n    return allSucceeded;\n  } catch (error) {\n    console.error('Failed to clean up hosts file:', error);\n    return false;\n  }\n}\n"],"mappingsqBAAA,GAAAA,qBAAA;AAkEC;AAAAC,aAAA,GAAAC,CAAA;AAyFDH,OAAA,CAAAI,2BAAA,GAAAA,2BAAA;AAoBC;AAAAF,aAAA,GAAAC,CAAA;AA2KDH,OAAA,CAAAK,eAAA,GAAAA,eAAA;AAEC;AAAAH,aAAA,GAAAC,CAAA;AAODH,OAAA,CAAAM,gBAAA,GAAAA,gBAAA;AA9YA;;;;;;;;;AASA,MAAAC,UAAA;AAAA;AAAA,CAAAL,aAAA,GAAAC,CAAA,QAAAK,OAAA;AACA,MAAAC,eAAA;AAAA;AAAA,CAAAP,aAAA,GAAAC,CAAA,QAAAK,OAAA;AACA,MAAAE,MAAA;AAAA;AAAA,CAAAR,aAAA,GAAAC,CAAA,QAAAK,OAAA;AACA;AACA,MAAAG,kBAAA;AAAA;AAAA,CAAAT,aAAA,GAAAC,CAAA,QAAAK,OAAA;AACA,MAAAI,WAAA;AAAA;AAAA,CAAAV,aAAA,GAAAC,CAAA,QAAAK,OAAA;AAEA,MAAAK,OAAA;AAAA;AAAA,CAAAX,aAAA,GAAAC,CAAA,QAAAW,YAAA,CAAAN,OAAA;AAEA,MAAAO,aAAA;AAAA;AAAA,CAAAb,aAAA,GAAAC,CAAA,QAAAa,eAAA,CAAAR,OAAA;AACA,MAAAS,oBAAA;AAAA;AAAA,CAAAf,aAAA,GAAAC,CAAA,QAAAa,eAAA,CAAAR,OAAA;AAEA,MAAMU,aAAa;AAAA;AAAA,CAAAhB,aAAA,GAAAC,CAAA,QAAG,IAAAO,MAAA,CAAAS,SAAS,EAACV,eAAA,CAAAW,QAAQ,CAAC;AAEzC;;;;;;;;;;;;;;;;;;;;AAoBO,eAAenB,qBAAqBA,CAACoB,QAAgB;EAAA;EAAAnB,aAAA,GAAAoB,CAAA;EAC1D;EACA,MAAMC,iBAAiB;EAAA;EAAA,CAAArB,aAAA,GAAAC,CAAA,QAAG,IAAI,EAAC,CAAC;EAAA;EAAAD,aAAA,GAAAC,CAAA;EAEhC,IAAIoB,iBAAiB,EAAE;IAAA;IAAArB,aAAA,GAAAsB,CAAA;IACrB;IACA,MAAMC,sBAAsB;IAAA;IAAA,CAAAvB,aAAA,GAAAC,CAAA,QAAG,MAAMuB,qBAAqB,EAAE;IAAC;IAAAxB,aAAA,GAAAC,CAAA;IAE7D,IAAI,CAACsB,sBAAsB,EAAE;MAAA;MAAAvB,aAAA,GAAAsB,CAAA;MAC3B;MACA,MAAMG,OAAO;MAAA;MAAA,CAAAzB,aAAA,GAAAC,CAAA,QAAG,MAAMyB,6BAA6B,EAAE;MAAC;MAAA1B,aAAA,GAAAC,CAAA;MACtD,IAAIwB,OAAO,EAAE;QAAA;QAAAzB,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAC,CAAA;QACXI,UAAA,CAAAsB,MAAM,CAACC,cAAc,CAAC;UACpBC,IAAI,EAAE,MAAM;UACZC,KAAK,EAAE,4BAA4B;UACnCC,OAAO,EAAE,8CAA8C;UACvDC,MAAM,EAAE;;YAENb,QAAQ;;;;mCAIe;UACzBc,OAAO,EAAE,CAAC,IAAI;SACf,CAAC;QAAC;QAAAjC,aAAA,GAAAC,CAAA;QACH;MACF,CAAC,MAAM;QAAA;QAAAD,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAC,CAAA;QACLI,UAAA,CAAAsB,MAAM,CAACC,cAAc,CAAC;UACpBC,IAAI,EAAE,SAAS;UACfC,KAAK,EAAE,cAAc;UACrBC,OAAO,EAAE,iDAAiD;UAC1DC,MAAM,EAAE,kCAAkCb,QAAQ,4DAA4DA,QAAQ,EAAE;UACxHc,OAAO,EAAE,CAAC,IAAI;SACf,CAAC;MACJ;IACF,CAAC,MAAM;MAAA;MAAAjC,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAC,CAAA;MACL;MACAiC,OAAO,CAACC,GAAG,CAAC,UAAUhB,QAAQ,iCAAiC,CAAC;MAChE,MAAMM,OAAO;MAAA;MAAA,CAAAzB,aAAA,GAAAC,CAAA,QAAG,MAAMmC,qBAAqB,CAACjB,QAAQ,CAAC;MAAC;MAAAnB,aAAA,GAAAC,CAAA;MACtD,IAAIwB,OAAO,EAAE;QAAA;QAAAzB,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAC,CAAA;QACXiC,OAAO,CAACC,GAAG,CAAC,wBAAwBhB,QAAQ,2BAA2B,CAAC;MAC1E,CAAC,MAAM;QAAA;QAAAnB,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAC,CAAA;QACLiC,OAAO,CAACG,KAAK,CAAC,mBAAmBlB,QAAQ,gBAAgB,CAAC;MAC5D;IACF;IAAC;IAAAnB,aAAA,GAAAC,CAAA;IACD;EACF,CAAC;EAAA;EAAA;IAAAD,aAAA,GAAAsB,CAAA;EAAA;EAAAtB,aAAA,GAAAC,CAAA;EAED,IAAI;IAAA;IAAAD,aAAA,GAAAC,CAAA;IACF;IACA;IAEA;IACAiC,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;IAAC;IAAAnC,aAAA,GAAAC,CAAA;IAC1DiC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAAC;IAAAnC,aAAA,GAAAC,CAAA;IAC7CiC,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IAAC;IAAAnC,aAAA,GAAAC,CAAA;IACxDiC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IAAC;IAAAnC,aAAA,GAAAC,CAAA;IACtDiC,OAAO,CAACC,GAAG,CAAC,4BAA4BhB,QAAQ,OAAO,CAAC;IAAC;IAAAnB,aAAA,GAAAC,CAAA;IACzDiC,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IAAC;IAAAnC,aAAA,GAAAC,CAAA;IACxDiC,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;IAAC;IAAAnC,aAAA,GAAAC,CAAA;IACnEiC,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;EAC3D,CAAC,CAAC,OAAOE,KAAK,EAAE;IAAA;IAAArC,aAAA,GAAAC,CAAA;IACdiC,OAAO,CAACI,IAAI,CAAC,iCAAiC,EAAED,KAAK,CAAC;IAAC;IAAArC,aAAA,GAAAC,CAAA;IACvDiC,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;IAAC;IAAAnC,aAAA,GAAAC,CAAA;IAC7DiC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;EACpD;AACF;AAEA;;;AAGA,eAAeX,qBAAqBA,CAAA;EAAA;EAAAxB,aAAA,GAAAoB,CAAA;EAAApB,aAAA,GAAAC,CAAA;EAClC,IAAI;IAAA;IAAAD,aAAA,GAAAC,CAAA;IACF,OAAO,MAAMsC,eAAe,CAAC,gBAAgB,CAAC;EAChD,CAAC,CAAC,OAAOF,KAAK,EAAE;IAAA;IAAArC,aAAA,GAAAC,CAAA;IACdiC,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAAC;IAAArC,aAAA,GAAAC,CAAA;IACnD,OAAO,KAAK;EACd;AACF;AAEA;;;AAGA,eAAeuC,kBAAkBA,CAAA;EAAA;EAAAxC,aAAA,GAAAoB,CAAA;EAAApB,aAAA,GAAAC,CAAA;EAC/B,IAAIwC,OAAO,CAACC,QAAQ,KAAK,QAAQ,EAAE;IAAA;IAAA1C,aAAA,GAAAsB,CAAA;IAAAtB,aAAA,GAAAC,CAAA;IACjC,OAAO,KAAK;EACd,CAAC;EAAA;EAAA;IAAAD,aAAA,GAAAsB,CAAA;EAAA;EAAAtB,aAAA,GAAAC,CAAA;EAED,IAAI;IACF;IACA,IAAI0C,iBAAiB;IAAA;IAAA,CAAA3C,aAAA,GAAAC,CAAA,QAAG,KAAK;IAAC;IAAAD,aAAA,GAAAC,CAAA;IAC9B,IAAI;MACF,MAAM;QAAE2C;MAAM,CAAE;MAAA;MAAA,CAAA5C,aAAA,GAAAC,CAAA,QAAG,MAAMe,aAAa,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,YAAY,EAAE,iBAAiB,CAAC,CAAC;MAAC;MAAAhB,aAAA,GAAAC,CAAA;MACxF0C,iBAAiB,GAAGE,QAAQ,CAACD,MAAM,CAACE,IAAI,EAAE,CAAC,GAAG,CAAC;IACjD,CAAC,CAAC,MAAM;MAAA;MAAA9C,aAAA,GAAAC,CAAA;MACN;MACA0C,iBAAiB,GAAG,KAAK;IAC3B;IAEA;IACA,IAAII,eAAe;IAAA;IAAA,CAAA/C,aAAA,GAAAC,CAAA,QAAG,KAAK;IAAC;IAAAD,aAAA,GAAAC,CAAA;IAC5B,IAAI;MACF,MAAM;QAAE2C,MAAM,EAAEI;MAAa,CAAE;MAAA;MAAA,CAAAhD,aAAA,GAAAC,CAAA,QAAG,MAAMe,aAAa,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,CAAC;MAAC;MAAAhB,aAAA,GAAAC,CAAA;MACzE8C,eAAe,GAAGC,aAAa,CAACC,QAAQ,CAAC,UAAU,CAAC;IACtD,CAAC,CAAC,MAAM;MAAA;MAAAjD,aAAA,GAAAC,CAAA;MACN;MACA8C,eAAe,GAAG,KAAK;IACzB;IAAC;IAAA/C,aAAA,GAAAC,CAAA;IAED,OAAO,2BAAAD,aAAA,GAAAsB,CAAA,WAAAqB,iBAAiB;IAAA;IAAA,CAAA3C,aAAA,GAAAsB,CAAA,WAAIyB,eAAe;EAC7C,CAAC,CAAC,OAAOV,KAAK,EAAE;IAAA;IAAArC,aAAA,GAAAC,CAAA;IACdiC,OAAO,CAACgB,KAAK,CAAC,wCAAwC,EAAEb,KAAK,CAAC;IAAC;IAAArC,aAAA,GAAAC,CAAA;IAC/D,OAAO,KAAK;EACd;AACF;AAEA;;;AAGA,eAAekD,gBAAgBA,CAAA;EAAA;EAAAnD,aAAA,GAAAoB,CAAA;EAAApB,aAAA,GAAAC,CAAA;EAC7B,IAAIwC,OAAO,CAACC,QAAQ,KAAK,QAAQ,EAAE;IAAA;IAAA1C,aAAA,GAAAsB,CAAA;IAAAtB,aAAA,GAAAC,CAAA;IACjC,OAAO,KAAK;EACd,CAAC;EAAA;EAAA;IAAAD,aAAA,GAAAsB,CAAA;EAAA;EAAAtB,aAAA,GAAAC,CAAA;EAED,IAAI;IACF;IACA,IAAI8C,eAAe;IAAA;IAAA,CAAA/C,aAAA,GAAAC,CAAA,SAAG,KAAK;IAAC;IAAAD,aAAA,GAAAC,CAAA;IAC5B,IAAI;MACF,MAAM;QAAE2C,MAAM,EAAEI;MAAa,CAAE;MAAA;MAAA,CAAAhD,aAAA,GAAAC,CAAA,SAAG,MAAMe,aAAa,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,CAAC;MAAC;MAAAhB,aAAA,GAAAC,CAAA;MACzE8C,eAAe,GAAGC,aAAa,CAACC,QAAQ,CAAC,UAAU,CAAC;IACtD,CAAC,CAAC,MAAM;MAAA;MAAAjD,aAAA,GAAAC,CAAA;MACN;MACA8C,eAAe,GAAG,KAAK;IACzB;IAEA;IACA,IAAIJ,iBAAiB;IAAA;IAAA,CAAA3C,aAAA,GAAAC,CAAA,SAAG,KAAK;IAAC;IAAAD,aAAA,GAAAC,CAAA;IAC9B,IAAI;MACF,MAAM;QAAE2C;MAAM,CAAE;MAAA;MAAA,CAAA5C,aAAA,GAAAC,CAAA,SAAG,MAAMe,aAAa,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,YAAY,EAAE,iBAAiB,CAAC,CAAC;MAAC;MAAAhB,aAAA,GAAAC,CAAA;MACxF0C,iBAAiB,GAAGE,QAAQ,CAACD,MAAM,CAACE,IAAI,EAAE,CAAC,GAAG,CAAC;IACjD,CAAC,CAAC,MAAM;MAAA;MAAA9C,aAAA,GAAAC,CAAA;MACN;MACA0C,iBAAiB,GAAG,KAAK;IAC3B;IAAC;IAAA3C,aAAA,GAAAC,CAAA;IAED,OAAO,2BAAAD,aAAA,GAAAsB,CAAA,WAAAyB,eAAe;IAAA;IAAA,CAAA/C,aAAA,GAAAsB,CAAA,WAAI,CAACqB,iBAAiB;EAC9C,CAAC,CAAC,OAAON,KAAK,EAAE;IAAA;IAAArC,aAAA,GAAAC,CAAA;IACdiC,OAAO,CAACgB,KAAK,CAAC,qDAAqD,EAAEb,KAAK,CAAC;IAAC;IAAArC,aAAA,GAAAC,CAAA;IAC5E,OAAO,KAAK;EACd;AACF;AAEA;;;AAGO,eAAeC,2BAA2BA,CAAA;EAAA;EAAAF,aAAA,GAAAoB,CAAA;EAAApB,aAAA,GAAAC,CAAA;EAC/C,IAAIwC,OAAO,CAACC,QAAQ,KAAK,QAAQ,EAAE;IAAA;IAAA1C,aAAA,GAAAsB,CAAA;IAAAtB,aAAA,GAAAC,CAAA;IACjC;EACF,CAAC;EAAA;EAAA;IAAAD,aAAA,GAAAsB,CAAA;EAAA;EAED,MAAM8B,gBAAgB;EAAA;EAAA,CAAApD,aAAA,GAAAC,CAAA,SAAG,MAAMuC,kBAAkB,EAAE;EACnD,MAAMa,SAAS;EAAA;EAAA,CAAArD,aAAA,GAAAC,CAAA,SAAG,MAAMkD,gBAAgB,EAAE;EAAC;EAAAnD,aAAA,GAAAC,CAAA;EAE3C,IAAImD,gBAAgB,EAAE;IAAA;IAAApD,aAAA,GAAAsB,CAAA;IAAAtB,aAAA,GAAAC,CAAA;IACpBiC,OAAO,CAACC,GAAG,CAAC,kFAAkF,CAAC;EACjG,CAAC,MAAM;IAAA;IAAAnC,aAAA,GAAAsB,CAAA;IAAAtB,aAAA,GAAAC,CAAA;IAAA,IAAIoD,SAAS,EAAE;MAAA;MAAArD,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAC,CAAA;MACpBiC,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;MAAC;MAAAnC,aAAA,GAAAC,CAAA;MACjEiC,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;MAAC;MAAAnC,aAAA,GAAAC,CAAA;MAC/DiC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAAC;MAAAnC,aAAA,GAAAC,CAAA;MACnCiC,OAAO,CAACC,GAAG,CAAC,yEAAyE,CAAC;MAAC;MAAAnC,aAAA,GAAAC,CAAA;MACvFiC,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;MAAC;MAAAnC,aAAA,GAAAC,CAAA;MAC3DiC,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;MAAC;MAAAnC,aAAA,GAAAC,CAAA;MAC3DiC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAAC;MAAAnC,aAAA,GAAAC,CAAA;MAC/CiC,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC;IACtE,CAAC;IAAA;IAAA;MAAAnC,aAAA,GAAAsB,CAAA;IAAA;EAAD;AACF;AAEA;;;AAGA,eAAegC,6BAA6BA,CAC1CC,OAAe,EACfC,IAAc;EAAA;EAAAxD,aAAA,GAAAoB,CAAA;EAAApB,aAAA,GAAAC,CAAA;EAEd,IAAI;IACF;IACA,MAAMwD,eAAe;IAAA;IAAA,CAAAzD,aAAA,GAAAC,CAAA,SAAG,MAAM,IAAAc,oBAAA,CAAA2C,OAAU,GAAE;IAAC;IAAA1D,aAAA,GAAAC,CAAA;IAE3C,IAAIwD,eAAe,EAAE;MAAA;MAAAzD,aAAA,GAAAsB,CAAA;MACnB;MACA,MAAM;QAAEsB;MAAM,CAAE;MAAA;MAAA,CAAA5C,aAAA,GAAAC,CAAA,SAAG,MAAMe,aAAa,CAACuC,OAAO,EAAEC,IAAI,CAAC;MAAC;MAAAxD,aAAA,GAAAC,CAAA;MACtD,OAAO;QAAEwB,OAAO,EAAE,IAAI;QAAEkC,MAAM,EAAEf;MAAM,CAAE;IAC1C,CAAC,MAAM;MAAA;MAAA5C,aAAA,GAAAsB,CAAA;MACL;MACA,MAAM8B,gBAAgB;MAAA;MAAA,CAAApD,aAAA,GAAAC,CAAA,SAAG,MAAMuC,kBAAkB,EAAE;MAEnD;MACA,MAAMoB,OAAO;MAAA;MAAA,CAAA5D,aAAA,GAAAC,CAAA,SAAG;QACd4D,IAAI,EAAE,eAAe;QACrBC,IAAI,EAAErB,OAAO,CAACC,QAAQ,KAAK,QAAQ;QAAA;QAAA,CAAA1C,aAAA,GAAAsB,CAAA,WAAGyC,SAAS;QAAA;QAAA,CAAA/D,aAAA,GAAAsB,CAAA,WAAGyC,SAAS,EAAE;OAC9D;MAED;MAAA;MAAA/D,aAAA,GAAAC,CAAA;MACA,IAAImD,gBAAgB,EAAE;QAAA;QAAApD,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAC,CAAA;QACpBiC,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC;MACxE,CAAC,MAAM;QAAA;QAAAnC,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAC,CAAA;QACLiC,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;MACvE;MAEA;MACA;MACA,MAAM6B,WAAW;MAAA;MAAA,CAAAhE,aAAA,GAAAC,CAAA,SAAGuD,IAAI,CAACS,GAAG,CAAEC,GAAG,IAAK;QAAA;QAAAlE,aAAA,GAAAoB,CAAA;QAAApB,aAAA,GAAAC,CAAA;QAAA,WAAIiE,GAAG,CAACC,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC,GAAG;MAAH,CAAG,CAAC;MAC1E,MAAMC,WAAW;MAAA;MAAA,CAAApE,aAAA,GAAAC,CAAA,SAAG,GAAGsD,OAAO,IAAIS,WAAW,CAACK,IAAI,CAAC,GAAG,CAAC,EAAE;MAAC;MAAArE,aAAA,GAAAC,CAAA;MAE1D,OAAO,IAAIqE,OAAO,CAAEC,OAAO,IAAI;QAAA;QAAAvE,aAAA,GAAAoB,CAAA;QAAApB,aAAA,GAAAC,CAAA;QAC7BY,aAAA,CAAA6C,OAAU,CAACc,IAAI,CAACJ,WAAW,EAAER,OAAO,EAAE,CAACvB,KAAa,EAAEO,MAAwB,KAAI;UAAA;UAAA5C,aAAA,GAAAoB,CAAA;UAAApB,aAAA,GAAAC,CAAA;UAChF,IAAIoC,KAAK,EAAE;YAAA;YAAArC,aAAA,GAAAsB,CAAA;YAAAtB,aAAA,GAAAC,CAAA;YACT;YACA;YAAI;YAAA,CAAAD,aAAA,GAAAsB,CAAA,WAAAe,KAAK,CAACN,OAAO,CAACkB,QAAQ,CAAC,gBAAgB,CAAC;YAAA;YAAA,CAAAjD,aAAA,GAAAsB,CAAA,WAAKe,KAAmC,CAACoC,IAAI,KAAK,CAAC,GAAG,GAAE;cAAA;cAAAzE,aAAA,GAAAsB,CAAA;cAAAtB,aAAA,GAAAC,CAAA;cAClGiC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;YACjD,CAAC,MAAM;cAAA;cAAAnC,aAAA,GAAAsB,CAAA;cAAAtB,aAAA,GAAAC,CAAA;cAAA,IAAImD,gBAAgB,EAAE;gBAAA;gBAAApD,aAAA,GAAAsB,CAAA;gBAAAtB,aAAA,GAAAC,CAAA;gBAC3BiC,OAAO,CAACC,GAAG,CAAC,kEAAkE,CAAC;cACjF,CAAC;cAAA;cAAA;gBAAAnC,aAAA,GAAAsB,CAAA;cAAA;YAAD;YAAC;YAAAtB,aAAA,GAAAC,CAAA;YACDiC,OAAO,CAACG,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAACN,OAAO,CAAC;YAAC;YAAA/B,aAAA,GAAAC,CAAA;YAC5EsE,OAAO,CAAC;cAAE9C,OAAO,EAAE;YAAK,CAAE,CAAC;UAC7B,CAAC,MAAM;YAAA;YAAAzB,aAAA,GAAAsB,CAAA;YAAAtB,aAAA,GAAAC,CAAA;YACL,IAAImD,gBAAgB,EAAE;cAAA;cAAApD,aAAA,GAAAsB,CAAA;cAAAtB,aAAA,GAAAC,CAAA;cACpBiC,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;YACnE,CAAC,MAAM;cAAA;cAAAnC,aAAA,GAAAsB,CAAA;cAAAtB,aAAA,GAAAC,CAAA;cACLiC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;YACvD;YAAC;YAAAnC,aAAA,GAAAC,CAAA;YACDsE,OAAO,CAAC;cAAE9C,OAAO,EAAE,IAAI;cAAEkC,MAAM,EAAEf,MAAM,EAAE8B,QAAQ;YAAE,CAAE,CAAC;UACxD;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF,CAAC,CAAC,OAAOrC,KAAc,EAAE;IAAA;IAAArC,aAAA,GAAAC,CAAA;IACvBiC,OAAO,CAACG,KAAK,CACX,6CAA6C,EAC7CA,KAAK,YAAYsC,KAAK;IAAA;IAAA,CAAA3E,aAAA,GAAAsB,CAAA,WAAGe,KAAK,CAACN,OAAO;IAAA;IAAA,CAAA/B,aAAA,GAAAsB,CAAA,WAAGsD,MAAM,CAACvC,KAAK,CAAC,EACvD;IAAC;IAAArC,aAAA,GAAAC,CAAA;IACF,OAAO;MAAEwB,OAAO,EAAE;IAAK,CAAE;EAC3B;AACF;AAEA;;;AAGA,eAAeoD,YAAYA,CAAC1D,QAAgB,EAAE2D,SAAA;AAAA;AAAA,CAAA9E,aAAA,GAAAsB,CAAA,WAAoB,WAAW;EAAA;EAAAtB,aAAA,GAAAoB,CAAA;EAAApB,aAAA,GAAAC,CAAA;EAC3E,IAAI;IACF,MAAM8E,MAAM;IAAA;IAAA,CAAA/E,aAAA,GAAAC,CAAA,SAAG,MAAMqD,6BAA6B,CAAC,KAAK,EAAE,CAAC,SAAS,EAAE,KAAK,EAAEwB,SAAS,EAAE3D,QAAQ,CAAC,CAAC;IAAC;IAAAnB,aAAA,GAAAC,CAAA;IAEnG,IAAI8E,MAAM,CAACtD,OAAO,EAAE;MAAA;MAAAzB,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAC,CAAA;MAClBiC,OAAO,CAACC,GAAG,CAAC,WAAWhB,QAAQ,gBAAgB,CAAC;MAAC;MAAAnB,aAAA,GAAAC,CAAA;MACjD,OAAO,IAAI;IACb,CAAC,MAAM;MAAA;MAAAD,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAC,CAAA;MACLiC,OAAO,CAACG,KAAK,CAAC,iBAAiBlB,QAAQ,gBAAgB,CAAC;MAAC;MAAAnB,aAAA,GAAAC,CAAA;MACzD,OAAO,KAAK;IACd;EACF,CAAC,CAAC,OAAOoC,KAAK,EAAE;IAAA;IAAArC,aAAA,GAAAC,CAAA;IACdiC,OAAO,CAACG,KAAK,CAAC,iBAAiBlB,QAAQ,iBAAiB,EAAEkB,KAAK,CAAC;IAAC;IAAArC,aAAA,GAAAC,CAAA;IACjE,OAAO,KAAK;EACd;AACF;AAEA;;;AAGA,eAAe+E,eAAeA,CAAC7D,QAAgB;EAAA;EAAAnB,aAAA,GAAAoB,CAAA;EAAApB,aAAA,GAAAC,CAAA;EAC7C,IAAI;IACF,MAAM8E,MAAM;IAAA;IAAA,CAAA/E,aAAA,GAAAC,CAAA,SAAG,MAAMqD,6BAA6B,CAAC,KAAK,EAAE,CAAC,SAAS,EAAE,QAAQ,EAAEnC,QAAQ,CAAC,CAAC;IAAC;IAAAnB,aAAA,GAAAC,CAAA;IAE3F,IAAI8E,MAAM,CAACtD,OAAO,EAAE;MAAA;MAAAzB,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAC,CAAA;MAClBiC,OAAO,CAACC,GAAG,CAAC,aAAahB,QAAQ,kBAAkB,CAAC;MAAC;MAAAnB,aAAA,GAAAC,CAAA;MACrD,OAAO,IAAI;IACb,CAAC,MAAM;MAAA;MAAAD,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAC,CAAA;MACLiC,OAAO,CAACG,KAAK,CAAC,oBAAoBlB,QAAQ,kBAAkB,CAAC;MAAC;MAAAnB,aAAA,GAAAC,CAAA;MAC9D,OAAO,KAAK;IACd;EACF,CAAC,CAAC,OAAOoC,KAAK,EAAE;IAAA;IAAArC,aAAA,GAAAC,CAAA;IACdiC,OAAO,CAACG,KAAK,CAAC,oBAAoBlB,QAAQ,mBAAmB,EAAEkB,KAAK,CAAC;IAAC;IAAArC,aAAA,GAAAC,CAAA;IACtE,OAAO,KAAK;EACd;AACF;AAEA;;;AAGA,eAAesC,eAAeA,CAACpB,QAAgB;EAAA;EAAAnB,aAAA,GAAAoB,CAAA;EAAApB,aAAA,GAAAC,CAAA;EAC7C,OAAO,IAAIqE,OAAO,CAAEC,OAAO,IAAI;IAAA;IAAAvE,aAAA,GAAAoB,CAAA;IAAApB,aAAA,GAAAC,CAAA;IAC7BU,OAAO,CAACsE,GAAG,CAAC,KAAK,EAAE,CAACC,GAAiB,EAAEC,KAAc,KAAI;MAAA;MAAAnF,aAAA,GAAAoB,CAAA;MAAApB,aAAA,GAAAC,CAAA;MACvD,IAAIiF,GAAG,EAAE;QAAA;QAAAlF,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAC,CAAA;QACPiC,OAAO,CAACG,KAAK,CAAC,kCAAkClB,QAAQ,GAAG,EAAE+D,GAAG,CAAC;QAAC;QAAAlF,aAAA,GAAAC,CAAA;QAClEsE,OAAO,CAAC,KAAK,CAAC;QAAC;QAAAvE,aAAA,GAAAC,CAAA;QACf;MACF,CAAC;MAAA;MAAA;QAAAD,aAAA,GAAAsB,CAAA;MAAA;MAED;MACA,MAAM8D,MAAM;MAAA;MAAA,CAAApF,aAAA,GAAAC,CAAA,SAAIkF,KAAiC,CAACE,IAAI,CAAC,CAAC,GAAGC,IAAI,CAAC,KAAI;QAAA;QAAAtF,aAAA,GAAAoB,CAAA;QAAApB,aAAA,GAAAC,CAAA;QAClE,OAAOqF,IAAI,KAAKnE,QAAQ;MAC1B,CAAC,CAAC;MAAC;MAAAnB,aAAA,GAAAC,CAAA;MACHsE,OAAO,CAACa,MAAM,CAAC;IACjB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA;;;AAGA,eAAe1D,6BAA6BA,CAAA;EAAA;EAAA1B,aAAA,GAAAoB,CAAA;EAAApB,aAAA,GAAAC,CAAA;EAC1C,IAAI;IACF;IACA,MAAMwB,OAAO;IAAA;IAAA,CAAAzB,aAAA,GAAAC,CAAA,SAAG,MAAM4E,YAAY,CAAC,gBAAgB,EAAE,WAAW,CAAC;IAAC;IAAA7E,aAAA,GAAAC,CAAA;IAClE,IAAIwB,OAAO,EAAE;MAAA;MAAAzB,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAC,CAAA;MACXiC,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IACzD,CAAC;IAAA;IAAA;MAAAnC,aAAA,GAAAsB,CAAA;IAAA;IAAAtB,aAAA,GAAAC,CAAA;IACD,OAAOwB,OAAO;EAChB,CAAC,CAAC,OAAOY,KAAK,EAAE;IAAA;IAAArC,aAAA,GAAAC,CAAA;IACdiC,OAAO,CAACG,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAAC;IAAArC,aAAA,GAAAC,CAAA;IAC1D,OAAO,KAAK;EACd;AACF;AAEA;;;AAGA,eAAemC,qBAAqBA,CAACjB,QAAgB,EAAE2D,SAAA;AAAA;AAAA,CAAA9E,aAAA,GAAAsB,CAAA,WAAoB,WAAW;EAAA;EAAAtB,aAAA,GAAAoB,CAAA;EAAApB,aAAA,GAAAC,CAAA;EACpF,IAAI;IACF;IACA,MAAMmF,MAAM;IAAA;IAAA,CAAApF,aAAA,GAAAC,CAAA,SAAG,MAAMsC,eAAe,CAACpB,QAAQ,CAAC;IAAC;IAAAnB,aAAA,GAAAC,CAAA;IAC/C,IAAImF,MAAM,EAAE;MAAA;MAAApF,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAC,CAAA;MACViC,OAAO,CAACC,GAAG,CAAC,GAAGhB,QAAQ,+BAA+B,CAAC;MAAC;MAAAnB,aAAA,GAAAC,CAAA;MACxD,OAAO,IAAI;IACb,CAAC;IAAA;IAAA;MAAAD,aAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,aAAA,GAAAC,CAAA;IACA,OAAO,MAAM4E,YAAY,CAAC1D,QAAQ,EAAE2D,SAAS,CAAC;EAChD,CAAC,CAAC,OAAOzC,KAAK,EAAE;IAAA;IAAArC,aAAA,GAAAC,CAAA;IACdiC,OAAO,CAACG,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IAAC;IAAArC,aAAA,GAAAC,CAAA;IACrD,OAAO,KAAK;EACd;AACF;AAEA;;;AAGO,eAAeE,eAAeA,CAACgB,QAAgB,EAAE2D,SAAA;AAAA;AAAA,CAAA9E,aAAA,GAAAsB,CAAA,WAAoB,WAAW;EAAA;EAAAtB,aAAA,GAAAoB,CAAA;EAAApB,aAAA,GAAAC,CAAA;EACrF,OAAOmC,qBAAqB,CAACjB,QAAQ,EAAE2D,SAAS,CAAC;AACnD;AAEA;;;;;AAKO,eAAe1E,gBAAgBA,CAAA;EAAA;EAAAJ,aAAA,GAAAoB,CAAA;EAAApB,aAAA,GAAAC,CAAA;EACpC,IAAI;IACF;IACA,IAAIsF,gBAA0B;IAAC;IAAAvF,aAAA,GAAAC,CAAA;IAC/B,IAAI;MACF;MACA,MAAMuF,UAAU;MAAA;MAAA,CAAAxF,aAAA,GAAAC,CAAA,SAAG,IAAAQ,kBAAA,CAAAgF,gBAAgB,GAAE;MACrC,MAAMC,cAAc;MAAA;MAAA,CAAA1F,aAAA,GAAAC,CAAA,SAAGuF,UAAU,CAACG,UAAU,CAAkBjF,WAAA,CAAAkF,WAAW,CAACC,eAAe,CAAC;MAAC;MAAA7F,aAAA,GAAAC,CAAA;MAC3FsF,gBAAgB,GAAG,MAAMG,cAAc,CAACI,YAAY,EAAE;IACxD,CAAC,CAAC,OAAOC,OAAO,EAAE;MAAA;MAAA/F,aAAA,GAAAC,CAAA;MAChBiC,OAAO,CAACI,IAAI,CAAC,gEAAgE,EAAEyD,OAAO,CAAC;MACvF;MACA,MAAM;QAAED;MAAY,CAAE;MAAA;MAAA,CAAA9F,aAAA,GAAAC,CAAA,SAAG,MAAAqE,OAAA,CAAAC,OAAA,GAAAyB,IAAA;QAAA;QAAAhG,aAAA,GAAAoB,CAAA;QAAApB,aAAA,GAAAC,CAAA;QAAA,OAAAW,YAAA,CAAAN,OAAA,CAAa,0BAA0B;MAAA,EAAC;MAAC;MAAAN,aAAA,GAAAC,CAAA;MAClEsF,gBAAgB,GAAG,MAAMO,YAAY,EAAE;IACzC;IAAC;IAAA9F,aAAA,GAAAC,CAAA;IACDiC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEoD,gBAAgB,CAAC;IAEnD;IACA,MAAMU,YAAY;IAAA;IAAA,CAAAjG,aAAA,GAAAC,CAAA,SAAGiG,KAAK,CAACC,OAAO,CAACZ,gBAAgB,CAAC;IAAA;IAAA,CAAAvF,aAAA,GAAAsB,CAAA,WAAGiE,gBAAgB;IAAA;IAAA,CAAAvF,aAAA,GAAAsB,CAAA,WAAG,EAAE;IAC5E,MAAM8E,YAAY;IAAA;IAAA,CAAApG,aAAA,GAAAC,CAAA,SAAG,IAAIoG,GAAG,CAAC,CAAC,gBAAgB,EAAE,GAAGJ,YAAY,CAAChC,GAAG,CAAEJ,IAAY,IAAK;MAAA;MAAA7D,aAAA,GAAAoB,CAAA;MAAApB,aAAA,GAAAC,CAAA;MAAA,UAAG4D,IAAI,OAAO;IAAP,CAAO,CAAC,CAAC,CAAC;IAEvG;IACA,MAAMyC,WAAW;IAAA;IAAA,CAAAtG,aAAA,GAAAC,CAAA,SAAG,MAAM,IAAIqE,OAAO,CAA0B,CAACC,OAAO,EAAEgC,MAAM,KAAI;MAAA;MAAAvG,aAAA,GAAAoB,CAAA;MAAApB,aAAA,GAAAC,CAAA;MACjFU,OAAO,CAACsE,GAAG,CAAC,KAAK,EAAE,CAACC,GAAiB,EAAEC,KAAc,KAAI;QAAA;QAAAnF,aAAA,GAAAoB,CAAA;QAAApB,aAAA,GAAAC,CAAA;QACvD,IAAIiF,GAAG,EAAE;UAAA;UAAAlF,aAAA,GAAAsB,CAAA;UAAAtB,aAAA,GAAAC,CAAA;UACPsG,MAAM,CAACrB,GAAG,CAAC;UAAC;UAAAlF,aAAA,GAAAC,CAAA;UACZ;QACF,CAAC;QAAA;QAAA;UAAAD,aAAA,GAAAsB,CAAA;QAAA;QAAAtB,aAAA,GAAAC,CAAA;QACDsE,OAAO,CAACY,KAAgC,CAAC;MAC3C,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;IACA,MAAMqB,eAAe;IAAA;IAAA,CAAAxG,aAAA,GAAAC,CAAA,SAAa,EAAE;IAAC;IAAAD,aAAA,GAAAC,CAAA;IACrC,KAAK,MAAM,CAACwG,EAAE,EAAEC,IAAI,CAAC,IAAIJ,WAAW,EAAE;MACpC,MAAMK,KAAK;MAAA;MAAA,CAAA3G,aAAA,GAAAC,CAAA,SAAGyG,IAAI,CAACE,KAAK,CAAC,KAAK,CAAC;MAAC;MAAA5G,aAAA,GAAAC,CAAA;MAChC,IAAI0G,KAAK,CAACE,MAAM,IAAI,CAAC,EAAE;QAAA;QAAA7G,aAAA,GAAAsB,CAAA;QACrB,MAAMH,QAAQ;QAAA;QAAA,CAAAnB,aAAA,GAAAC,CAAA,SAAG0G,KAAK,CAAC,CAAC,CAAC;QAAC;QAAA3G,aAAA,GAAAC,CAAA;QAC1B;QAAI;QAAA,CAAAD,aAAA,GAAAsB,CAAA,WAAAH,QAAQ,CAAC2F,QAAQ,CAAC,OAAO,CAAC;QAAA;QAAA,CAAA9G,aAAA,GAAAsB,CAAA,WAAImF,EAAE,KAAK,WAAW,GAAE;UAAA;UAAAzG,aAAA,GAAAsB,CAAA;UAAAtB,aAAA,GAAAC,CAAA;UACpD,IAAI,CAACmG,YAAY,CAACW,GAAG,CAAC5F,QAAQ,CAAC,EAAE;YAAA;YAAAnB,aAAA,GAAAsB,CAAA;YAAAtB,aAAA,GAAAC,CAAA;YAC/BuG,eAAe,CAACQ,IAAI,CAAC7F,QAAQ,CAAC;UAChC,CAAC;UAAA;UAAA;YAAAnB,aAAA,GAAAsB,CAAA;UAAA;QACH,CAAC;QAAA;QAAA;UAAAtB,aAAA,GAAAsB,CAAA;QAAA;MACH,CAAC;MAAA;MAAA;QAAAtB,aAAA,GAAAsB,CAAA;MAAA;IACH;IAEA;IACA,IAAI2F,YAAY;IAAA;IAAA,CAAAjH,aAAA,GAAAC,CAAA,SAAG,IAAI;IAAC;IAAAD,aAAA,GAAAC,CAAA;IACxB,KAAK,MAAMiH,MAAM,IAAIV,eAAe,EAAE;MAAA;MAAAxG,aAAA,GAAAC,CAAA;MACpCiC,OAAO,CAACC,GAAG,CAAC,6BAA6B+E,MAAM,EAAE,CAAC;MAClD,MAAMzF,OAAO;MAAA;MAAA,CAAAzB,aAAA,GAAAC,CAAA,SAAG,MAAM+E,eAAe,CAACkC,MAAM,CAAC;MAAC;MAAAlH,aAAA,GAAAC,CAAA;MAC9C,IAAI,CAACwB,OAAO,EAAE;QAAA;QAAAzB,aAAA,GAAAsB,CAAA;QAAAtB,aAAA,GAAAC,CAAA;QACZgH,YAAY,GAAG,KAAK;MACtB,CAAC;MAAA;MAAA;QAAAjH,aAAA,GAAAsB,CAAA;MAAA;IACH;IAAC;IAAAtB,aAAA,GAAAC,CAAA;IAED,IAAIuG,eAAe,CAACK,MAAM,KAAK,CAAC,EAAE;MAAA;MAAA7G,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAC,CAAA;MAChCiC,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;IAC/D,CAAC,MAAM;MAAA;MAAAnC,aAAA,GAAAsB,CAAA;MAAAtB,aAAA,GAAAC,CAAA;MACLiC,OAAO,CAACC,GAAG,CAAC,cAAcqE,eAAe,CAACK,MAAM,qBAAqB,CAAC;IACxE;IAAC;IAAA7G,aAAA,GAAAC,CAAA;IAED,OAAOgH,YAAY;EACrB,CAAC,CAAC,OAAO5E,KAAK,EAAE;IAAA;IAAArC,aAAA,GAAAC,CAAA;IACdiC,OAAO,CAACG,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IAAC;IAAArC,aAAA,GAAAC,CAAA;IACvD,OAAO,KAAK;EACd;AACF","ignoreList":[]}