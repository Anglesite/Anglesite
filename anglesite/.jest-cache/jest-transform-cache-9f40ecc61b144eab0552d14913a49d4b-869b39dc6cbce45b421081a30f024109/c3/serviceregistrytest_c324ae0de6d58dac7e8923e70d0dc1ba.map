{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/app/core/service-registry.test.ts","mappings":"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","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/app/core/service-registry.test.ts"],"sourcesContent":["/**\n * @file Tests for Service Registry and Application Context\n *\n * Tests the service registration system, application context, and\n * integration between various services.\n */\n\nimport {\n  ServiceRegistrar,\n  ApplicationContext,\n  bootstrapServices,\n  Logger,\n  FileSystemService,\n  ServiceFactory,\n} from '../../../app/core/service-registry';\nimport { DIContainer, ServiceKeys } from '../../../app/core/container';\nimport { IStore, ILogger, IFileSystem } from '../../../app/core/interfaces';\n\n// Mock electron for this test\njest.mock('electron', () => ({\n  app: {\n    getPath: jest.fn(() => '/test/userData'),\n    getName: jest.fn(() => 'Test App'),\n  },\n}));\n\ndescribe('Service Registry', () => {\n  let container: DIContainer;\n\n  beforeEach(() => {\n    container = new DIContainer({ name: 'test-registry' });\n  });\n\n  afterEach(async () => {\n    await container.dispose();\n  });\n\n  describe('ServiceRegistrar', () => {\n    it('should register core services', () => {\n      ServiceRegistrar.registerCoreServices(container);\n\n      expect(container.isRegistered(ServiceKeys.LOGGER)).toBe(true);\n      expect(container.isRegistered(ServiceKeys.FILE_SYSTEM)).toBe(true);\n      expect(container.isRegistered(ServiceKeys.STORE)).toBe(true);\n    });\n\n    it('should resolve registered core services', () => {\n      ServiceRegistrar.registerCoreServices(container);\n\n      const logger = container.resolve<ILogger>(ServiceKeys.LOGGER);\n      expect(logger).toBeInstanceOf(Logger);\n\n      const fileSystem = container.resolve<IFileSystem>(ServiceKeys.FILE_SYSTEM);\n      expect(fileSystem).toBeInstanceOf(FileSystemService);\n\n      const store = container.resolve<IStore>(ServiceKeys.STORE);\n      expect(store).toBeDefined();\n      expect(typeof store.get).toBe('function');\n    });\n\n    it('should validate dependencies successfully', () => {\n      expect(() => ServiceRegistrar.registerAllServices(container)).not.toThrow();\n    });\n\n    it('should create service factory', () => {\n      ServiceRegistrar.registerCoreServices(container);\n\n      const factory = container.resolve<ServiceFactory>('serviceFactory');\n      expect(factory).toBeInstanceOf(ServiceFactory);\n    });\n  });\n\n  describe('ServiceFactory', () => {\n    let logger: ILogger;\n    let factory: ServiceFactory;\n\n    beforeEach(() => {\n      logger = new Logger('test');\n      factory = new ServiceFactory(logger);\n    });\n\n    it('should create store service', () => {\n      const store = factory.createStore();\n      expect(store).toBeDefined();\n      expect(typeof store.get).toBe('function');\n      expect(typeof store.set).toBe('function');\n      expect(typeof store.dispose).toBe('function');\n    });\n\n    it('should create logger service', () => {\n      const logger = factory.createLogger('test-context');\n      expect(logger).toBeInstanceOf(Logger);\n    });\n\n    it('should create file system service', () => {\n      const fs = factory.createFileSystem();\n      expect(fs).toBeInstanceOf(FileSystemService);\n      expect(typeof fs.exists).toBe('function');\n      expect(typeof fs.readFile).toBe('function');\n    });\n\n    it('should create website server manager', () => {\n      const wsm = factory.createWebsiteServerManager();\n      expect(wsm).toBeDefined();\n      expect(typeof wsm.startServer).toBe('function');\n      expect(typeof wsm.stopServer).toBe('function');\n    });\n\n    it('should throw for unimplemented services', () => {\n      expect(() => factory.createWebsiteManager()).toThrow(\n        'WebsiteManager not yet fully refactored - waiting for AtomicOperations DI'\n      );\n      // Note: WebsiteServerManager is implemented and should not throw\n      expect(() => factory.createDnsManager()).toThrow('DnsManager not yet refactored for DI');\n      expect(() => factory.createCertificateManager()).toThrow('CertificateManager not yet refactored for DI');\n      expect(() => factory.createMenuManager()).toThrow('MenuManager not yet refactored for DI');\n      expect(() => factory.createWindowManager()).toThrow('WindowManager not yet refactored for DI');\n      expect(() => factory.createAtomicOperations()).toThrow('AtomicOperations not yet refactored for DI');\n      expect(() => factory.createHealthMonitor()).toThrow('HealthMonitor not yet implemented');\n    });\n  });\n\n  describe('Logger', () => {\n    let logger: Logger;\n    let consoleSpy: jest.SpyInstance;\n\n    beforeEach(() => {\n      logger = new Logger('test');\n      consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n    });\n\n    afterEach(() => {\n      consoleSpy.mockRestore();\n    });\n\n    it('should log messages with context', () => {\n      logger.info('test message');\n\n      expect(consoleSpy).toHaveBeenCalledWith(expect.stringMatching(/\\[.*\\] INFO \\[test\\] test message/), '', '');\n    });\n\n    it('should log messages with metadata', () => {\n      logger.info('test message', { key: 'value' });\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringMatching(/\\[.*\\] INFO \\[test\\] test message/),\n        '',\n        '{\"key\":\"value\"}'\n      );\n    });\n\n    it('should create child loggers', () => {\n      const childLogger = logger.child({ requestId: '123' });\n      childLogger.info('child message');\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringMatching(/\\[.*\\] INFO \\[test\\] child message/),\n        '{\"requestId\":\"123\"}',\n        ''\n      );\n    });\n\n    it('should handle different log levels', () => {\n      const debugSpy = jest.spyOn(console, 'debug').mockImplementation();\n      const warnSpy = jest.spyOn(console, 'warn').mockImplementation();\n      const errorSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      try {\n        logger.debug('debug message');\n        logger.info('info message');\n        logger.warn('warn message');\n        logger.error('error message', new Error('test error'));\n\n        expect(debugSpy).toHaveBeenCalled();\n        expect(consoleSpy).toHaveBeenCalled();\n        expect(warnSpy).toHaveBeenCalled();\n        expect(errorSpy).toHaveBeenCalled();\n      } finally {\n        debugSpy.mockRestore();\n        warnSpy.mockRestore();\n        errorSpy.mockRestore();\n      }\n    });\n  });\n\n  describe('FileSystemService', () => {\n    let fs: FileSystemService;\n\n    beforeEach(() => {\n      fs = new FileSystemService();\n    });\n\n    it('should implement IFileSystem interface', () => {\n      expect(typeof fs.exists).toBe('function');\n      expect(typeof fs.readFile).toBe('function');\n      expect(typeof fs.writeFile).toBe('function');\n      expect(typeof fs.mkdir).toBe('function');\n      expect(typeof fs.readdir).toBe('function');\n      expect(typeof fs.rmdir).toBe('function');\n      expect(typeof fs.copyFile).toBe('function');\n      expect(typeof fs.rename).toBe('function');\n      expect(typeof fs.stat).toBe('function');\n    });\n\n    it('should check file existence', async () => {\n      const exists = await fs.exists(__filename);\n      expect(exists).toBe(true);\n\n      const notExists = await fs.exists('/nonexistent/file.txt');\n      expect(notExists).toBe(false);\n    });\n\n    it('should read files', async () => {\n      const content = await fs.readFile(__filename, 'utf-8');\n      expect(typeof content).toBe('string');\n      expect(content).toContain('FileSystemService');\n    });\n\n    it('should get file stats', async () => {\n      const stats = await fs.stat(__filename);\n      expect(typeof stats.isFile).toBe('function');\n      expect(typeof stats.isDirectory).toBe('function');\n      expect(stats.isFile()).toBe(true);\n      expect(stats.isDirectory()).toBe(false);\n      expect(typeof stats.size).toBe('number');\n      expect(stats.mtime).toBeDefined();\n      expect(stats.mtime.getTime).toBeDefined(); // It should be a Date-like object\n    });\n  });\n});\n\ndescribe('ApplicationContext', () => {\n  let container: DIContainer;\n  let appContext: ApplicationContext;\n\n  beforeEach(() => {\n    container = new DIContainer({ name: 'test-app' });\n    ServiceRegistrar.registerCoreServices(container);\n    appContext = new ApplicationContext(container);\n  });\n\n  afterEach(async () => {\n    if (appContext) {\n      await appContext.dispose();\n    }\n  });\n\n  describe('Initialization', () => {\n    it('should initialize successfully', async () => {\n      await expect(appContext.initialize()).resolves.toBeUndefined();\n    });\n\n    it('should not initialize twice', async () => {\n      await appContext.initialize();\n\n      // Second initialization should be a no-op\n      await expect(appContext.initialize()).resolves.toBeUndefined();\n    });\n\n    it('should emit initialized event', async () => {\n      const initHandler = jest.fn();\n      appContext.on('initialized', initHandler);\n\n      await appContext.initialize();\n      expect(initHandler).toHaveBeenCalled();\n    });\n\n    it('should handle initialization errors', async () => {\n      // Create a container that will fail validation\n      const badContainer = new DIContainer({ name: 'bad' });\n      badContainer.register('badService', () => 'test', 'singleton', ['nonexistent']);\n\n      const badContext = new ApplicationContext(badContainer);\n\n      await expect(badContext.initialize()).rejects.toThrow(/not registered/);\n    });\n  });\n\n  describe('Service Resolution', () => {\n    beforeEach(async () => {\n      await appContext.initialize();\n    });\n\n    it('should resolve services after initialization', () => {\n      const logger = appContext.getService<ILogger>(ServiceKeys.LOGGER);\n      expect(logger).toBeInstanceOf(Logger);\n\n      const store = appContext.getService<IStore>(ServiceKeys.STORE);\n      expect(store).toBeDefined();\n    });\n\n    it('should resolve services asynchronously', async () => {\n      const logger = await appContext.getServiceAsync<ILogger>(ServiceKeys.LOGGER);\n      expect(logger).toBeInstanceOf(Logger);\n    });\n\n    it('should throw error when resolving before initialization', () => {\n      const uninitializedContext = new ApplicationContext(container);\n\n      expect(() => uninitializedContext.getService(ServiceKeys.LOGGER)).toThrow(\n        'Application context is not initialized'\n      );\n    });\n\n    it('should throw error for non-existent services', () => {\n      expect(() => appContext.getService('nonexistent')).toThrow(\"Service 'nonexistent' is not registered\");\n    });\n  });\n\n  describe('Environment Methods', () => {\n    beforeEach(async () => {\n      await appContext.initialize();\n    });\n\n    it('should detect production environment', () => {\n      const originalEnv = process.env.NODE_ENV;\n      process.env.NODE_ENV = 'production';\n\n      try {\n        expect(appContext.isProduction()).toBe(true);\n        expect(appContext.isDevelopment()).toBe(false);\n      } finally {\n        process.env.NODE_ENV = originalEnv;\n      }\n    });\n\n    it('should detect development environment', () => {\n      const originalEnv = process.env.NODE_ENV;\n      process.env.NODE_ENV = 'development';\n\n      try {\n        expect(appContext.isProduction()).toBe(false);\n        expect(appContext.isDevelopment()).toBe(true);\n      } finally {\n        process.env.NODE_ENV = originalEnv;\n      }\n    });\n\n    it('should provide version and app data path', () => {\n      expect(typeof appContext.getVersion()).toBe('string');\n      expect(typeof appContext.getAppDataPath()).toBe('string');\n    });\n  });\n\n  describe('Shutdown', () => {\n    beforeEach(async () => {\n      await appContext.initialize();\n    });\n\n    it('should shutdown cleanly', async () => {\n      await expect(appContext.shutdown()).resolves.toBeUndefined();\n    });\n\n    it('should emit shutdown event', async () => {\n      const shutdownHandler = jest.fn();\n      appContext.on('shutdown', shutdownHandler);\n\n      await appContext.shutdown();\n      expect(shutdownHandler).toHaveBeenCalled();\n    });\n\n    it('should dispose services on shutdown', async () => {\n      const store = appContext.getService<IStore>(ServiceKeys.STORE);\n      const disposeSpy = jest.spyOn(store, 'dispose');\n\n      await appContext.shutdown();\n      expect(disposeSpy).toHaveBeenCalled();\n    });\n\n    it('should handle disposal errors gracefully', async () => {\n      // Mock a service that throws on dispose\n      const mockService = {\n        dispose: jest.fn().mockImplementation(() => {\n          throw new Error('Dispose failed');\n        }),\n      };\n\n      container.registerInstance('mockService', mockService);\n      container.resolve('mockService'); // Ensure it's instantiated\n\n      // Should complete shutdown despite dispose errors (not throw)\n      await appContext.shutdown();\n      expect(mockService.dispose).toHaveBeenCalled();\n    });\n  });\n});\n\ndescribe('Bootstrap Integration', () => {\n  // Skip this test in normal test runs to avoid Electron dependencies\n  it.skip('should bootstrap services successfully', async () => {\n    const appContext = await bootstrapServices();\n\n    expect(appContext).toBeInstanceOf(ApplicationContext);\n\n    // Should be able to resolve core services\n    const logger = appContext.getService<ILogger>(ServiceKeys.LOGGER);\n    expect(logger).toBeInstanceOf(Logger);\n\n    const store = appContext.getService<IStore>(ServiceKeys.STORE);\n    expect(store).toBeDefined();\n\n    await appContext.dispose();\n  });\n});\n"],"version":3}