{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/utils/first-launch.test.ts","mappings":"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","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/utils/first-launch.test.ts"],"sourcesContent":["/**\n * @file Tests for first launch setup flow utilities\n */\n\nimport { app, dialog } from 'electron';\nimport { handleFirstLaunch } from '../../app/utils/first-launch';\nimport { IStore } from '../../app/core/interfaces';\nimport { isCAInstalledInSystem, installCAInSystem } from '../../app/certificates';\nimport { showFirstLaunchAssistant } from '../../app/ui/window-manager';\n\n// Mock dependencies\njest.mock('electron', () => ({\n  app: {\n    quit: jest.fn(),\n  },\n  dialog: {\n    showMessageBoxSync: jest.fn(),\n  },\n  nativeTheme: {\n    themeSource: 'system',\n    on: jest.fn(),\n    shouldUseDarkColors: false,\n  },\n}));\n\n// Store class removed - now using DI with StoreService\njest.mock('../../app/certificates');\njest.mock('../../app/ui/window-manager');\n\nconst mockApp = app as jest.Mocked<typeof app>;\nconst mockDialog = dialog as jest.Mocked<typeof dialog>;\nconst mockIsCAInstalledInSystem = isCAInstalledInSystem as jest.MockedFunction<typeof isCAInstalledInSystem>;\nconst mockInstallCAInSystem = installCAInSystem as jest.MockedFunction<typeof installCAInSystem>;\nconst mockShowFirstLaunchAssistant = showFirstLaunchAssistant as jest.MockedFunction<typeof showFirstLaunchAssistant>;\n\ndescribe('First Launch', () => {\n  let mockStore: jest.Mocked<Partial<IStore>>;\n  let consoleErrorSpy: jest.SpyInstance;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    mockStore = {\n      get: jest.fn(),\n      set: jest.fn(),\n      dispose: jest.fn(),\n    } as jest.Mocked<Partial<IStore>>;\n\n    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();\n  });\n\n  afterEach(() => {\n    consoleErrorSpy.mockRestore();\n  });\n\n  describe('handleFirstLaunch', () => {\n    it('should skip setup if CA is already installed and set HTTPS mode', async () => {\n      mockIsCAInstalledInSystem.mockResolvedValue(true);\n\n      await handleFirstLaunch(mockStore as IStore);\n\n      expect(mockIsCAInstalledInSystem).toHaveBeenCalled();\n      expect(mockShowFirstLaunchAssistant).not.toHaveBeenCalled();\n      expect(mockStore.set).toHaveBeenCalledWith('httpsMode', 'https');\n      expect(mockStore.set).toHaveBeenCalledWith('firstLaunchCompleted', true);\n      expect(mockStore.set).toHaveBeenCalledTimes(2);\n    });\n\n    it('should quit app if user cancels first launch assistant', async () => {\n      mockIsCAInstalledInSystem.mockResolvedValue(false);\n      mockShowFirstLaunchAssistant.mockResolvedValue(null);\n\n      await handleFirstLaunch(mockStore as IStore);\n\n      expect(mockIsCAInstalledInSystem).toHaveBeenCalled();\n      expect(mockShowFirstLaunchAssistant).toHaveBeenCalled();\n      expect(mockApp.quit).toHaveBeenCalled();\n      expect(mockStore.set).not.toHaveBeenCalled();\n    });\n\n    it('should set HTTPS mode when user chooses HTTPS and CA installation succeeds', async () => {\n      mockIsCAInstalledInSystem.mockResolvedValue(false);\n      mockShowFirstLaunchAssistant.mockResolvedValue('https');\n      mockInstallCAInSystem.mockResolvedValue(true);\n\n      await handleFirstLaunch(mockStore as IStore);\n\n      expect(mockIsCAInstalledInSystem).toHaveBeenCalled();\n      expect(mockShowFirstLaunchAssistant).toHaveBeenCalled();\n      expect(mockInstallCAInSystem).toHaveBeenCalled();\n      expect(mockStore.set).toHaveBeenCalledWith('httpsMode', 'https');\n      expect(mockStore.set).toHaveBeenCalledWith('firstLaunchCompleted', true);\n      expect(mockStore.set).toHaveBeenCalledTimes(2);\n      expect(mockDialog.showMessageBoxSync).not.toHaveBeenCalled();\n    });\n\n    it('should fall back to HTTP mode when CA installation fails', async () => {\n      mockIsCAInstalledInSystem.mockResolvedValue(false);\n      mockShowFirstLaunchAssistant.mockResolvedValue('https');\n      mockInstallCAInSystem.mockResolvedValue(false);\n      mockDialog.showMessageBoxSync.mockReturnValue(0);\n\n      await handleFirstLaunch(mockStore as IStore);\n\n      expect(mockIsCAInstalledInSystem).toHaveBeenCalled();\n      expect(mockShowFirstLaunchAssistant).toHaveBeenCalled();\n      expect(mockInstallCAInSystem).toHaveBeenCalled();\n      expect(mockStore.set).toHaveBeenCalledWith('httpsMode', 'http');\n      expect(mockStore.set).toHaveBeenCalledWith('firstLaunchCompleted', true);\n      expect(mockStore.set).toHaveBeenCalledTimes(2);\n      expect(mockDialog.showMessageBoxSync).toHaveBeenCalledWith({\n        type: 'warning',\n        title: 'Certificate Installation Failed',\n        message: 'Failed to install the security certificate.',\n        detail: 'Anglesite will continue in HTTP mode. You can retry HTTPS setup in the settings.',\n        buttons: ['Continue'],\n      });\n    });\n\n    it('should handle CA installation errors and fall back to HTTP mode', async () => {\n      const testError = new Error('Installation error');\n      mockIsCAInstalledInSystem.mockResolvedValue(false);\n      mockShowFirstLaunchAssistant.mockResolvedValue('https');\n      mockInstallCAInSystem.mockRejectedValue(testError);\n      mockDialog.showMessageBoxSync.mockReturnValue(0);\n\n      await handleFirstLaunch(mockStore as IStore);\n\n      expect(mockIsCAInstalledInSystem).toHaveBeenCalled();\n      expect(mockShowFirstLaunchAssistant).toHaveBeenCalled();\n      expect(mockInstallCAInSystem).toHaveBeenCalled();\n      expect(consoleErrorSpy).toHaveBeenCalledWith('Error during CA installation:', testError);\n      expect(mockStore.set).toHaveBeenCalledWith('httpsMode', 'http');\n      expect(mockStore.set).toHaveBeenCalledWith('firstLaunchCompleted', true);\n      expect(mockStore.set).toHaveBeenCalledTimes(2);\n      expect(mockDialog.showMessageBoxSync).toHaveBeenCalledWith({\n        type: 'error',\n        title: 'Setup Error',\n        message: 'An error occurred during setup.',\n        detail: 'Anglesite will continue in HTTP mode.',\n        buttons: ['Continue'],\n      });\n    });\n\n    it('should set HTTP mode when user explicitly chooses HTTP', async () => {\n      mockIsCAInstalledInSystem.mockResolvedValue(false);\n      mockShowFirstLaunchAssistant.mockResolvedValue('http');\n\n      await handleFirstLaunch(mockStore as IStore);\n\n      expect(mockIsCAInstalledInSystem).toHaveBeenCalled();\n      expect(mockShowFirstLaunchAssistant).toHaveBeenCalled();\n      expect(mockInstallCAInSystem).not.toHaveBeenCalled();\n      expect(mockStore.set).toHaveBeenCalledWith('httpsMode', 'http');\n      expect(mockStore.set).toHaveBeenCalledWith('firstLaunchCompleted', true);\n      expect(mockStore.set).toHaveBeenCalledTimes(2);\n      expect(mockDialog.showMessageBoxSync).not.toHaveBeenCalled();\n    });\n\n    it('should handle unexpected user choice values', async () => {\n      mockIsCAInstalledInSystem.mockResolvedValue(false);\n      mockShowFirstLaunchAssistant.mockResolvedValue('unexpected' as any); // eslint-disable-line @typescript-eslint/no-explicit-any\n\n      await handleFirstLaunch(mockStore as IStore);\n\n      expect(mockIsCAInstalledInSystem).toHaveBeenCalled();\n      expect(mockShowFirstLaunchAssistant).toHaveBeenCalled();\n      expect(mockInstallCAInSystem).not.toHaveBeenCalled();\n      expect(mockStore.set).toHaveBeenCalledWith('httpsMode', 'http');\n      expect(mockStore.set).toHaveBeenCalledWith('firstLaunchCompleted', true);\n      expect(mockStore.set).toHaveBeenCalledTimes(2);\n    });\n\n    it('should handle CA installation throwing non-Error objects', async () => {\n      mockIsCAInstalledInSystem.mockResolvedValue(false);\n      mockShowFirstLaunchAssistant.mockResolvedValue('https');\n      mockInstallCAInSystem.mockRejectedValue('String error');\n      mockDialog.showMessageBoxSync.mockReturnValue(0);\n\n      await handleFirstLaunch(mockStore as IStore);\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith('Error during CA installation:', 'String error');\n      expect(mockStore.set).toHaveBeenCalledWith('httpsMode', 'http');\n      expect(mockStore.set).toHaveBeenCalledWith('firstLaunchCompleted', true);\n      expect(mockDialog.showMessageBoxSync).toHaveBeenCalledWith({\n        type: 'error',\n        title: 'Setup Error',\n        message: 'An error occurred during setup.',\n        detail: 'Anglesite will continue in HTTP mode.',\n        buttons: ['Continue'],\n      });\n    });\n\n    it('should handle undefined store properly', async () => {\n      mockIsCAInstalledInSystem.mockResolvedValue(false);\n      mockShowFirstLaunchAssistant.mockResolvedValue('http');\n\n      await handleFirstLaunch(mockStore as IStore);\n\n      expect(mockStore.set).toHaveBeenCalledWith('httpsMode', 'http');\n      expect(mockStore.set).toHaveBeenCalledWith('firstLaunchCompleted', true);\n    });\n\n    it('should handle multiple consecutive calls correctly', async () => {\n      mockIsCAInstalledInSystem.mockResolvedValue(true);\n\n      await handleFirstLaunch(mockStore as IStore);\n      await handleFirstLaunch(mockStore as IStore);\n\n      expect(mockIsCAInstalledInSystem).toHaveBeenCalledTimes(2);\n      expect(mockStore.set).toHaveBeenCalledTimes(4);\n      expect(mockStore.set).toHaveBeenNthCalledWith(1, 'httpsMode', 'https');\n      expect(mockStore.set).toHaveBeenNthCalledWith(2, 'firstLaunchCompleted', true);\n      expect(mockStore.set).toHaveBeenNthCalledWith(3, 'httpsMode', 'https');\n      expect(mockStore.set).toHaveBeenNthCalledWith(4, 'firstLaunchCompleted', true);\n    });\n  });\n});\n"],"version":3}