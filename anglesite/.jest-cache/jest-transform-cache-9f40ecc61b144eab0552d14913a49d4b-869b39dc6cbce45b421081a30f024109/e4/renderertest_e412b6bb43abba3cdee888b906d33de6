cd96864285c3ad0501746b1ab7d974db
"use strict";
/**
 * @file Tests for the Electron renderer process.
 */
// Mock Electron's ipcRenderer (not used directly in tests)
jest.mock('electron', () => ({
    ipcRenderer: {
        send: jest.fn(),
    },
}));
describe('Renderer Process', () => {
    let buildButton;
    beforeEach(() => {
        jest.clearAllMocks();
        // Set up a minimal DOM for the test
        document.body.innerHTML = `
      <button id="preview">Preview</button>
      <button id="open-browser">Open Browser</button>
      <button id="reload">Reload</button>
      <button id="devtools">DevTools</button>
    `;
        buildButton = document.getElementById('preview');
        // Dynamically import the renderer script after the DOM is set up
        jest.isolateModules(() => {
            jest.requireActual('../dist/app/renderer.js');
        });
    });
    it("should send a 'preview' message when the preview button is clicked", () => {
        const mockElectronAPI = global.mockElectronAPI;
        buildButton.click();
        expect(mockElectronAPI.send).toHaveBeenCalledWith('preview');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2R3ay9EZXZlbG9wZXIvZ2l0bGFiLmNvbS9kYXZpZHdrZWl0aC9AZHdrL2FuZ2xlc2l0ZS90ZXN0L3JlbmRlcmVyLnRlc3QudHMiLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHO0FBQ0gsMkRBQTJEO0FBQzNELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDM0IsV0FBVyxFQUFFO1FBQ1gsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7S0FDaEI7Q0FDRixDQUFDLENBQUMsQ0FBQztBQUVKLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7SUFDaEMsSUFBSSxXQUF3QixDQUFDO0lBRTdCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFckIsb0NBQW9DO1FBQ3BDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHOzs7OztLQUt6QixDQUFDO1FBQ0YsV0FBVyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFnQixDQUFDO1FBRWhFLGlFQUFpRTtRQUNqRSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRTtZQUN2QixJQUFJLENBQUMsYUFBYSxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDaEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxvRUFBb0UsRUFBRSxHQUFHLEVBQUU7UUFDNUUsTUFBTSxlQUFlLEdBQUksTUFBOEQsQ0FBQyxlQUFlLENBQUM7UUFDeEcsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3BCLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsb0JBQW9CLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDL0QsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvZHdrL0RldmVsb3Blci9naXRsYWIuY29tL2Rhdmlkd2tlaXRoL0Bkd2svYW5nbGVzaXRlL3Rlc3QvcmVuZGVyZXIudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIFRlc3RzIGZvciB0aGUgRWxlY3Ryb24gcmVuZGVyZXIgcHJvY2Vzcy5cbiAqL1xuLy8gTW9jayBFbGVjdHJvbidzIGlwY1JlbmRlcmVyIChub3QgdXNlZCBkaXJlY3RseSBpbiB0ZXN0cylcbmplc3QubW9jaygnZWxlY3Ryb24nLCAoKSA9PiAoe1xuICBpcGNSZW5kZXJlcjoge1xuICAgIHNlbmQ6IGplc3QuZm4oKSxcbiAgfSxcbn0pKTtcblxuZGVzY3JpYmUoJ1JlbmRlcmVyIFByb2Nlc3MnLCAoKSA9PiB7XG4gIGxldCBidWlsZEJ1dHRvbjogSFRNTEVsZW1lbnQ7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG5cbiAgICAvLyBTZXQgdXAgYSBtaW5pbWFsIERPTSBmb3IgdGhlIHRlc3RcbiAgICBkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9IGBcbiAgICAgIDxidXR0b24gaWQ9XCJwcmV2aWV3XCI+UHJldmlldzwvYnV0dG9uPlxuICAgICAgPGJ1dHRvbiBpZD1cIm9wZW4tYnJvd3NlclwiPk9wZW4gQnJvd3NlcjwvYnV0dG9uPlxuICAgICAgPGJ1dHRvbiBpZD1cInJlbG9hZFwiPlJlbG9hZDwvYnV0dG9uPlxuICAgICAgPGJ1dHRvbiBpZD1cImRldnRvb2xzXCI+RGV2VG9vbHM8L2J1dHRvbj5cbiAgICBgO1xuICAgIGJ1aWxkQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByZXZpZXcnKSBhcyBIVE1MRWxlbWVudDtcblxuICAgIC8vIER5bmFtaWNhbGx5IGltcG9ydCB0aGUgcmVuZGVyZXIgc2NyaXB0IGFmdGVyIHRoZSBET00gaXMgc2V0IHVwXG4gICAgamVzdC5pc29sYXRlTW9kdWxlcygoKSA9PiB7XG4gICAgICBqZXN0LnJlcXVpcmVBY3R1YWwoJy4uL2Rpc3QvYXBwL3JlbmRlcmVyLmpzJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIHNlbmQgYSAncHJldmlldycgbWVzc2FnZSB3aGVuIHRoZSBwcmV2aWV3IGJ1dHRvbiBpcyBjbGlja2VkXCIsICgpID0+IHtcbiAgICBjb25zdCBtb2NrRWxlY3Ryb25BUEkgPSAoZ2xvYmFsIGFzIHVua25vd24gYXMgeyBtb2NrRWxlY3Ryb25BUEk6IHsgc2VuZDogamVzdC5Nb2NrIH0gfSkubW9ja0VsZWN0cm9uQVBJO1xuICAgIGJ1aWxkQnV0dG9uLmNsaWNrKCk7XG4gICAgZXhwZWN0KG1vY2tFbGVjdHJvbkFQSS5zZW5kKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgncHJldmlldycpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9