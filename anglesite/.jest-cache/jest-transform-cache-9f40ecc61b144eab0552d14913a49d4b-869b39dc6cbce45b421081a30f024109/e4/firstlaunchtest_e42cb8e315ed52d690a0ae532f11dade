078959767ee23b4be3493e48b18c791d
"use strict";
/**
 * @file Tests for first launch setup flow utilities
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dependencies
jest.mock('electron', () => ({
    app: {
        quit: jest.fn(),
    },
    dialog: {
        showMessageBoxSync: jest.fn(),
    },
    nativeTheme: {
        themeSource: 'system',
        on: jest.fn(),
        shouldUseDarkColors: false,
    },
}));
// Store class removed - now using DI with StoreService
jest.mock('../../app/certificates');
jest.mock('../../app/ui/window-manager');
const electron_1 = require("electron");
const first_launch_1 = require("../../app/utils/first-launch");
const certificates_1 = require("../../app/certificates");
const window_manager_1 = require("../../app/ui/window-manager");
const mockApp = electron_1.app;
const mockDialog = electron_1.dialog;
const mockIsCAInstalledInSystem = certificates_1.isCAInstalledInSystem;
const mockInstallCAInSystem = certificates_1.installCAInSystem;
const mockShowFirstLaunchAssistant = window_manager_1.showFirstLaunchAssistant;
describe('First Launch', () => {
    let mockStore;
    let consoleErrorSpy;
    beforeEach(() => {
        jest.clearAllMocks();
        mockStore = {
            get: jest.fn(),
            set: jest.fn(),
            dispose: jest.fn(),
        };
        consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
    });
    afterEach(() => {
        consoleErrorSpy.mockRestore();
    });
    describe('handleFirstLaunch', () => {
        it('should skip setup if CA is already installed and set HTTPS mode', async () => {
            mockIsCAInstalledInSystem.mockResolvedValue(true);
            await (0, first_launch_1.handleFirstLaunch)(mockStore);
            expect(mockIsCAInstalledInSystem).toHaveBeenCalled();
            expect(mockShowFirstLaunchAssistant).not.toHaveBeenCalled();
            expect(mockStore.set).toHaveBeenCalledWith('httpsMode', 'https');
            expect(mockStore.set).toHaveBeenCalledWith('firstLaunchCompleted', true);
            expect(mockStore.set).toHaveBeenCalledTimes(2);
        });
        it('should quit app if user cancels first launch assistant', async () => {
            mockIsCAInstalledInSystem.mockResolvedValue(false);
            mockShowFirstLaunchAssistant.mockResolvedValue(null);
            await (0, first_launch_1.handleFirstLaunch)(mockStore);
            expect(mockIsCAInstalledInSystem).toHaveBeenCalled();
            expect(mockShowFirstLaunchAssistant).toHaveBeenCalled();
            expect(mockApp.quit).toHaveBeenCalled();
            expect(mockStore.set).not.toHaveBeenCalled();
        });
        it('should set HTTPS mode when user chooses HTTPS and CA installation succeeds', async () => {
            mockIsCAInstalledInSystem.mockResolvedValue(false);
            mockShowFirstLaunchAssistant.mockResolvedValue('https');
            mockInstallCAInSystem.mockResolvedValue(true);
            await (0, first_launch_1.handleFirstLaunch)(mockStore);
            expect(mockIsCAInstalledInSystem).toHaveBeenCalled();
            expect(mockShowFirstLaunchAssistant).toHaveBeenCalled();
            expect(mockInstallCAInSystem).toHaveBeenCalled();
            expect(mockStore.set).toHaveBeenCalledWith('httpsMode', 'https');
            expect(mockStore.set).toHaveBeenCalledWith('firstLaunchCompleted', true);
            expect(mockStore.set).toHaveBeenCalledTimes(2);
            expect(mockDialog.showMessageBoxSync).not.toHaveBeenCalled();
        });
        it('should fall back to HTTP mode when CA installation fails', async () => {
            mockIsCAInstalledInSystem.mockResolvedValue(false);
            mockShowFirstLaunchAssistant.mockResolvedValue('https');
            mockInstallCAInSystem.mockResolvedValue(false);
            mockDialog.showMessageBoxSync.mockReturnValue(0);
            await (0, first_launch_1.handleFirstLaunch)(mockStore);
            expect(mockIsCAInstalledInSystem).toHaveBeenCalled();
            expect(mockShowFirstLaunchAssistant).toHaveBeenCalled();
            expect(mockInstallCAInSystem).toHaveBeenCalled();
            expect(mockStore.set).toHaveBeenCalledWith('httpsMode', 'http');
            expect(mockStore.set).toHaveBeenCalledWith('firstLaunchCompleted', true);
            expect(mockStore.set).toHaveBeenCalledTimes(2);
            expect(mockDialog.showMessageBoxSync).toHaveBeenCalledWith({
                type: 'warning',
                title: 'Certificate Installation Failed',
                message: 'Failed to install the security certificate.',
                detail: 'Anglesite will continue in HTTP mode. You can retry HTTPS setup in the settings.',
                buttons: ['Continue'],
            });
        });
        it('should handle CA installation errors and fall back to HTTP mode', async () => {
            const testError = new Error('Installation error');
            mockIsCAInstalledInSystem.mockResolvedValue(false);
            mockShowFirstLaunchAssistant.mockResolvedValue('https');
            mockInstallCAInSystem.mockRejectedValue(testError);
            mockDialog.showMessageBoxSync.mockReturnValue(0);
            await (0, first_launch_1.handleFirstLaunch)(mockStore);
            expect(mockIsCAInstalledInSystem).toHaveBeenCalled();
            expect(mockShowFirstLaunchAssistant).toHaveBeenCalled();
            expect(mockInstallCAInSystem).toHaveBeenCalled();
            expect(consoleErrorSpy).toHaveBeenCalledWith('Error during CA installation:', testError);
            expect(mockStore.set).toHaveBeenCalledWith('httpsMode', 'http');
            expect(mockStore.set).toHaveBeenCalledWith('firstLaunchCompleted', true);
            expect(mockStore.set).toHaveBeenCalledTimes(2);
            expect(mockDialog.showMessageBoxSync).toHaveBeenCalledWith({
                type: 'error',
                title: 'Setup Error',
                message: 'An error occurred during setup.',
                detail: 'Anglesite will continue in HTTP mode.',
                buttons: ['Continue'],
            });
        });
        it('should set HTTP mode when user explicitly chooses HTTP', async () => {
            mockIsCAInstalledInSystem.mockResolvedValue(false);
            mockShowFirstLaunchAssistant.mockResolvedValue('http');
            await (0, first_launch_1.handleFirstLaunch)(mockStore);
            expect(mockIsCAInstalledInSystem).toHaveBeenCalled();
            expect(mockShowFirstLaunchAssistant).toHaveBeenCalled();
            expect(mockInstallCAInSystem).not.toHaveBeenCalled();
            expect(mockStore.set).toHaveBeenCalledWith('httpsMode', 'http');
            expect(mockStore.set).toHaveBeenCalledWith('firstLaunchCompleted', true);
            expect(mockStore.set).toHaveBeenCalledTimes(2);
            expect(mockDialog.showMessageBoxSync).not.toHaveBeenCalled();
        });
        it('should handle unexpected user choice values', async () => {
            mockIsCAInstalledInSystem.mockResolvedValue(false);
            mockShowFirstLaunchAssistant.mockResolvedValue('unexpected'); // eslint-disable-line @typescript-eslint/no-explicit-any
            await (0, first_launch_1.handleFirstLaunch)(mockStore);
            expect(mockIsCAInstalledInSystem).toHaveBeenCalled();
            expect(mockShowFirstLaunchAssistant).toHaveBeenCalled();
            expect(mockInstallCAInSystem).not.toHaveBeenCalled();
            expect(mockStore.set).toHaveBeenCalledWith('httpsMode', 'http');
            expect(mockStore.set).toHaveBeenCalledWith('firstLaunchCompleted', true);
            expect(mockStore.set).toHaveBeenCalledTimes(2);
        });
        it('should handle CA installation throwing non-Error objects', async () => {
            mockIsCAInstalledInSystem.mockResolvedValue(false);
            mockShowFirstLaunchAssistant.mockResolvedValue('https');
            mockInstallCAInSystem.mockRejectedValue('String error');
            mockDialog.showMessageBoxSync.mockReturnValue(0);
            await (0, first_launch_1.handleFirstLaunch)(mockStore);
            expect(consoleErrorSpy).toHaveBeenCalledWith('Error during CA installation:', 'String error');
            expect(mockStore.set).toHaveBeenCalledWith('httpsMode', 'http');
            expect(mockStore.set).toHaveBeenCalledWith('firstLaunchCompleted', true);
            expect(mockDialog.showMessageBoxSync).toHaveBeenCalledWith({
                type: 'error',
                title: 'Setup Error',
                message: 'An error occurred during setup.',
                detail: 'Anglesite will continue in HTTP mode.',
                buttons: ['Continue'],
            });
        });
        it('should handle undefined store properly', async () => {
            mockIsCAInstalledInSystem.mockResolvedValue(false);
            mockShowFirstLaunchAssistant.mockResolvedValue('http');
            await (0, first_launch_1.handleFirstLaunch)(mockStore);
            expect(mockStore.set).toHaveBeenCalledWith('httpsMode', 'http');
            expect(mockStore.set).toHaveBeenCalledWith('firstLaunchCompleted', true);
        });
        it('should handle multiple consecutive calls correctly', async () => {
            mockIsCAInstalledInSystem.mockResolvedValue(true);
            await (0, first_launch_1.handleFirstLaunch)(mockStore);
            await (0, first_launch_1.handleFirstLaunch)(mockStore);
            expect(mockIsCAInstalledInSystem).toHaveBeenCalledTimes(2);
            expect(mockStore.set).toHaveBeenCalledTimes(4);
            expect(mockStore.set).toHaveBeenNthCalledWith(1, 'httpsMode', 'https');
            expect(mockStore.set).toHaveBeenNthCalledWith(2, 'firstLaunchCompleted', true);
            expect(mockStore.set).toHaveBeenNthCalledWith(3, 'httpsMode', 'https');
            expect(mockStore.set).toHaveBeenNthCalledWith(4, 'firstLaunchCompleted', true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,