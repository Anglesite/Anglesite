{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/setup.ts","mappings":"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","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/setup.ts"],"sourcesContent":["/**\n * @file Jest setup file for renderer tests\n */\n\n// Mock the global context system to prevent initialization errors during tests\njest.doMock('../app/core/service-registry', () => {\n  const originalModule = jest.requireActual('../app/core/service-registry');\n\n  // Create a mock store service\n  const mockStore = {\n    get: jest.fn().mockReturnValue('system'), // Default theme preference\n    set: jest.fn(),\n    getAll: jest.fn().mockReturnValue({}),\n    delete: jest.fn(),\n    clear: jest.fn(),\n    has: jest.fn().mockReturnValue(false),\n  };\n\n  // Create a mock global context\n  const mockGlobalContext = {\n    getService: jest.fn((serviceName) => {\n      if (serviceName === 'store') {\n        return mockStore;\n      }\n      return {};\n    }),\n    isInitialized: true,\n  };\n\n  return {\n    ...originalModule,\n    getGlobalContext: jest.fn().mockReturnValue(mockGlobalContext),\n    globalAppContext: mockGlobalContext,\n  };\n});\n\n// Mock Electron Menu for UI tests - use jest.doMock to avoid interfering with other modules\njest.doMock('electron', () => ({\n  Menu: {\n    buildFromTemplate: jest.fn(),\n    setApplicationMenu: jest.fn(),\n  },\n  dialog: {\n    showErrorBox: jest.fn(),\n    showMessageBox: jest.fn(),\n    showOpenDialog: jest.fn(),\n    showSaveDialog: jest.fn(),\n  },\n  BrowserWindow: jest.fn(),\n  WebContentsView: jest.fn(),\n  MenuItem: jest.fn(),\n  app: {\n    getName: jest.fn(() => 'Test App'),\n    getVersion: jest.fn(() => '1.0.0'),\n    quit: jest.fn(),\n    setName: jest.fn(),\n    getPath: jest.fn((path: string) => {\n      const pathMap: Record<string, string> = {\n        userData: '/mock/userData',\n        appData: '/mock/appData',\n        home: '/mock/home',\n        temp: '/mock/temp',\n      };\n      return pathMap[path] || '/mock/path';\n    }),\n  },\n  ipcMain: {\n    handle: jest.fn(),\n    on: jest.fn(),\n    removeAllListeners: jest.fn(),\n  },\n  ipcRenderer: {\n    invoke: jest.fn(),\n    on: jest.fn(),\n    removeAllListeners: jest.fn(),\n  },\n}));\n\n// Import custom matchers to make them available in all test files\nimport './matchers/custom-matchers';\n\n// Import third-party mocks to ensure they're applied early\nimport './mocks/third-party';\n\n// Global afterEach cleanup to prevent hanging tests\nafterEach(() => {\n  // Clear all timers\n  jest.clearAllTimers();\n  jest.useRealTimers();\n\n  // Clear all mocks after each test\n  jest.clearAllMocks();\n});\n\n// Setup TextEncoder/TextDecoder for JSDOM\nif (typeof global.TextEncoder === 'undefined') {\n  const { TextEncoder, TextDecoder } = require('util');\n  global.TextEncoder = TextEncoder;\n  global.TextDecoder = TextDecoder;\n}\n\n// Set environment variable for store service test fallback\nprocess.env.ANGLESITE_TEST_DATA = '/tmp/anglesite-test';\n\n// Mock electronAPI globally for all tests\nconst mockElectronAPI = {\n  send: jest.fn(),\n  on: jest.fn(),\n  removeAllListeners: jest.fn(),\n};\n\n// Set up window.electronAPI for renderer tests\nObject.defineProperty(window, 'electronAPI', {\n  value: mockElectronAPI,\n  writable: true,\n});\n\n// Export for tests that need direct access\n(global as unknown as { mockElectronAPI: typeof mockElectronAPI }).mockElectronAPI = mockElectronAPI;\n\n// Suppress console.warn for deprecated functions during tests to reduce noise\nconst originalWarn = console.warn;\nbeforeEach(() => {\n  console.warn = jest.fn();\n});\n\nafterEach(() => {\n  console.warn = originalWarn;\n});\n"],"version":3}