53797a8c456ca8189b7e87a221bd2118
"use strict";
/**
 * @file Jest setup file for renderer tests
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the global context system to prevent initialization errors during tests
jest.doMock('../app/core/service-registry', () => {
    const originalModule = jest.requireActual('../app/core/service-registry');
    // Create a mock store service
    const mockStore = {
        get: jest.fn().mockReturnValue('system'), // Default theme preference
        set: jest.fn(),
        getAll: jest.fn().mockReturnValue({}),
        delete: jest.fn(),
        clear: jest.fn(),
        has: jest.fn().mockReturnValue(false),
    };
    // Create a mock global context
    const mockGlobalContext = {
        getService: jest.fn((serviceName) => {
            if (serviceName === 'store') {
                return mockStore;
            }
            return {};
        }),
        isInitialized: true,
    };
    return {
        ...originalModule,
        getGlobalContext: jest.fn().mockReturnValue(mockGlobalContext),
        globalAppContext: mockGlobalContext,
    };
});
// Mock Electron Menu for UI tests - use jest.doMock to avoid interfering with other modules
jest.doMock('electron', () => ({
    Menu: {
        buildFromTemplate: jest.fn(),
        setApplicationMenu: jest.fn(),
    },
    dialog: {
        showErrorBox: jest.fn(),
        showMessageBox: jest.fn(),
        showOpenDialog: jest.fn(),
        showSaveDialog: jest.fn(),
    },
    BrowserWindow: jest.fn(),
    WebContentsView: jest.fn(),
    MenuItem: jest.fn(),
    app: {
        getName: jest.fn(() => 'Test App'),
        getVersion: jest.fn(() => '1.0.0'),
        quit: jest.fn(),
        setName: jest.fn(),
        getPath: jest.fn((path) => {
            const pathMap = {
                userData: '/mock/userData',
                appData: '/mock/appData',
                home: '/mock/home',
                temp: '/mock/temp',
            };
            return pathMap[path] || '/mock/path';
        }),
    },
    ipcMain: {
        handle: jest.fn(),
        on: jest.fn(),
        removeAllListeners: jest.fn(),
    },
    ipcRenderer: {
        invoke: jest.fn(),
        on: jest.fn(),
        removeAllListeners: jest.fn(),
    },
}));
// Import custom matchers to make them available in all test files
require("./matchers/custom-matchers");
// Import third-party mocks to ensure they're applied early
require("./mocks/third-party");
// Global afterEach cleanup to prevent hanging tests
afterEach(() => {
    // Clear all timers
    jest.clearAllTimers();
    jest.useRealTimers();
    // Clear all mocks after each test
    jest.clearAllMocks();
});
// Setup TextEncoder/TextDecoder for JSDOM
if (typeof global.TextEncoder === 'undefined') {
    const { TextEncoder, TextDecoder } = require('util');
    global.TextEncoder = TextEncoder;
    global.TextDecoder = TextDecoder;
}
// Set environment variable for store service test fallback
process.env.ANGLESITE_TEST_DATA = '/tmp/anglesite-test';
// Mock electronAPI globally for all tests
const mockElectronAPI = {
    send: jest.fn(),
    on: jest.fn(),
    removeAllListeners: jest.fn(),
};
// Set up window.electronAPI for renderer tests
Object.defineProperty(window, 'electronAPI', {
    value: mockElectronAPI,
    writable: true,
});
// Export for tests that need direct access
global.mockElectronAPI = mockElectronAPI;
// Suppress console.warn for deprecated functions during tests to reduce noise
const originalWarn = console.warn;
beforeEach(() => {
    console.warn = jest.fn();
});
afterEach(() => {
    console.warn = originalWarn;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,