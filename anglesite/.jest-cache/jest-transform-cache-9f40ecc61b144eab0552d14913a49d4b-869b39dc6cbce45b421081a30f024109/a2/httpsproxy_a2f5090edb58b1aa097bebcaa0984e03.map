{"version":3,"names":["exports","createHttpsProxy","cov_y80ztho8z","s","stopHttpsProxy","restartHttpsProxy","https","__importStar","require","http","certificates_1","httpsProxyServer","httpsPort","httpPort","hostname","b","f","console","log","cert","key","loadCertificates","createServer","req","res","method","url","headers","host","proxyReq","request","port","path","proxyRes","statusCode","writeHead","pipe","on","err","error","code","message","end","Promise","resolve","listen","close"],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/server/https-proxy.ts"],"sourcesContent":["/**\n * @file HTTPS proxy server management\n */\nimport * as https from 'https';\nimport * as http from 'http';\nimport { loadCertificates } from '../certificates';\n\nlet httpsProxyServer: https.Server | null = null;\n\n/**\n * Create and start HTTPS proxy server.\n * @param httpsPort The HTTPS port to listen on\n * @param httpPort The HTTP port to forward to\n * @param hostname The hostname to listen on\n * @returns Promise&lt;boolean> - True if started successfully, false if failed\n */\nexport async function createHttpsProxy(\n  httpsPort: number,\n  httpPort: number,\n  hostname: string = 'localhost'\n): Promise<boolean> {\n  try {\n    console.log(`Creating HTTPS proxy for ${hostname} on port ${httpsPort} -> ${httpPort}`);\n    const { cert, key } = await loadCertificates([hostname]);\n\n    httpsProxyServer = https.createServer({ cert, key }, (req, res) => {\n      console.log(`HTTPS proxy request: ${req.method} ${req.url} from ${req.headers.host}`);\n\n      const proxyReq = http.request(\n        {\n          hostname: 'localhost',\n          port: httpPort,\n          path: req.url,\n          method: req.method,\n          headers: req.headers,\n        },\n        (proxyRes) => {\n          console.log(`Proxy response: ${proxyRes.statusCode} for ${req.url}`);\n          res.writeHead(proxyRes.statusCode || 500, proxyRes.headers);\n          proxyRes.pipe(res);\n        }\n      );\n\n      proxyReq.on('error', (err) => {\n        console.error(`HTTPS proxy request error for ${hostname}:${httpsPort} -> localhost:${httpPort}:`, err);\n        console.error('Error details:', {\n          code: (err as Error & { code?: string }).code,\n          message: err.message,\n          hostname: 'localhost',\n          port: httpPort,\n          path: req.url,\n        });\n        res.writeHead(500, { 'Content-Type': 'text/plain' });\n        res.end(`Proxy error: Unable to connect to localhost:${httpPort}\\nError: ${err.message}`);\n      });\n\n      req.pipe(proxyReq);\n    });\n\n    // Listen on all interfaces (0.0.0.0) to accept connections to any hostname\n    return new Promise((resolve) => {\n      httpsProxyServer!.listen(httpsPort, '0.0.0.0', () => {\n        console.log(`✅ HTTPS proxy server running at https://${hostname}:${httpsPort}/`);\n        console.log(`   Forwarding to HTTP server at http://localhost:${httpPort}/`);\n        resolve(true);\n      });\n\n      httpsProxyServer!.on('error', (err) => {\n        console.error('❌ HTTPS proxy server error:', err);\n        resolve(false);\n      });\n    });\n  } catch (error) {\n    console.error('❌ Failed to start HTTPS proxy:', error);\n    console.log('Continuing with HTTP-only mode');\n    return false; // HTTPS proxy failed, use HTTP only\n  }\n}\n\n/**\n * Stop the HTTPS proxy server.\n */\nexport function stopHttpsProxy(): void {\n  if (httpsProxyServer) {\n    console.log('Stopping HTTPS proxy server');\n    httpsProxyServer.close();\n    httpsProxyServer = null;\n  }\n}\n\n/**\n * Restart HTTPS proxy for new hostname.\n */\nexport async function restartHttpsProxy(httpsPort: number, httpPort: number, hostname: string): Promise<boolean> {\n  console.log(`Restarting HTTPS proxy server for new website…`);\n  stopHttpsProxy();\n  return createHttpsProxy(httpsPort, httpPort, hostname);\n}\n"],"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","ignoreList":[]}