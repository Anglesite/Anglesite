{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/server/website-server-manager.test.ts","mappings":"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","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/server/website-server-manager.test.ts"],"sourcesContent":["/**\n * @file Unit tests for WebsiteServerManager\n */\nimport { WebsiteServerManager, ServerState, websiteServerManager } from '../../app/server/website-server-manager';\nimport { ILogger, IFileSystem } from '../../app/core/interfaces';\n\n// Mock the per-website-server module\njest.mock('../../app/server/per-website-server', () => ({\n  startWebsiteServer: jest.fn(),\n  stopWebsiteServer: jest.fn(),\n}));\n\nconst mockStartWebsiteServer = require('../../app/server/per-website-server').startWebsiteServer;\nconst mockStopWebsiteServer = require('../../app/server/per-website-server').stopWebsiteServer;\n\ninterface MockWebsiteServer {\n  devServer: { watcher: { close: jest.Mock }; close: jest.Mock };\n  inputDir: string;\n  outputDir: string;\n  port: number;\n  actualUrl?: string;\n  urlResolver: unknown;\n  restoreConsole?: () => void;\n}\n\ndescribe('WebsiteServerManager', () => {\n  let serverManager: WebsiteServerManager;\n  let mockWebsiteServer: MockWebsiteServer;\n  let mockLogger: ILogger;\n  let mockFileSystem: IFileSystem;\n\n  beforeEach(() => {\n    // Create mock dependencies\n    mockLogger = {\n      child: jest.fn().mockReturnThis(),\n      debug: jest.fn(),\n      info: jest.fn(),\n      warn: jest.fn(),\n      error: jest.fn(),\n    };\n\n    mockFileSystem = {\n      exists: jest.fn().mockReturnValue(true),\n      readFile: jest.fn(),\n      writeFile: jest.fn(),\n      mkdir: jest.fn(),\n      readdir: jest.fn(),\n      rmdir: jest.fn(),\n      copyFile: jest.fn(),\n      rename: jest.fn(),\n      stat: jest.fn(),\n    };\n\n    // Create a new server manager instance for each test\n    serverManager = new WebsiteServerManager(mockLogger, mockFileSystem, {\n      startPort: 9000,\n      maxRetries: 2,\n      startupTimeout: 5000,\n      shutdownTimeout: 3000,\n      enableLogging: false, // Disable logging for tests\n    });\n\n    // Mock website server object\n    mockWebsiteServer = {\n      devServer: { watcher: { close: jest.fn() }, close: jest.fn() },\n      inputDir: '/test/path/src',\n      outputDir: '/test/path/_site',\n      port: 9000,\n      actualUrl: 'http://localhost:9000',\n      urlResolver: {},\n      restoreConsole: jest.fn(),\n    };\n\n    // Reset mocks\n    mockStartWebsiteServer.mockClear();\n    mockStopWebsiteServer.mockClear();\n    mockStartWebsiteServer.mockResolvedValue(mockWebsiteServer);\n    mockStopWebsiteServer.mockResolvedValue(undefined);\n\n    // Reset file system mock\n    (mockFileSystem.exists as jest.Mock).mockClear().mockReturnValue(true);\n  });\n\n  afterEach(() => {\n    // Clean up server manager\n    return serverManager.stopAllServers();\n  });\n\n  describe('startServer', () => {\n    it('should start a server successfully', async () => {\n      const websiteName = 'test-site';\n      const websitePath = '/test/path';\n\n      const serverInfo = await serverManager.startServer(websiteName, websitePath);\n\n      expect(serverInfo.name).toBe(websiteName);\n      expect(serverInfo.status).toBe('running');\n      expect(serverInfo.port).toBe(9000);\n      expect(serverInfo.url).toBe('http://localhost:9000');\n      expect(mockStartWebsiteServer).toHaveBeenCalledWith(websitePath, websiteName, 9000);\n    });\n\n    it('should return existing running server', async () => {\n      const websiteName = 'test-site';\n      const websitePath = '/test/path';\n\n      // Start server first time\n      const managedServer1 = await serverManager.startServer(websiteName, websitePath);\n\n      // Try to start again\n      const managedServer2 = await serverManager.startServer(websiteName, websitePath);\n\n      expect(managedServer1).toStrictEqual(managedServer2);\n      expect(mockStartWebsiteServer).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle server start failure with retries', async () => {\n      const websiteName = 'test-site';\n      const websitePath = '/test/path';\n      const error = new Error('Server start failed');\n\n      // Mock consecutive failures for initial + retries\n      mockStartWebsiteServer.mockRejectedValueOnce(error).mockRejectedValueOnce(error).mockRejectedValueOnce(error);\n\n      await expect(serverManager.startServer(websiteName, websitePath)).rejects.toThrow('Server start failed');\n\n      // Should have tried maxRetries + 1 times (initial + retries)\n      expect(mockStartWebsiteServer).toHaveBeenCalledTimes(3);\n\n      const managedServer = serverManager.getServer(websiteName);\n      expect(managedServer?.state).toBe(ServerState.ERROR);\n      expect(managedServer?.lastError?.message).toBe('Server start failed');\n    }, 15000); // Increase timeout for retries\n\n    it('should validate website path before starting', async () => {\n      const websiteName = 'test-site';\n      const websitePath = '/invalid/path';\n\n      // Mock file system to return false for path validation\n      (mockFileSystem.exists as jest.Mock).mockReturnValue(false);\n\n      await expect(serverManager.startServer(websiteName, websitePath)).rejects.toThrow('Invalid website path');\n      expect(mockStartWebsiteServer).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('stopServer', () => {\n    it('should stop a running server successfully', async () => {\n      const websiteName = 'test-site';\n      const websitePath = '/test/path';\n\n      // Start server first\n      await serverManager.startServer(websiteName, websitePath);\n\n      // Stop the server\n      await serverManager.stopServer(websiteName);\n\n      const managedServer = serverManager.getServer(websiteName);\n      expect(managedServer?.state).toBe(ServerState.STOPPED);\n      expect(managedServer?.server).toBeUndefined();\n      expect(mockStopWebsiteServer).toHaveBeenCalledWith(mockWebsiteServer);\n    });\n\n    it('should handle stopping non-existent server', async () => {\n      // Should not throw error\n      await expect(serverManager.stopServer('non-existent')).resolves.toBeUndefined();\n    });\n\n    it('should handle server stop failure', async () => {\n      const websiteName = 'test-site';\n      const websitePath = '/test/path';\n      const error = new Error('Server stop failed');\n\n      mockStopWebsiteServer.mockRejectedValue(error);\n\n      // Start server first\n      await serverManager.startServer(websiteName, websitePath);\n\n      // Stop should not throw but server should be in error state\n      await serverManager.stopServer(websiteName);\n\n      const managedServer = serverManager.getServer(websiteName);\n      expect(managedServer?.state).toBe(ServerState.ERROR);\n      expect(managedServer?.lastError?.message).toBe('Server stop failed');\n    });\n  });\n\n  describe('restartServer', () => {\n    it('should restart a server successfully', async () => {\n      const websiteName = 'test-site';\n      const websitePath = '/test/path';\n\n      // Start server first\n      await serverManager.startServer(websiteName, websitePath);\n\n      // Restart the server\n      const restartedServer = await serverManager.restartServer(websiteName);\n\n      expect(restartedServer.status).toBe('running');\n      expect(mockStopWebsiteServer).toHaveBeenCalled();\n      expect(mockStartWebsiteServer).toHaveBeenCalledTimes(2); // Initial start + restart\n    });\n\n    it('should fail to restart non-existent server', async () => {\n      await expect(serverManager.restartServer('non-existent')).rejects.toThrow('No server found');\n    });\n  });\n\n  describe('server state management', () => {\n    it('should track server states correctly', async () => {\n      const websiteName = 'test-site';\n      const websitePath = '/test/path';\n\n      // Initially no servers\n      expect(serverManager.getRunningServersCount()).toBe(0);\n      expect(serverManager.isServerRunning(websiteName)).toBe(false);\n\n      // Start server\n      await serverManager.startServer(websiteName, websitePath);\n      expect(serverManager.getRunningServersCount()).toBe(1);\n      expect(serverManager.isServerRunning(websiteName)).toBe(true);\n\n      // Stop server\n      await serverManager.stopServer(websiteName);\n      expect(serverManager.getRunningServersCount()).toBe(0);\n      expect(serverManager.isServerRunning(websiteName)).toBe(false);\n    });\n\n    it('should get servers by state', async () => {\n      const websiteName1 = 'test-site-1';\n      const websiteName2 = 'test-site-2';\n      const websitePath = '/test/path';\n\n      // Start first server successfully\n      mockStartWebsiteServer.mockResolvedValueOnce(mockWebsiteServer);\n      await serverManager.startServer(websiteName1, websitePath);\n\n      // Make second server fail all retry attempts\n      const error = new Error('Failed');\n      mockStartWebsiteServer.mockRejectedValueOnce(error).mockRejectedValueOnce(error).mockRejectedValueOnce(error);\n\n      try {\n        await serverManager.startServer(websiteName2, websitePath);\n      } catch {\n        // Expected to fail\n      }\n\n      const runningServers = serverManager.getServersByState(ServerState.RUNNING);\n      const errorServers = serverManager.getServersByState(ServerState.ERROR);\n\n      expect(runningServers).toHaveLength(1);\n      expect(runningServers[0].websiteName).toBe(websiteName1);\n      expect(errorServers).toHaveLength(1);\n      expect(errorServers[0].websiteName).toBe(websiteName2);\n    }, 10000); // Increase timeout\n  });\n\n  describe('stopAllServers', () => {\n    it('should stop all running servers', async () => {\n      const websiteName1 = 'test-site-1';\n      const websiteName2 = 'test-site-2';\n      const websitePath = '/test/path';\n\n      // Start multiple servers\n      await serverManager.startServer(websiteName1, websitePath);\n      await serverManager.startServer(websiteName2, websitePath);\n\n      expect(serverManager.getRunningServersCount()).toBe(2);\n\n      // Stop all servers\n      await serverManager.stopAllServers();\n\n      expect(serverManager.getRunningServersCount()).toBe(0);\n      expect(serverManager.getAllServers().size).toBe(0);\n    });\n  });\n\n  describe('statistics', () => {\n    it('should provide accurate statistics', async () => {\n      const websiteName1 = 'test-site-1';\n      const websiteName2 = 'test-site-2';\n      const websitePath = '/test/path';\n\n      // Start servers\n      await serverManager.startServer(websiteName1, websitePath);\n      await serverManager.startServer(websiteName2, websitePath);\n\n      const stats = serverManager.getStatistics();\n\n      expect(stats.totalServers).toBe(2);\n      expect(stats.runningServers).toBe(2);\n      expect(stats.stoppedServers).toBe(0);\n      expect(stats.errorServers).toBe(0);\n      expect(stats.allocatedPorts).toEqual([9000, 9001]);\n      expect(Object.keys(stats.uptime)).toHaveLength(2);\n    });\n  });\n\n  describe('event emission', () => {\n    it('should emit server lifecycle events', async () => {\n      const websiteName = 'test-site';\n      const websitePath = '/test/path';\n      const events: string[] = [];\n\n      serverManager.on('server-starting', () => events.push('starting'));\n      serverManager.on('server-started', () => events.push('started'));\n      serverManager.on('server-stopping', () => events.push('stopping'));\n      serverManager.on('server-stopped', () => events.push('stopped'));\n\n      // Start and stop server\n      await serverManager.startServer(websiteName, websitePath);\n      await serverManager.stopServer(websiteName);\n\n      expect(events).toEqual(['starting', 'started', 'stopping', 'stopped']);\n    });\n\n    it('should emit error events on failure', async () => {\n      const websiteName = 'test-site';\n      const websitePath = '/test/path';\n      const error = new Error('Server start failed');\n      let emittedError: Error | null = null;\n\n      // Mock all retry attempts to fail\n      mockStartWebsiteServer.mockRejectedValueOnce(error).mockRejectedValueOnce(error).mockRejectedValueOnce(error);\n\n      serverManager.on('server-error', (name, err) => {\n        emittedError = err;\n      });\n\n      try {\n        await serverManager.startServer(websiteName, websitePath);\n      } catch {\n        // Expected to fail\n      }\n\n      expect(emittedError).toBeTruthy();\n      expect(emittedError!.message).toBe('Server start failed');\n    }, 15000); // Increase timeout for retries\n  });\n\n  describe('deprecated singleton instance', () => {\n    it('should export a deprecated singleton that throws errors', () => {\n      expect(websiteServerManager).toBeInstanceOf(Object);\n      expect(() => websiteServerManager.startServer()).toThrow(\n        'websiteServerManager is deprecated. Use DI container instead.'\n      );\n      expect(() => websiteServerManager.stopServer()).toThrow(\n        'websiteServerManager is deprecated. Use DI container instead.'\n      );\n    });\n  });\n});\n"],"version":3}