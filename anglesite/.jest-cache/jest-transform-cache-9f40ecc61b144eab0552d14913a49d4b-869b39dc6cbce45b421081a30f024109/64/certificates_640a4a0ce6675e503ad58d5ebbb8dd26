1c4307265b57655600c4f50d5652af0a
"use strict";

/* istanbul ignore next */
function cov_1fits679mm() {
  var path = "/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/certificates.ts";
  var hash = "8bceb9b77446bcbfcdae8cb067fe6f5030b9bf9e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/certificates.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 50
        }
      },
      "37": {
        start: {
          line: 37,
          column: 0
        },
        end: {
          line: 37,
          column: 54
        }
      },
      "38": {
        start: {
          line: 38,
          column: 0
        },
        end: {
          line: 38,
          column: 46
        }
      },
      "39": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 39,
          column: 30
        }
      },
      "40": {
        start: {
          line: 40,
          column: 0
        },
        end: {
          line: 40,
          column: 44
        }
      },
      "41": {
        start: {
          line: 50,
          column: 17
        },
        end: {
          line: 50,
          column: 34
        }
      },
      "42": {
        start: {
          line: 51,
          column: 11
        },
        end: {
          line: 51,
          column: 38
        }
      },
      "43": {
        start: {
          line: 52,
          column: 15
        },
        end: {
          line: 52,
          column: 30
        }
      },
      "44": {
        start: {
          line: 53,
          column: 13
        },
        end: {
          line: 53,
          column: 42
        }
      },
      "45": {
        start: {
          line: 54,
          column: 11
        },
        end: {
          line: 54,
          column: 38
        }
      },
      "46": {
        start: {
          line: 55,
          column: 24
        },
        end: {
          line: 55,
          column: 48
        }
      },
      "47": {
        start: {
          line: 56,
          column: 17
        },
        end: {
          line: 56,
          column: 51
        }
      },
      "48": {
        start: {
          line: 57,
          column: 18
        },
        end: {
          line: 57,
          column: 53
        }
      },
      "49": {
        start: {
          line: 58,
          column: 14
        },
        end: {
          line: 58,
          column: 45
        }
      },
      "50": {
        start: {
          line: 59,
          column: 15
        },
        end: {
          line: 59,
          column: 47
        }
      },
      "51": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 68,
          column: 5
        }
      },
      "52": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 41
        }
      },
      "53": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 20
        }
      },
      "54": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 21
        }
      },
      "55": {
        start: {
          line: 73,
          column: 25
        },
        end: {
          line: 73,
          column: 34
        }
      },
      "56": {
        start: {
          line: 80,
          column: 24
        },
        end: {
          line: 84,
          column: 61
        }
      },
      "57": {
        start: {
          line: 85,
          column: 19
        },
        end: {
          line: 85,
          column: 47
        }
      },
      "58": {
        start: {
          line: 86,
          column: 23
        },
        end: {
          line: 86,
          column: 50
        }
      },
      "59": {
        start: {
          line: 87,
          column: 22
        },
        end: {
          line: 87,
          column: 49
        }
      },
      "60": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 94,
          column: 5
        }
      },
      "61": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 93,
          column: 10
        }
      },
      "62": {
        start: {
          line: 96,
          column: 15
        },
        end: {
          line: 102,
          column: 6
        }
      },
      "63": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 104,
          column: 45
        }
      },
      "64": {
        start: {
          line: 105,
          column: 4
        },
        end: {
          line: 105,
          column: 41
        }
      },
      "65": {
        start: {
          line: 106,
          column: 4
        },
        end: {
          line: 106,
          column: 39
        }
      },
      "66": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 107,
          column: 14
        }
      },
      "67": {
        start: {
          line: 117,
          column: 21
        },
        end: {
          line: 117,
          column: 45
        }
      },
      "68": {
        start: {
          line: 118,
          column: 4
        },
        end: {
          line: 120,
          column: 5
        }
      },
      "69": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 46
        }
      },
      "70": {
        start: {
          line: 121,
          column: 4
        },
        end: {
          line: 139,
          column: 5
        }
      },
      "71": {
        start: {
          line: 123,
          column: 19
        },
        end: {
          line: 123,
          column: 40
        }
      },
      "72": {
        start: {
          line: 125,
          column: 27
        },
        end: {
          line: 125,
          column: 93
        }
      },
      "73": {
        start: {
          line: 127,
          column: 21
        },
        end: {
          line: 131,
          column: 10
        }
      },
      "74": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 45
        }
      },
      "75": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 20
        }
      },
      "76": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 64
        }
      },
      "77": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 116
        }
      },
      "78": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 167,
          column: 5
        }
      },
      "79": {
        start: {
          line: 149,
          column: 25
        },
        end: {
          line: 149,
          column: 37
        }
      },
      "80": {
        start: {
          line: 150,
          column: 27
        },
        end: {
          line: 150,
          column: 109
        }
      },
      "81": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "82": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 158,
          column: 13
        }
      },
      "83": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 116
        }
      },
      "84": {
        start: {
          line: 154,
          column: 16
        },
        end: {
          line: 154,
          column: 28
        }
      },
      "85": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 126
        }
      },
      "86": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 20
        }
      },
      "87": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 166,
          column: 21
        }
      },
      "88": {
        start: {
          line: 176,
          column: 4
        },
        end: {
          line: 192,
          column: 5
        }
      },
      "89": {
        start: {
          line: 177,
          column: 19
        },
        end: {
          line: 177,
          column: 40
        }
      },
      "90": {
        start: {
          line: 179,
          column: 29
        },
        end: {
          line: 179,
          column: 71
        }
      },
      "91": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 180,
          column: 47
        }
      },
      "92": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 184,
          column: 11
        }
      },
      "93": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 35
        }
      },
      "94": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 20
        }
      },
      "95": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 190,
          column: 66
        }
      },
      "96": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 21
        }
      },
      "97": {
        start: {
          line: 200,
          column: 24
        },
        end: {
          line: 204,
          column: 61
        }
      },
      "98": {
        start: {
          line: 205,
          column: 4
        },
        end: {
          line: 205,
          column: 50
        }
      },
      "99": {
        start: {
          line: 215,
          column: 4
        },
        end: {
          line: 215,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "exists",
        decl: {
          start: {
            line: 61,
            column: 15
          },
          end: {
            line: 61,
            column: 21
          }
        },
        loc: {
          start: {
            line: 61,
            column: 32
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 61
      },
      "10": {
        name: "getOrCreateCA",
        decl: {
          start: {
            line: 79,
            column: 15
          },
          end: {
            line: 79,
            column: 28
          }
        },
        loc: {
          start: {
            line: 79,
            column: 31
          },
          end: {
            line: 108,
            column: 1
          }
        },
        line: 79
      },
      "11": {
        name: "generateCertificate",
        decl: {
          start: {
            line: 115,
            column: 15
          },
          end: {
            line: 115,
            column: 34
          }
        },
        loc: {
          start: {
            line: 115,
            column: 44
          },
          end: {
            line: 140,
            column: 1
          }
        },
        line: 115
      },
      "12": {
        name: "isCAInstalledInSystem",
        decl: {
          start: {
            line: 146,
            column: 15
          },
          end: {
            line: 146,
            column: 36
          }
        },
        loc: {
          start: {
            line: 146,
            column: 39
          },
          end: {
            line: 168,
            column: 1
          }
        },
        line: 146
      },
      "13": {
        name: "installCAInSystem",
        decl: {
          start: {
            line: 175,
            column: 15
          },
          end: {
            line: 175,
            column: 32
          }
        },
        loc: {
          start: {
            line: 175,
            column: 35
          },
          end: {
            line: 193,
            column: 1
          }
        },
        line: 175
      },
      "14": {
        name: "getCAPath",
        decl: {
          start: {
            line: 199,
            column: 9
          },
          end: {
            line: 199,
            column: 18
          }
        },
        loc: {
          start: {
            line: 199,
            column: 21
          },
          end: {
            line: 206,
            column: 1
          }
        },
        line: 199
      },
      "15": {
        name: "loadCertificates",
        decl: {
          start: {
            line: 213,
            column: 15
          },
          end: {
            line: 213,
            column: 31
          }
        },
        loc: {
          start: {
            line: 213,
            column: 62
          },
          end: {
            line: 216,
            column: 1
          }
        },
        line: 213
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 80,
            column: 24
          },
          end: {
            line: 84,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 81,
            column: 10
          },
          end: {
            line: 81,
            column: 80
          }
        }, {
          start: {
            line: 82,
            column: 10
          },
          end: {
            line: 84,
            column: 61
          }
        }],
        line: 80
      },
      "18": {
        loc: {
          start: {
            line: 82,
            column: 10
          },
          end: {
            line: 84,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 83,
            column: 14
          },
          end: {
            line: 83,
            column: 63
          }
        }, {
          start: {
            line: 84,
            column: 14
          },
          end: {
            line: 84,
            column: 61
          }
        }],
        line: 82
      },
      "19": {
        loc: {
          start: {
            line: 83,
            column: 24
          },
          end: {
            line: 83,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 24
          },
          end: {
            line: 83,
            column: 43
          }
        }, {
          start: {
            line: 83,
            column: 47
          },
          end: {
            line: 83,
            column: 49
          }
        }],
        line: 83
      },
      "20": {
        loc: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "21": {
        loc: {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 89,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 9
          },
          end: {
            line: 89,
            column: 33
          }
        }, {
          start: {
            line: 89,
            column: 39
          },
          end: {
            line: 89,
            column: 62
          }
        }],
        line: 89
      },
      "22": {
        loc: {
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "23": {
        loc: {
          start: {
            line: 138,
            column: 58
          },
          end: {
            line: 138,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 138,
            column: 83
          },
          end: {
            line: 138,
            column: 96
          }
        }, {
          start: {
            line: 138,
            column: 99
          },
          end: {
            line: 138,
            column: 112
          }
        }],
        line: 138
      },
      "24": {
        loc: {
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 8
          },
          end: {
            line: 159,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "25": {
        loc: {
          start: {
            line: 200,
            column: 24
          },
          end: {
            line: 204,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 201,
            column: 10
          },
          end: {
            line: 201,
            column: 80
          }
        }, {
          start: {
            line: 202,
            column: 10
          },
          end: {
            line: 204,
            column: 61
          }
        }],
        line: 200
      },
      "26": {
        loc: {
          start: {
            line: 202,
            column: 10
          },
          end: {
            line: 204,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 203,
            column: 14
          },
          end: {
            line: 203,
            column: 63
          }
        }, {
          start: {
            line: 204,
            column: 14
          },
          end: {
            line: 204,
            column: 61
          }
        }],
        line: 202
      },
      "27": {
        loc: {
          start: {
            line: 203,
            column: 24
          },
          end: {
            line: 203,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 24
          },
          end: {
            line: 203,
            column: 43
          }
        }, {
          start: {
            line: 203,
            column: 47
          },
          end: {
            line: 203,
            column: 49
          }
        }],
        line: 203
      },
      "28": {
        loc: {
          start: {
            line: 213,
            column: 32
          },
          end: {
            line: 213,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 213,
            column: 42
          },
          end: {
            line: 213,
            column: 60
          }
        }],
        line: 213
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0]
    },
    inputSourceMap: {
      file: "/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/certificates.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/certificates.ts"],
      sourcesContent: ["/**\n * @file Certificate Authority and SSL certificate management for Anglesite\n *\n * This module handles:\n * - Creating and managing a local Certificate Authority (CA)\n * - Generating SSL certificates for .test domains\n * - Installing CA certificates in the system keychain\n * - Checking certificate installation status\n */\nimport { createCA, createCert } from 'mkcert';\nimport * as fs from 'fs';\nimport { promisify } from 'util';\nimport * as path from 'path';\nimport * as os from 'os';\nimport { execFileSync } from 'child_process';\n\nconst readFile = promisify(fs.readFile);\nconst writeFile = promisify(fs.writeFile);\nconst mkdir = promisify(fs.mkdir);\nconst unlink = promisify(fs.unlink);\n\n// Helper to check if file exists using fs.stat\nasync function exists(filePath: string): Promise<boolean> {\n  try {\n    await fs.promises.stat(filePath);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Certificate cache to avoid regenerating certificates for the same domains\n */\nconst certificateCache = new Map<string, { cert: string; key: string }>();\n\n/**\n * Get or create Certificate Authority for Anglesite.\n * Creates a new CA if one doesn't exist, otherwise loads existing CA from disk.\n * @returns Promise resolving to CA certificate and private key.\n */\nasync function getOrCreateCA(): Promise<{ cert: string; key: string }> {\n  const appDataPath =\n    process.platform === 'darwin'\n      ? path.join(os.homedir(), 'Library', 'Application Support', 'Anglesite')\n      : process.platform === 'win32'\n        ? path.join(process.env.APPDATA || '', 'Anglesite')\n        : path.join(os.homedir(), '.config', 'anglesite');\n\n  const caPath = path.join(appDataPath, 'ca');\n  const caCertPath = path.join(caPath, 'ca.crt');\n  const caKeyPath = path.join(caPath, 'ca.key');\n\n  // Check if CA already exists\n  if ((await exists(caCertPath)) && (await exists(caKeyPath))) {\n    return {\n      cert: await readFile(caCertPath, 'utf8'),\n      key: await readFile(caKeyPath, 'utf8'),\n    };\n  }\n\n  // Create new CA\n  const ca = await createCA({\n    organization: 'Anglesite Development',\n    countryCode: 'US',\n    state: 'Development',\n    locality: 'Local',\n    validity: 825, // ~2.25 years\n  });\n\n  // Save CA to disk\n  await mkdir(caPath, { recursive: true });\n  await writeFile(caCertPath, ca.cert);\n  await writeFile(caKeyPath, ca.key);\n\n  return ca;\n}\n\n/**\n * Generate SSL certificate for specific domains using the Anglesite CA.\n * Includes caching to avoid regenerating certificates for the same domain set.\n * @param domains Array of domain names to include in the certificate.\n * @returns Promise resolving to certificate and private key.\n */\nexport async function generateCertificate(domains: string[]): Promise<{ cert: string; key: string }> {\n  // Check cache first\n  const cacheKey = domains.sort().join(',');\n  if (certificateCache.has(cacheKey)) {\n    return certificateCache.get(cacheKey)!;\n  }\n\n  try {\n    // Get or create CA\n    const ca = await getOrCreateCA();\n\n    // Always include localhost and common variations\n    const allDomains = Array.from(new Set([...domains, 'localhost', '127.0.0.1', '::1']));\n\n    // Create certificate\n    const cert = await createCert({\n      ca: { key: ca.key, cert: ca.cert },\n      domains: allDomains,\n      validity: 365,\n    });\n\n    // Cache the certificate\n    certificateCache.set(cacheKey, cert);\n\n    return cert;\n  } catch (error) {\n    console.error('Failed to generate certificate:', error);\n    throw new Error(`Certificate generation failed: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\n/**\n * Check if Anglesite CA is installed and trusted in the system keychain.\n * Verifies both the existence and trustworthiness of the CA certificate.\n * @returns True if CA is properly installed and trusted, false otherwise.\n */\nexport async function isCAInstalledInSystem(): Promise<boolean> {\n  try {\n    // First, try to verify the CA certificate if it exists in the expected location\n    const userHome = os.homedir();\n    const caCertPath = path.join(userHome, 'Library', 'Application Support', 'Anglesite', 'ca', 'ca.crt');\n\n    if (await exists(caCertPath)) {\n      try {\n        execFileSync('security', ['verify-cert', '-c', caCertPath], { stdio: 'pipe' });\n        return true;\n      } catch {\n        // Verification failed, try the fallback method\n      }\n    }\n\n    // Fallback: check if certificate exists by name in keychain\n    execFileSync('security', ['find-certificate', '-c', 'Anglesite Development'], { stdio: 'pipe' });\n    return true;\n  } catch {\n    // Certificate not found or not trusted\n    return false;\n  }\n}\n\n/**\n * Install Anglesite CA into user keychain as a trusted root certificate.\n * This enables SSL certificates signed by the Anglesite CA to be trusted by browsers.\n * Installs in user keychain to avoid requiring administrator privileges.\n * @returns Promise resolving to true if installation succeeded, false if failed.\n */\nexport async function installCAInSystem(): Promise<boolean> {\n  try {\n    const ca = await getOrCreateCA();\n\n    // Write CA cert to temporary file\n    const tempCertPath = path.join(os.tmpdir(), 'anglesite-ca.crt');\n    await writeFile(tempCertPath, ca.cert);\n\n    // Install certificate in user keychain (no admin privileges required)\n    execFileSync('security', ['add-trusted-cert', '-d', '-r', 'trustRoot', tempCertPath], {\n      stdio: 'pipe',\n    });\n\n    // Clean up temporary file\n    await unlink(tempCertPath);\n\n    return true;\n  } catch (error) {\n    console.error('Failed to install CA in keychain:', error);\n    return false;\n  }\n}\n\n/**\n * Get the file system path to the Anglesite CA certificate.\n * Useful for manual installation or external certificate management.\n * @returns Absolute path to the ca.crt file.\n */\nexport function getCAPath(): string {\n  const appDataPath =\n    process.platform === 'darwin'\n      ? path.join(os.homedir(), 'Library', 'Application Support', 'Anglesite')\n      : process.platform === 'win32'\n        ? path.join(process.env.APPDATA || '', 'Anglesite')\n        : path.join(os.homedir(), '.config', 'anglesite');\n\n  return path.join(appDataPath, 'ca', 'ca.crt');\n}\n\n/**\n * Load or generate SSL certificates for HTTPS server with specific domains.\n * Main entry point for getting certificates for the HTTPS proxy server.\n * @param domains Array of domain names, defaults to [\"anglesite.test\"].\n * @returns Promise resolving to certificate and private key for HTTPS server.\n */\nexport async function loadCertificates(domains: string[] = ['anglesite.test']): Promise<{\n  cert: string;\n  key: string;\n}> {\n  // Generate certificate for specific domains only\n  return generateCertificate(domains);\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8bceb9b77446bcbfcdae8cb067fe6f5030b9bf9e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1fits679mm = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1fits679mm();
var __createBinding =
/* istanbul ignore next */
(cov_1fits679mm().s[0]++,
/* istanbul ignore next */
(cov_1fits679mm().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1fits679mm().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_1fits679mm().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_1fits679mm().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1fits679mm().f[0]++;
  cov_1fits679mm().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1fits679mm().b[2][0]++;
    cov_1fits679mm().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1fits679mm().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_1fits679mm().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_1fits679mm().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_1fits679mm().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_1fits679mm().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_1fits679mm().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_1fits679mm().b[5][1]++,
  /* istanbul ignore next */
  (cov_1fits679mm().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_1fits679mm().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_1fits679mm().b[3][0]++;
    cov_1fits679mm().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_1fits679mm().f[1]++;
        cov_1fits679mm().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_1fits679mm().b[3][1]++;
  }
  cov_1fits679mm().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_1fits679mm().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1fits679mm().f[2]++;
  cov_1fits679mm().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1fits679mm().b[7][0]++;
    cov_1fits679mm().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1fits679mm().b[7][1]++;
  }
  cov_1fits679mm().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_1fits679mm().s[11]++,
/* istanbul ignore next */
(cov_1fits679mm().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_1fits679mm().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_1fits679mm().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_1fits679mm().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_1fits679mm().f[3]++;
  cov_1fits679mm().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_1fits679mm().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_1fits679mm().f[4]++;
  cov_1fits679mm().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_1fits679mm().s[14]++,
/* istanbul ignore next */
(cov_1fits679mm().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_1fits679mm().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_1fits679mm().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_1fits679mm().f[5]++;
  cov_1fits679mm().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_1fits679mm().f[6]++;
    cov_1fits679mm().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_1fits679mm().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_1fits679mm().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_1fits679mm().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_1fits679mm().s[17]++, []);
      /* istanbul ignore next */
      cov_1fits679mm().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_1fits679mm().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_1fits679mm().b[12][0]++;
          cov_1fits679mm().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_1fits679mm().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1fits679mm().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_1fits679mm().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_1fits679mm().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_1fits679mm().f[8]++;
    cov_1fits679mm().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_1fits679mm().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_1fits679mm().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_1fits679mm().b[13][0]++;
      cov_1fits679mm().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_1fits679mm().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_1fits679mm().s[26]++, {});
    /* istanbul ignore next */
    cov_1fits679mm().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_1fits679mm().b[15][0]++;
      cov_1fits679mm().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_1fits679mm().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_1fits679mm().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_1fits679mm().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_1fits679mm().b[16][0]++;
          cov_1fits679mm().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_1fits679mm().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_1fits679mm().b[15][1]++;
    }
    cov_1fits679mm().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_1fits679mm().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_1fits679mm().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1fits679mm().s[36]++;
exports.generateCertificate = generateCertificate;
/* istanbul ignore next */
cov_1fits679mm().s[37]++;
exports.isCAInstalledInSystem = isCAInstalledInSystem;
/* istanbul ignore next */
cov_1fits679mm().s[38]++;
exports.installCAInSystem = installCAInSystem;
/* istanbul ignore next */
cov_1fits679mm().s[39]++;
exports.getCAPath = getCAPath;
/* istanbul ignore next */
cov_1fits679mm().s[40]++;
exports.loadCertificates = loadCertificates;
/**
 * @file Certificate Authority and SSL certificate management for Anglesite
 *
 * This module handles:
 * - Creating and managing a local Certificate Authority (CA)
 * - Generating SSL certificates for .test domains
 * - Installing CA certificates in the system keychain
 * - Checking certificate installation status
 */
const mkcert_1 =
/* istanbul ignore next */
(cov_1fits679mm().s[41]++, require("mkcert"));
const fs =
/* istanbul ignore next */
(cov_1fits679mm().s[42]++, __importStar(require("fs")));
const util_1 =
/* istanbul ignore next */
(cov_1fits679mm().s[43]++, require("util"));
const path =
/* istanbul ignore next */
(cov_1fits679mm().s[44]++, __importStar(require("path")));
const os =
/* istanbul ignore next */
(cov_1fits679mm().s[45]++, __importStar(require("os")));
const child_process_1 =
/* istanbul ignore next */
(cov_1fits679mm().s[46]++, require("child_process"));
const readFile =
/* istanbul ignore next */
(cov_1fits679mm().s[47]++, (0, util_1.promisify)(fs.readFile));
const writeFile =
/* istanbul ignore next */
(cov_1fits679mm().s[48]++, (0, util_1.promisify)(fs.writeFile));
const mkdir =
/* istanbul ignore next */
(cov_1fits679mm().s[49]++, (0, util_1.promisify)(fs.mkdir));
const unlink =
/* istanbul ignore next */
(cov_1fits679mm().s[50]++, (0, util_1.promisify)(fs.unlink));
// Helper to check if file exists using fs.stat
async function exists(filePath) {
  /* istanbul ignore next */
  cov_1fits679mm().f[9]++;
  cov_1fits679mm().s[51]++;
  try {
    /* istanbul ignore next */
    cov_1fits679mm().s[52]++;
    await fs.promises.stat(filePath);
    /* istanbul ignore next */
    cov_1fits679mm().s[53]++;
    return true;
  } catch {
    /* istanbul ignore next */
    cov_1fits679mm().s[54]++;
    return false;
  }
}
/**
 * Certificate cache to avoid regenerating certificates for the same domains
 */
const certificateCache =
/* istanbul ignore next */
(cov_1fits679mm().s[55]++, new Map());
/**
 * Get or create Certificate Authority for Anglesite.
 * Creates a new CA if one doesn't exist, otherwise loads existing CA from disk.
 * @returns Promise resolving to CA certificate and private key.
 */
async function getOrCreateCA() {
  /* istanbul ignore next */
  cov_1fits679mm().f[10]++;
  const appDataPath =
  /* istanbul ignore next */
  (cov_1fits679mm().s[56]++, process.platform === 'darwin' ?
  /* istanbul ignore next */
  (cov_1fits679mm().b[17][0]++, path.join(os.homedir(), 'Library', 'Application Support', 'Anglesite')) :
  /* istanbul ignore next */
  (cov_1fits679mm().b[17][1]++, process.platform === 'win32' ?
  /* istanbul ignore next */
  (cov_1fits679mm().b[18][0]++, path.join(
  /* istanbul ignore next */
  (cov_1fits679mm().b[19][0]++, process.env.APPDATA) ||
  /* istanbul ignore next */
  (cov_1fits679mm().b[19][1]++, ''), 'Anglesite')) :
  /* istanbul ignore next */
  (cov_1fits679mm().b[18][1]++, path.join(os.homedir(), '.config', 'anglesite'))));
  const caPath =
  /* istanbul ignore next */
  (cov_1fits679mm().s[57]++, path.join(appDataPath, 'ca'));
  const caCertPath =
  /* istanbul ignore next */
  (cov_1fits679mm().s[58]++, path.join(caPath, 'ca.crt'));
  const caKeyPath =
  /* istanbul ignore next */
  (cov_1fits679mm().s[59]++, path.join(caPath, 'ca.key'));
  // Check if CA already exists
  /* istanbul ignore next */
  cov_1fits679mm().s[60]++;
  if (
  /* istanbul ignore next */
  (cov_1fits679mm().b[21][0]++, await exists(caCertPath)) &&
  /* istanbul ignore next */
  (cov_1fits679mm().b[21][1]++, await exists(caKeyPath))) {
    /* istanbul ignore next */
    cov_1fits679mm().b[20][0]++;
    cov_1fits679mm().s[61]++;
    return {
      cert: await readFile(caCertPath, 'utf8'),
      key: await readFile(caKeyPath, 'utf8')
    };
  } else
  /* istanbul ignore next */
  {
    cov_1fits679mm().b[20][1]++;
  }
  // Create new CA
  const ca =
  /* istanbul ignore next */
  (cov_1fits679mm().s[62]++, await (0, mkcert_1.createCA)({
    organization: 'Anglesite Development',
    countryCode: 'US',
    state: 'Development',
    locality: 'Local',
    validity: 825 // ~2.25 years
  }));
  // Save CA to disk
  /* istanbul ignore next */
  cov_1fits679mm().s[63]++;
  await mkdir(caPath, {
    recursive: true
  });
  /* istanbul ignore next */
  cov_1fits679mm().s[64]++;
  await writeFile(caCertPath, ca.cert);
  /* istanbul ignore next */
  cov_1fits679mm().s[65]++;
  await writeFile(caKeyPath, ca.key);
  /* istanbul ignore next */
  cov_1fits679mm().s[66]++;
  return ca;
}
/**
 * Generate SSL certificate for specific domains using the Anglesite CA.
 * Includes caching to avoid regenerating certificates for the same domain set.
 * @param domains Array of domain names to include in the certificate.
 * @returns Promise resolving to certificate and private key.
 */
async function generateCertificate(domains) {
  /* istanbul ignore next */
  cov_1fits679mm().f[11]++;
  // Check cache first
  const cacheKey =
  /* istanbul ignore next */
  (cov_1fits679mm().s[67]++, domains.sort().join(','));
  /* istanbul ignore next */
  cov_1fits679mm().s[68]++;
  if (certificateCache.has(cacheKey)) {
    /* istanbul ignore next */
    cov_1fits679mm().b[22][0]++;
    cov_1fits679mm().s[69]++;
    return certificateCache.get(cacheKey);
  } else
  /* istanbul ignore next */
  {
    cov_1fits679mm().b[22][1]++;
  }
  cov_1fits679mm().s[70]++;
  try {
    // Get or create CA
    const ca =
    /* istanbul ignore next */
    (cov_1fits679mm().s[71]++, await getOrCreateCA());
    // Always include localhost and common variations
    const allDomains =
    /* istanbul ignore next */
    (cov_1fits679mm().s[72]++, Array.from(new Set([...domains, 'localhost', '127.0.0.1', '::1'])));
    // Create certificate
    const cert =
    /* istanbul ignore next */
    (cov_1fits679mm().s[73]++, await (0, mkcert_1.createCert)({
      ca: {
        key: ca.key,
        cert: ca.cert
      },
      domains: allDomains,
      validity: 365
    }));
    // Cache the certificate
    /* istanbul ignore next */
    cov_1fits679mm().s[74]++;
    certificateCache.set(cacheKey, cert);
    /* istanbul ignore next */
    cov_1fits679mm().s[75]++;
    return cert;
  } catch (error) {
    /* istanbul ignore next */
    cov_1fits679mm().s[76]++;
    console.error('Failed to generate certificate:', error);
    /* istanbul ignore next */
    cov_1fits679mm().s[77]++;
    throw new Error(`Certificate generation failed: ${error instanceof Error ?
    /* istanbul ignore next */
    (cov_1fits679mm().b[23][0]++, error.message) :
    /* istanbul ignore next */
    (cov_1fits679mm().b[23][1]++, String(error))}`);
  }
}
/**
 * Check if Anglesite CA is installed and trusted in the system keychain.
 * Verifies both the existence and trustworthiness of the CA certificate.
 * @returns True if CA is properly installed and trusted, false otherwise.
 */
async function isCAInstalledInSystem() {
  /* istanbul ignore next */
  cov_1fits679mm().f[12]++;
  cov_1fits679mm().s[78]++;
  try {
    // First, try to verify the CA certificate if it exists in the expected location
    const userHome =
    /* istanbul ignore next */
    (cov_1fits679mm().s[79]++, os.homedir());
    const caCertPath =
    /* istanbul ignore next */
    (cov_1fits679mm().s[80]++, path.join(userHome, 'Library', 'Application Support', 'Anglesite', 'ca', 'ca.crt'));
    /* istanbul ignore next */
    cov_1fits679mm().s[81]++;
    if (await exists(caCertPath)) {
      /* istanbul ignore next */
      cov_1fits679mm().b[24][0]++;
      cov_1fits679mm().s[82]++;
      try {
        /* istanbul ignore next */
        cov_1fits679mm().s[83]++;
        (0, child_process_1.execFileSync)('security', ['verify-cert', '-c', caCertPath], {
          stdio: 'pipe'
        });
        /* istanbul ignore next */
        cov_1fits679mm().s[84]++;
        return true;
      } catch {
        // Verification failed, try the fallback method
      }
    } else
    /* istanbul ignore next */
    {
      cov_1fits679mm().b[24][1]++;
    }
    // Fallback: check if certificate exists by name in keychain
    cov_1fits679mm().s[85]++;
    (0, child_process_1.execFileSync)('security', ['find-certificate', '-c', 'Anglesite Development'], {
      stdio: 'pipe'
    });
    /* istanbul ignore next */
    cov_1fits679mm().s[86]++;
    return true;
  } catch {
    /* istanbul ignore next */
    cov_1fits679mm().s[87]++;
    // Certificate not found or not trusted
    return false;
  }
}
/**
 * Install Anglesite CA into user keychain as a trusted root certificate.
 * This enables SSL certificates signed by the Anglesite CA to be trusted by browsers.
 * Installs in user keychain to avoid requiring administrator privileges.
 * @returns Promise resolving to true if installation succeeded, false if failed.
 */
async function installCAInSystem() {
  /* istanbul ignore next */
  cov_1fits679mm().f[13]++;
  cov_1fits679mm().s[88]++;
  try {
    const ca =
    /* istanbul ignore next */
    (cov_1fits679mm().s[89]++, await getOrCreateCA());
    // Write CA cert to temporary file
    const tempCertPath =
    /* istanbul ignore next */
    (cov_1fits679mm().s[90]++, path.join(os.tmpdir(), 'anglesite-ca.crt'));
    /* istanbul ignore next */
    cov_1fits679mm().s[91]++;
    await writeFile(tempCertPath, ca.cert);
    // Install certificate in user keychain (no admin privileges required)
    /* istanbul ignore next */
    cov_1fits679mm().s[92]++;
    (0, child_process_1.execFileSync)('security', ['add-trusted-cert', '-d', '-r', 'trustRoot', tempCertPath], {
      stdio: 'pipe'
    });
    // Clean up temporary file
    /* istanbul ignore next */
    cov_1fits679mm().s[93]++;
    await unlink(tempCertPath);
    /* istanbul ignore next */
    cov_1fits679mm().s[94]++;
    return true;
  } catch (error) {
    /* istanbul ignore next */
    cov_1fits679mm().s[95]++;
    console.error('Failed to install CA in keychain:', error);
    /* istanbul ignore next */
    cov_1fits679mm().s[96]++;
    return false;
  }
}
/**
 * Get the file system path to the Anglesite CA certificate.
 * Useful for manual installation or external certificate management.
 * @returns Absolute path to the ca.crt file.
 */
function getCAPath() {
  /* istanbul ignore next */
  cov_1fits679mm().f[14]++;
  const appDataPath =
  /* istanbul ignore next */
  (cov_1fits679mm().s[97]++, process.platform === 'darwin' ?
  /* istanbul ignore next */
  (cov_1fits679mm().b[25][0]++, path.join(os.homedir(), 'Library', 'Application Support', 'Anglesite')) :
  /* istanbul ignore next */
  (cov_1fits679mm().b[25][1]++, process.platform === 'win32' ?
  /* istanbul ignore next */
  (cov_1fits679mm().b[26][0]++, path.join(
  /* istanbul ignore next */
  (cov_1fits679mm().b[27][0]++, process.env.APPDATA) ||
  /* istanbul ignore next */
  (cov_1fits679mm().b[27][1]++, ''), 'Anglesite')) :
  /* istanbul ignore next */
  (cov_1fits679mm().b[26][1]++, path.join(os.homedir(), '.config', 'anglesite'))));
  /* istanbul ignore next */
  cov_1fits679mm().s[98]++;
  return path.join(appDataPath, 'ca', 'ca.crt');
}
/**
 * Load or generate SSL certificates for HTTPS server with specific domains.
 * Main entry point for getting certificates for the HTTPS proxy server.
 * @param domains Array of domain names, defaults to ["anglesite.test"].
 * @returns Promise resolving to certificate and private key for HTTPS server.
 */
async function loadCertificates(domains =
/* istanbul ignore next */
(cov_1fits679mm().b[28][0]++, ['anglesite.test'])) {
  /* istanbul ignore next */
  cov_1fits679mm().f[15]++;
  cov_1fits679mm().s[99]++;
  // Generate certificate for specific domains only
  return generateCertificate(domains);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,