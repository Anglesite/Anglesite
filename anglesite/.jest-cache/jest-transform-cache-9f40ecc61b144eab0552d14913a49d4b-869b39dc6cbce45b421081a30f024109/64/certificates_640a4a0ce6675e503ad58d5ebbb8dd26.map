{"version":3,"names":["exports","generateCertificate","cov_1fits679mm","s","isCAInstalledInSystem","installCAInSystem","getCAPath","loadCertificates","mkcert_1","require","fs","__importStar","util_1","path","os","child_process_1","readFile","promisify","writeFile","mkdir","unlink","exists","filePath","f","promises","stat","certificateCache","Map","getOrCreateCA","appDataPath","process","platform","b","join","homedir","env","APPDATA","caPath","caCertPath","caKeyPath","cert","key","ca","createCA","organization","countryCode","state","locality","validity","recursive","domains","cacheKey","sort","has","get","allDomains","Array","from","Set","createCert","set","error","console","Error","message","String","userHome","execFileSync","stdio","tempCertPath","tmpdir"],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/certificates.ts"],"sourcesContent":["/**\n * @file Certificate Authority and SSL certificate management for Anglesite\n *\n * This module handles:\n * - Creating and managing a local Certificate Authority (CA)\n * - Generating SSL certificates for .test domains\n * - Installing CA certificates in the system keychain\n * - Checking certificate installation status\n */\nimport { createCA, createCert } from 'mkcert';\nimport * as fs from 'fs';\nimport { promisify } from 'util';\nimport * as path from 'path';\nimport * as os from 'os';\nimport { execFileSync } from 'child_process';\n\nconst readFile = promisify(fs.readFile);\nconst writeFile = promisify(fs.writeFile);\nconst mkdir = promisify(fs.mkdir);\nconst unlink = promisify(fs.unlink);\n\n// Helper to check if file exists using fs.stat\nasync function exists(filePath: string): Promise<boolean> {\n  try {\n    await fs.promises.stat(filePath);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Certificate cache to avoid regenerating certificates for the same domains\n */\nconst certificateCache = new Map<string, { cert: string; key: string }>();\n\n/**\n * Get or create Certificate Authority for Anglesite.\n * Creates a new CA if one doesn't exist, otherwise loads existing CA from disk.\n * @returns Promise resolving to CA certificate and private key.\n */\nasync function getOrCreateCA(): Promise<{ cert: string; key: string }> {\n  const appDataPath =\n    process.platform === 'darwin'\n      ? path.join(os.homedir(), 'Library', 'Application Support', 'Anglesite')\n      : process.platform === 'win32'\n        ? path.join(process.env.APPDATA || '', 'Anglesite')\n        : path.join(os.homedir(), '.config', 'anglesite');\n\n  const caPath = path.join(appDataPath, 'ca');\n  const caCertPath = path.join(caPath, 'ca.crt');\n  const caKeyPath = path.join(caPath, 'ca.key');\n\n  // Check if CA already exists\n  if ((await exists(caCertPath)) && (await exists(caKeyPath))) {\n    return {\n      cert: await readFile(caCertPath, 'utf8'),\n      key: await readFile(caKeyPath, 'utf8'),\n    };\n  }\n\n  // Create new CA\n  const ca = await createCA({\n    organization: 'Anglesite Development',\n    countryCode: 'US',\n    state: 'Development',\n    locality: 'Local',\n    validity: 825, // ~2.25 years\n  });\n\n  // Save CA to disk\n  await mkdir(caPath, { recursive: true });\n  await writeFile(caCertPath, ca.cert);\n  await writeFile(caKeyPath, ca.key);\n\n  return ca;\n}\n\n/**\n * Generate SSL certificate for specific domains using the Anglesite CA.\n * Includes caching to avoid regenerating certificates for the same domain set.\n * @param domains Array of domain names to include in the certificate.\n * @returns Promise resolving to certificate and private key.\n */\nexport async function generateCertificate(domains: string[]): Promise<{ cert: string; key: string }> {\n  // Check cache first\n  const cacheKey = domains.sort().join(',');\n  if (certificateCache.has(cacheKey)) {\n    return certificateCache.get(cacheKey)!;\n  }\n\n  try {\n    // Get or create CA\n    const ca = await getOrCreateCA();\n\n    // Always include localhost and common variations\n    const allDomains = Array.from(new Set([...domains, 'localhost', '127.0.0.1', '::1']));\n\n    // Create certificate\n    const cert = await createCert({\n      ca: { key: ca.key, cert: ca.cert },\n      domains: allDomains,\n      validity: 365,\n    });\n\n    // Cache the certificate\n    certificateCache.set(cacheKey, cert);\n\n    return cert;\n  } catch (error) {\n    console.error('Failed to generate certificate:', error);\n    throw new Error(`Certificate generation failed: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\n/**\n * Check if Anglesite CA is installed and trusted in the system keychain.\n * Verifies both the existence and trustworthiness of the CA certificate.\n * @returns True if CA is properly installed and trusted, false otherwise.\n */\nexport async function isCAInstalledInSystem(): Promise<boolean> {\n  try {\n    // First, try to verify the CA certificate if it exists in the expected location\n    const userHome = os.homedir();\n    const caCertPath = path.join(userHome, 'Library', 'Application Support', 'Anglesite', 'ca', 'ca.crt');\n\n    if (await exists(caCertPath)) {\n      try {\n        execFileSync('security', ['verify-cert', '-c', caCertPath], { stdio: 'pipe' });\n        return true;\n      } catch {\n        // Verification failed, try the fallback method\n      }\n    }\n\n    // Fallback: check if certificate exists by name in keychain\n    execFileSync('security', ['find-certificate', '-c', 'Anglesite Development'], { stdio: 'pipe' });\n    return true;\n  } catch {\n    // Certificate not found or not trusted\n    return false;\n  }\n}\n\n/**\n * Install Anglesite CA into user keychain as a trusted root certificate.\n * This enables SSL certificates signed by the Anglesite CA to be trusted by browsers.\n * Installs in user keychain to avoid requiring administrator privileges.\n * @returns Promise resolving to true if installation succeeded, false if failed.\n */\nexport async function installCAInSystem(): Promise<boolean> {\n  try {\n    const ca = await getOrCreateCA();\n\n    // Write CA cert to temporary file\n    const tempCertPath = path.join(os.tmpdir(), 'anglesite-ca.crt');\n    await writeFile(tempCertPath, ca.cert);\n\n    // Install certificate in user keychain (no admin privileges required)\n    execFileSync('security', ['add-trusted-cert', '-d', '-r', 'trustRoot', tempCertPath], {\n      stdio: 'pipe',\n    });\n\n    // Clean up temporary file\n    await unlink(tempCertPath);\n\n    return true;\n  } catch (error) {\n    console.error('Failed to install CA in keychain:', error);\n    return false;\n  }\n}\n\n/**\n * Get the file system path to the Anglesite CA certificate.\n * Useful for manual installation or external certificate management.\n * @returns Absolute path to the ca.crt file.\n */\nexport function getCAPath(): string {\n  const appDataPath =\n    process.platform === 'darwin'\n      ? path.join(os.homedir(), 'Library', 'Application Support', 'Anglesite')\n      : process.platform === 'win32'\n        ? path.join(process.env.APPDATA || '', 'Anglesite')\n        : path.join(os.homedir(), '.config', 'anglesite');\n\n  return path.join(appDataPath, 'ca', 'ca.crt');\n}\n\n/**\n * Load or generate SSL certificates for HTTPS server with specific domains.\n * Main entry point for getting certificates for the HTTPS proxy server.\n * @param domains Array of domain names, defaults to [\"anglesite.test\"].\n * @returns Promise resolving to certificate and private key for HTTPS server.\n */\nexport async function loadCertificates(domains: string[] = ['anglesite.test']): Promise<{\n  cert: string;\n  key: string;\n}> {\n  // Generate certificate for specific domains only\n  return generateCertificate(domains);\n}\n"],"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","ignoreList":[]}