{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/webpack.common.js","mappings":";AAAA;;;;;;GAMG;AAEH,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,MAAM,iBAAiB,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC;AACzD,MAAM,UAAU,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC;AAClD,MAAM,YAAY,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAEhD;;;GAGG;AACH,MAAM,CAAC,OAAO,GAAG;IACf,sEAAsE;IACtE,MAAM,EAAE,mBAAmB;IAE3B,+CAA+C;IAC/C,KAAK,EAAE;QACL,yCAAyC;QACzC,IAAI,EAAE,0BAA0B;QAChC,6DAA6D;QAC7D,MAAM,EAAE,CAAC,4BAA4B,EAAE,4BAA4B,EAAE,kBAAkB,CAAC;KACzF;IAED,sCAAsC;IACtC,OAAO,EAAE;QACP,+CAA+C;QAC/C,UAAU,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC;QAC1C,uCAAuC;QACvC,KAAK,EAAE;YACL,uCAAuC;YACvC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC;YACnC,uCAAuC;YACvC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,yBAAyB,CAAC;YACjE,6BAA6B;YAC7B,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC;SAC7C;KACF;IAED,8BAA8B;IAC9B,MAAM,EAAE;QACN,KAAK,EAAE;YACL;;;eAGG;YACH;gBACE,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,cAAc;gBACvB,GAAG,EAAE;oBACH;wBACE,MAAM,EAAE,WAAW;wBACnB,OAAO,EAAE;4BACP,aAAa,EAAE,IAAI;4BACnB,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,4BAA4B,CAAC;yBAClE;qBACF;iBACF;aACF;YAED;;;eAGG;YACH;gBACE,IAAI,EAAE,mBAAmB;gBACzB,IAAI,EAAE,OAAO;gBACb,MAAM,EAAE;oBACN,gBAAgB,EAAE;wBAChB,OAAO,EAAE,YAAY,CAAC,MAAM,CAAC,WAAW;qBACzC;iBACF;aACF;YAED;;;eAGG;YACH;gBACE,IAAI,EAAE,8BAA8B;gBACpC,IAAI,EAAE,gBAAgB;aACvB;SACF;KACF;IAED,oCAAoC;IACpC,OAAO,EAAE;QACP;;;WAGG;QACH,IAAI,UAAU,CAAC;YACb,QAAQ,EAAE;gBACR;oBACE,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC;oBACtC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,gCAAgC,CAAC;oBAC7D,WAAW,EAAE;wBACX,MAAM,EAAE,CAAC,WAAW,CAAC,EAAE,0BAA0B;qBAClD;iBACF;aACF;SACF,CAAC;KACH;IAED;;;OAGG;IACH,SAAS,EAAE;QACT,QAAQ,EAAE,mBAAmB;KAC9B;IAED;;;OAGG;IACH,KAAK,EAAE;QACL,MAAM,EAAE,IAAI;QACZ,OAAO,EAAE,KAAK;QACd,QAAQ,EAAE,KAAK;QACf,MAAM,EAAE,KAAK;QACb,YAAY,EAAE,KAAK;QACnB,WAAW,EAAE,KAAK;KACnB;CACF,CAAC","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/webpack.common.js"],"sourcesContent":["/**\n * @file Common webpack configuration shared between development and production builds\n * @description Contains shared configuration for entry points, TypeScript compilation, \n * static asset handling, and plugin setup for Anglesite's Electron renderer process\n * @author David W. Keith <git@dwk.io>\n * @since 0.1.0\n */\n\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst CopyPlugin = require('copy-webpack-plugin');\nconst ASSET_CONFIG = require('./assets.config');\n\n/**\n * Common webpack configuration object\n * @type {import('webpack').Configuration}\n */\nmodule.exports = {\n  /** Target Electron's renderer process for proper module resolution */\n  target: 'electron-renderer',\n  \n  /** Entry points for the application bundles */\n  entry: {\n    /** Main React application entry point */\n    main: './app/ui/react/index.tsx',\n    /** CSS styles bundle including Tailwind and custom styles */\n    styles: ['./app/ui/tailwind-base.css', './app/ui/default-theme.css', './app/styles.css'],\n  },\n\n  /** Module resolution configuration */\n  resolve: {\n    /** File extensions to resolve automatically */\n    extensions: ['.ts', '.tsx', '.js', '.jsx'],\n    /** Path aliases for cleaner imports */\n    alias: {\n      /** Root application directory alias */\n      '@': path.resolve(__dirname, 'app'),\n      /** React components directory alias */\n      '@components': path.resolve(__dirname, 'app/ui/react/components'),\n      /** Styles directory alias */\n      '@styles': path.resolve(__dirname, 'app/ui'),\n    },\n  },\n\n  /** Module processing rules */\n  module: {\n    rules: [\n      /** \n       * TypeScript/React files processing\n       * Uses ts-loader for fast transpilation without type checking\n       */\n      {\n        test: /\\.tsx?$/,\n        exclude: /node_modules/,\n        use: [\n          {\n            loader: 'ts-loader',\n            options: {\n              transpileOnly: true,\n              configFile: path.resolve(__dirname, 'app/ui/react/tsconfig.json'),\n            },\n          },\n        ],\n      },\n\n      /** \n       * Static image assets (SVG, GIF, ICO)\n       * Small images are inlined as base64, larger ones are copied\n       */\n      {\n        test: /\\.(svg|gif|ico)$/i,\n        type: 'asset',\n        parser: {\n          dataUrlCondition: {\n            maxSize: ASSET_CONFIG.images.inlineLimit,\n          },\n        },\n      },\n\n      /** \n       * Font assets processing\n       * All fonts are copied as separate files for better caching\n       */\n      {\n        test: /\\.(woff|woff2|eot|ttf|otf)$/i,\n        type: 'asset/resource',\n      },\n    ],\n  },\n\n  /** Webpack plugins configuration */\n  plugins: [\n    /** \n     * Copy static assets to output directory\n     * Copies icons while ignoring source files\n     */\n    new CopyPlugin({\n      patterns: [\n        {\n          from: path.resolve(__dirname, 'icons'),\n          to: path.resolve(__dirname, 'dist/app/ui/react/assets/icons'),\n          globOptions: {\n            ignore: ['**/src/**'], // Ignore source SVG files\n          },\n        },\n      ],\n    }),\n  ],\n\n  /** \n   * External dependencies that should not be bundled\n   * Electron modules are provided by the runtime\n   */\n  externals: {\n    electron: 'commonjs electron',\n  },\n\n  /** \n   * Build output statistics configuration\n   * Minimizes console output for cleaner builds\n   */\n  stats: {\n    colors: true,\n    modules: false,\n    children: false,\n    chunks: false,\n    chunkModules: false,\n    entrypoints: false,\n  },\n};"],"version":3}