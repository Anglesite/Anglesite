444eff39628e9c05edfe6eff15accbc6
"use strict";
/**
 * @file Common webpack configuration shared between development and production builds
 * @description Contains shared configuration for entry points, TypeScript compilation,
 * static asset handling, and plugin setup for Anglesite's Electron renderer process
 * @author David W. Keith <git@dwk.io>
 * @since 0.1.0
 */
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const CopyPlugin = require('copy-webpack-plugin');
const ASSET_CONFIG = require('./assets.config');
/**
 * Common webpack configuration object
 * @type {import('webpack').Configuration}
 */
module.exports = {
    /** Target Electron's renderer process for proper module resolution */
    target: 'electron-renderer',
    /** Entry points for the application bundles */
    entry: {
        /** Main React application entry point */
        main: './app/ui/react/index.tsx',
        /** CSS styles bundle including Tailwind and custom styles */
        styles: ['./app/ui/tailwind-base.css', './app/ui/default-theme.css', './app/styles.css'],
    },
    /** Module resolution configuration */
    resolve: {
        /** File extensions to resolve automatically */
        extensions: ['.ts', '.tsx', '.js', '.jsx'],
        /** Path aliases for cleaner imports */
        alias: {
            /** Root application directory alias */
            '@': path.resolve(__dirname, 'app'),
            /** React components directory alias */
            '@components': path.resolve(__dirname, 'app/ui/react/components'),
            /** Styles directory alias */
            '@styles': path.resolve(__dirname, 'app/ui'),
        },
    },
    /** Module processing rules */
    module: {
        rules: [
            /**
             * TypeScript/React files processing
             * Uses ts-loader for fast transpilation without type checking
             */
            {
                test: /\.tsx?$/,
                exclude: /node_modules/,
                use: [
                    {
                        loader: 'ts-loader',
                        options: {
                            transpileOnly: true,
                            configFile: path.resolve(__dirname, 'app/ui/react/tsconfig.json'),
                        },
                    },
                ],
            },
            /**
             * Static image assets (SVG, GIF, ICO)
             * Small images are inlined as base64, larger ones are copied
             */
            {
                test: /\.(svg|gif|ico)$/i,
                type: 'asset',
                parser: {
                    dataUrlCondition: {
                        maxSize: ASSET_CONFIG.images.inlineLimit,
                    },
                },
            },
            /**
             * Font assets processing
             * All fonts are copied as separate files for better caching
             */
            {
                test: /\.(woff|woff2|eot|ttf|otf)$/i,
                type: 'asset/resource',
            },
        ],
    },
    /** Webpack plugins configuration */
    plugins: [
        /**
         * Copy static assets to output directory
         * Copies icons while ignoring source files
         */
        new CopyPlugin({
            patterns: [
                {
                    from: path.resolve(__dirname, 'icons'),
                    to: path.resolve(__dirname, 'dist/app/ui/react/assets/icons'),
                    globOptions: {
                        ignore: ['**/src/**'], // Ignore source SVG files
                    },
                },
            ],
        }),
    ],
    /**
     * External dependencies that should not be bundled
     * Electron modules are provided by the runtime
     */
    externals: {
        electron: 'commonjs electron',
    },
    /**
     * Build output statistics configuration
     * Minimizes console output for cleaner builds
     */
    stats: {
        colors: true,
        modules: false,
        children: false,
        chunks: false,
        chunkModules: false,
        entrypoints: false,
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2R3ay9EZXZlbG9wZXIvZ2l0bGFiLmNvbS9kYXZpZHdrZWl0aC9AZHdrL2FuZ2xlc2l0ZS93ZWJwYWNrLmNvbW1vbi5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HO0FBRUgsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLE1BQU0saUJBQWlCLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDekQsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDbEQsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFFaEQ7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRztJQUNmLHNFQUFzRTtJQUN0RSxNQUFNLEVBQUUsbUJBQW1CO0lBRTNCLCtDQUErQztJQUMvQyxLQUFLLEVBQUU7UUFDTCx5Q0FBeUM7UUFDekMsSUFBSSxFQUFFLDBCQUEwQjtRQUNoQyw2REFBNkQ7UUFDN0QsTUFBTSxFQUFFLENBQUMsNEJBQTRCLEVBQUUsNEJBQTRCLEVBQUUsa0JBQWtCLENBQUM7S0FDekY7SUFFRCxzQ0FBc0M7SUFDdEMsT0FBTyxFQUFFO1FBQ1AsK0NBQStDO1FBQy9DLFVBQVUsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQztRQUMxQyx1Q0FBdUM7UUFDdkMsS0FBSyxFQUFFO1lBQ0wsdUNBQXVDO1lBQ3ZDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7WUFDbkMsdUNBQXVDO1lBQ3ZDLGFBQWEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSx5QkFBeUIsQ0FBQztZQUNqRSw2QkFBNkI7WUFDN0IsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQztTQUM3QztLQUNGO0lBRUQsOEJBQThCO0lBQzlCLE1BQU0sRUFBRTtRQUNOLEtBQUssRUFBRTtZQUNMOzs7ZUFHRztZQUNIO2dCQUNFLElBQUksRUFBRSxTQUFTO2dCQUNmLE9BQU8sRUFBRSxjQUFjO2dCQUN2QixHQUFHLEVBQUU7b0JBQ0g7d0JBQ0UsTUFBTSxFQUFFLFdBQVc7d0JBQ25CLE9BQU8sRUFBRTs0QkFDUCxhQUFhLEVBQUUsSUFBSTs0QkFDbkIsVUFBVSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLDRCQUE0QixDQUFDO3lCQUNsRTtxQkFDRjtpQkFDRjthQUNGO1lBRUQ7OztlQUdHO1lBQ0g7Z0JBQ0UsSUFBSSxFQUFFLG1CQUFtQjtnQkFDekIsSUFBSSxFQUFFLE9BQU87Z0JBQ2IsTUFBTSxFQUFFO29CQUNOLGdCQUFnQixFQUFFO3dCQUNoQixPQUFPLEVBQUUsWUFBWSxDQUFDLE1BQU0sQ0FBQyxXQUFXO3FCQUN6QztpQkFDRjthQUNGO1lBRUQ7OztlQUdHO1lBQ0g7Z0JBQ0UsSUFBSSxFQUFFLDhCQUE4QjtnQkFDcEMsSUFBSSxFQUFFLGdCQUFnQjthQUN2QjtTQUNGO0tBQ0Y7SUFFRCxvQ0FBb0M7SUFDcEMsT0FBTyxFQUFFO1FBQ1A7OztXQUdHO1FBQ0gsSUFBSSxVQUFVLENBQUM7WUFDYixRQUFRLEVBQUU7Z0JBQ1I7b0JBQ0UsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQztvQkFDdEMsRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLGdDQUFnQyxDQUFDO29CQUM3RCxXQUFXLEVBQUU7d0JBQ1gsTUFBTSxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsMEJBQTBCO3FCQUNsRDtpQkFDRjthQUNGO1NBQ0YsQ0FBQztLQUNIO0lBRUQ7OztPQUdHO0lBQ0gsU0FBUyxFQUFFO1FBQ1QsUUFBUSxFQUFFLG1CQUFtQjtLQUM5QjtJQUVEOzs7T0FHRztJQUNILEtBQUssRUFBRTtRQUNMLE1BQU0sRUFBRSxJQUFJO1FBQ1osT0FBTyxFQUFFLEtBQUs7UUFDZCxRQUFRLEVBQUUsS0FBSztRQUNmLE1BQU0sRUFBRSxLQUFLO1FBQ2IsWUFBWSxFQUFFLEtBQUs7UUFDbkIsV0FBVyxFQUFFLEtBQUs7S0FDbkI7Q0FDRixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9kd2svRGV2ZWxvcGVyL2dpdGxhYi5jb20vZGF2aWR3a2VpdGgvQGR3ay9hbmdsZXNpdGUvd2VicGFjay5jb21tb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBDb21tb24gd2VicGFjayBjb25maWd1cmF0aW9uIHNoYXJlZCBiZXR3ZWVuIGRldmVsb3BtZW50IGFuZCBwcm9kdWN0aW9uIGJ1aWxkc1xuICogQGRlc2NyaXB0aW9uIENvbnRhaW5zIHNoYXJlZCBjb25maWd1cmF0aW9uIGZvciBlbnRyeSBwb2ludHMsIFR5cGVTY3JpcHQgY29tcGlsYXRpb24sIFxuICogc3RhdGljIGFzc2V0IGhhbmRsaW5nLCBhbmQgcGx1Z2luIHNldHVwIGZvciBBbmdsZXNpdGUncyBFbGVjdHJvbiByZW5kZXJlciBwcm9jZXNzXG4gKiBAYXV0aG9yIERhdmlkIFcuIEtlaXRoIDxnaXRAZHdrLmlvPlxuICogQHNpbmNlIDAuMS4wXG4gKi9cblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IEh0bWxXZWJwYWNrUGx1Z2luID0gcmVxdWlyZSgnaHRtbC13ZWJwYWNrLXBsdWdpbicpO1xuY29uc3QgQ29weVBsdWdpbiA9IHJlcXVpcmUoJ2NvcHktd2VicGFjay1wbHVnaW4nKTtcbmNvbnN0IEFTU0VUX0NPTkZJRyA9IHJlcXVpcmUoJy4vYXNzZXRzLmNvbmZpZycpO1xuXG4vKipcbiAqIENvbW1vbiB3ZWJwYWNrIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gKiBAdHlwZSB7aW1wb3J0KCd3ZWJwYWNrJykuQ29uZmlndXJhdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8qKiBUYXJnZXQgRWxlY3Ryb24ncyByZW5kZXJlciBwcm9jZXNzIGZvciBwcm9wZXIgbW9kdWxlIHJlc29sdXRpb24gKi9cbiAgdGFyZ2V0OiAnZWxlY3Ryb24tcmVuZGVyZXInLFxuICBcbiAgLyoqIEVudHJ5IHBvaW50cyBmb3IgdGhlIGFwcGxpY2F0aW9uIGJ1bmRsZXMgKi9cbiAgZW50cnk6IHtcbiAgICAvKiogTWFpbiBSZWFjdCBhcHBsaWNhdGlvbiBlbnRyeSBwb2ludCAqL1xuICAgIG1haW46ICcuL2FwcC91aS9yZWFjdC9pbmRleC50c3gnLFxuICAgIC8qKiBDU1Mgc3R5bGVzIGJ1bmRsZSBpbmNsdWRpbmcgVGFpbHdpbmQgYW5kIGN1c3RvbSBzdHlsZXMgKi9cbiAgICBzdHlsZXM6IFsnLi9hcHAvdWkvdGFpbHdpbmQtYmFzZS5jc3MnLCAnLi9hcHAvdWkvZGVmYXVsdC10aGVtZS5jc3MnLCAnLi9hcHAvc3R5bGVzLmNzcyddLFxuICB9LFxuXG4gIC8qKiBNb2R1bGUgcmVzb2x1dGlvbiBjb25maWd1cmF0aW9uICovXG4gIHJlc29sdmU6IHtcbiAgICAvKiogRmlsZSBleHRlbnNpb25zIHRvIHJlc29sdmUgYXV0b21hdGljYWxseSAqL1xuICAgIGV4dGVuc2lvbnM6IFsnLnRzJywgJy50c3gnLCAnLmpzJywgJy5qc3gnXSxcbiAgICAvKiogUGF0aCBhbGlhc2VzIGZvciBjbGVhbmVyIGltcG9ydHMgKi9cbiAgICBhbGlhczoge1xuICAgICAgLyoqIFJvb3QgYXBwbGljYXRpb24gZGlyZWN0b3J5IGFsaWFzICovXG4gICAgICAnQCc6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICdhcHAnKSxcbiAgICAgIC8qKiBSZWFjdCBjb21wb25lbnRzIGRpcmVjdG9yeSBhbGlhcyAqL1xuICAgICAgJ0Bjb21wb25lbnRzJzogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ2FwcC91aS9yZWFjdC9jb21wb25lbnRzJyksXG4gICAgICAvKiogU3R5bGVzIGRpcmVjdG9yeSBhbGlhcyAqL1xuICAgICAgJ0BzdHlsZXMnOiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnYXBwL3VpJyksXG4gICAgfSxcbiAgfSxcblxuICAvKiogTW9kdWxlIHByb2Nlc3NpbmcgcnVsZXMgKi9cbiAgbW9kdWxlOiB7XG4gICAgcnVsZXM6IFtcbiAgICAgIC8qKiBcbiAgICAgICAqIFR5cGVTY3JpcHQvUmVhY3QgZmlsZXMgcHJvY2Vzc2luZ1xuICAgICAgICogVXNlcyB0cy1sb2FkZXIgZm9yIGZhc3QgdHJhbnNwaWxhdGlvbiB3aXRob3V0IHR5cGUgY2hlY2tpbmdcbiAgICAgICAqL1xuICAgICAge1xuICAgICAgICB0ZXN0OiAvXFwudHN4PyQvLFxuICAgICAgICBleGNsdWRlOiAvbm9kZV9tb2R1bGVzLyxcbiAgICAgICAgdXNlOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbG9hZGVyOiAndHMtbG9hZGVyJyxcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgdHJhbnNwaWxlT25seTogdHJ1ZSxcbiAgICAgICAgICAgICAgY29uZmlnRmlsZTogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ2FwcC91aS9yZWFjdC90c2NvbmZpZy5qc29uJyksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuXG4gICAgICAvKiogXG4gICAgICAgKiBTdGF0aWMgaW1hZ2UgYXNzZXRzIChTVkcsIEdJRiwgSUNPKVxuICAgICAgICogU21hbGwgaW1hZ2VzIGFyZSBpbmxpbmVkIGFzIGJhc2U2NCwgbGFyZ2VyIG9uZXMgYXJlIGNvcGllZFxuICAgICAgICovXG4gICAgICB7XG4gICAgICAgIHRlc3Q6IC9cXC4oc3ZnfGdpZnxpY28pJC9pLFxuICAgICAgICB0eXBlOiAnYXNzZXQnLFxuICAgICAgICBwYXJzZXI6IHtcbiAgICAgICAgICBkYXRhVXJsQ29uZGl0aW9uOiB7XG4gICAgICAgICAgICBtYXhTaXplOiBBU1NFVF9DT05GSUcuaW1hZ2VzLmlubGluZUxpbWl0LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICAvKiogXG4gICAgICAgKiBGb250IGFzc2V0cyBwcm9jZXNzaW5nXG4gICAgICAgKiBBbGwgZm9udHMgYXJlIGNvcGllZCBhcyBzZXBhcmF0ZSBmaWxlcyBmb3IgYmV0dGVyIGNhY2hpbmdcbiAgICAgICAqL1xuICAgICAge1xuICAgICAgICB0ZXN0OiAvXFwuKHdvZmZ8d29mZjJ8ZW90fHR0ZnxvdGYpJC9pLFxuICAgICAgICB0eXBlOiAnYXNzZXQvcmVzb3VyY2UnLFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuXG4gIC8qKiBXZWJwYWNrIHBsdWdpbnMgY29uZmlndXJhdGlvbiAqL1xuICBwbHVnaW5zOiBbXG4gICAgLyoqIFxuICAgICAqIENvcHkgc3RhdGljIGFzc2V0cyB0byBvdXRwdXQgZGlyZWN0b3J5XG4gICAgICogQ29waWVzIGljb25zIHdoaWxlIGlnbm9yaW5nIHNvdXJjZSBmaWxlc1xuICAgICAqL1xuICAgIG5ldyBDb3B5UGx1Z2luKHtcbiAgICAgIHBhdHRlcm5zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBmcm9tOiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnaWNvbnMnKSxcbiAgICAgICAgICB0bzogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ2Rpc3QvYXBwL3VpL3JlYWN0L2Fzc2V0cy9pY29ucycpLFxuICAgICAgICAgIGdsb2JPcHRpb25zOiB7XG4gICAgICAgICAgICBpZ25vcmU6IFsnKiovc3JjLyoqJ10sIC8vIElnbm9yZSBzb3VyY2UgU1ZHIGZpbGVzXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSksXG4gIF0sXG5cbiAgLyoqIFxuICAgKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXMgdGhhdCBzaG91bGQgbm90IGJlIGJ1bmRsZWRcbiAgICogRWxlY3Ryb24gbW9kdWxlcyBhcmUgcHJvdmlkZWQgYnkgdGhlIHJ1bnRpbWVcbiAgICovXG4gIGV4dGVybmFsczoge1xuICAgIGVsZWN0cm9uOiAnY29tbW9uanMgZWxlY3Ryb24nLFxuICB9LFxuXG4gIC8qKiBcbiAgICogQnVpbGQgb3V0cHV0IHN0YXRpc3RpY3MgY29uZmlndXJhdGlvblxuICAgKiBNaW5pbWl6ZXMgY29uc29sZSBvdXRwdXQgZm9yIGNsZWFuZXIgYnVpbGRzXG4gICAqL1xuICBzdGF0czoge1xuICAgIGNvbG9yczogdHJ1ZSxcbiAgICBtb2R1bGVzOiBmYWxzZSxcbiAgICBjaGlsZHJlbjogZmFsc2UsXG4gICAgY2h1bmtzOiBmYWxzZSxcbiAgICBjaHVua01vZHVsZXM6IGZhbHNlLFxuICAgIGVudHJ5cG9pbnRzOiBmYWxzZSxcbiAgfSxcbn07Il0sInZlcnNpb24iOjN9