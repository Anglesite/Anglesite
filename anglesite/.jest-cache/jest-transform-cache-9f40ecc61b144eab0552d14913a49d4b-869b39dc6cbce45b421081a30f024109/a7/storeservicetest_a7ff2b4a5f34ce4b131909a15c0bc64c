1993b69f29d4c643591f2417bec1c772
"use strict";
/**
 * @file Tests for Store Service with DI
 *
 * Tests the refactored StoreService implementation including dependency
 * injection, validation, and lifecycle management.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const store_service_1 = require("../../../app/core/store-service");
const service_registry_1 = require("../../../app/core/service-registry");
const path = __importStar(require("path"));
const os = __importStar(require("os"));
describe('StoreService', () => {
    let logger;
    let fileSystem;
    let testDataPath;
    let storeService;
    beforeEach(() => {
        logger = new service_registry_1.Logger('test-store');
        fileSystem = new service_registry_1.FileSystemService();
        testDataPath = path.join(os.tmpdir(), `anglesite-test-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`);
        // Create store service with test path
        storeService = (0, store_service_1.createStoreService)(logger, fileSystem, undefined, testDataPath);
    });
    afterEach(async () => {
        if (storeService) {
            await storeService.dispose();
        }
        // Clean up test directory
        try {
            const testSettingsFile = path.join(testDataPath, 'settings.json');
            if (await fileSystem.exists(testSettingsFile)) {
                await fileSystem.rmdir(testDataPath, { recursive: true });
            }
        }
        catch {
            // Ignore cleanup errors
        }
    });
    describe('Service Creation', () => {
        it('should create store service with factory function', () => {
            expect(storeService).toBeDefined();
            expect(typeof storeService.get).toBe('function');
            expect(typeof storeService.set).toBe('function');
            expect(typeof storeService.dispose).toBe('function');
        });
        it('should create store service with default settings', () => {
            const settings = storeService.getAll();
            expect(settings).toEqual({
                autoDnsEnabled: false,
                httpsMode: null,
                firstLaunchCompleted: false,
                theme: 'system',
                openWebsiteWindows: [],
                recentWebsites: [],
            });
        });
        it('should create store with static factory method', () => {
            const store = store_service_1.StoreService.create(logger, fileSystem, undefined, testDataPath);
            expect(store).toBeInstanceOf(store_service_1.StoreService);
            expect(store.get('theme')).toBe('system');
        });
    });
    describe('Settings Management', () => {
        it('should get and set individual settings', () => {
            expect(storeService.get('theme')).toBe('system');
            storeService.set('theme', 'dark');
            expect(storeService.get('theme')).toBe('dark');
            storeService.set('autoDnsEnabled', true);
            expect(storeService.get('autoDnsEnabled')).toBe(true);
        });
        it('should set and get all settings', () => {
            const newSettings = {
                theme: 'light',
                autoDnsEnabled: true,
                firstLaunchCompleted: true,
            };
            storeService.setAll(newSettings);
            expect(storeService.get('theme')).toBe('light');
            expect(storeService.get('autoDnsEnabled')).toBe(true);
            expect(storeService.get('firstLaunchCompleted')).toBe(true);
            // Other settings should remain unchanged
            expect(storeService.get('httpsMode')).toBe(null);
        });
        it('should return a copy of all settings to prevent mutations', () => {
            const settings1 = storeService.getAll();
            const settings2 = storeService.getAll();
            settings1.theme = 'light';
            expect(settings2.theme).toBe('system'); // Should not be affected
            expect(storeService.get('theme')).toBe('system'); // Original should not be affected
        });
    });
    describe('Settings Validation', () => {
        it('should validate boolean settings', () => {
            expect(() => storeService.set('autoDnsEnabled', 'invalid')).toThrow("Invalid value for setting 'autoDnsEnabled': autoDnsEnabled must be a boolean");
            expect(() => storeService.set('firstLaunchCompleted', 42)).toThrow("Invalid value for setting 'firstLaunchCompleted': firstLaunchCompleted must be a boolean");
        });
        it('should validate httpsMode setting', () => {
            // Valid values
            storeService.set('httpsMode', 'https');
            expect(storeService.get('httpsMode')).toBe('https');
            storeService.set('httpsMode', 'http');
            expect(storeService.get('httpsMode')).toBe('http');
            storeService.set('httpsMode', null);
            expect(storeService.get('httpsMode')).toBe(null);
            // Invalid value
            expect(() => storeService.set('httpsMode', 'invalid')).toThrow('Invalid value for setting \'httpsMode\': httpsMode must be null, "https", or "http"');
        });
        it('should validate theme setting', () => {
            // Valid values
            ['system', 'light', 'dark'].forEach((theme) => {
                storeService.set('theme', theme);
                expect(storeService.get('theme')).toBe(theme);
            });
            // Invalid value
            expect(() => storeService.set('theme', 'invalid')).toThrow('Invalid value for setting \'theme\': theme must be "system", "light", or "dark"');
        });
        it('should validate window states array', () => {
            const validWindowState = {
                websiteName: 'test-site',
                bounds: { x: 100, y: 100, width: 800, height: 600 },
            };
            storeService.set('openWebsiteWindows', [validWindowState]);
            expect(storeService.get('openWebsiteWindows')).toEqual([validWindowState]);
            // Invalid - not an array
            expect(() => storeService.set('openWebsiteWindows', 'invalid')).toThrow("Invalid value for setting 'openWebsiteWindows': openWebsiteWindows must be an array");
            // Invalid - missing websiteName
            expect(() => storeService.set('openWebsiteWindows', [
                { bounds: { x: 0, y: 0, width: 100, height: 100 } },
            ])).toThrow("Invalid value for setting 'openWebsiteWindows': Each window state must have a valid websiteName");
        });
        it('should validate recent websites array', () => {
            const validWebsites = ['site1', 'site2', 'site3'];
            storeService.set('recentWebsites', validWebsites);
            expect(storeService.get('recentWebsites')).toEqual(validWebsites);
            // Invalid - not an array
            expect(() => storeService.set('recentWebsites', 'invalid')).toThrow("Invalid value for setting 'recentWebsites': recentWebsites must be an array");
            // Invalid - empty string
            expect(() => storeService.set('recentWebsites', ['site1', '', 'site3'])).toThrow("Invalid value for setting 'recentWebsites': All recent websites must be non-empty strings");
            // Invalid - too many entries
            const tooManyWebsites = Array.from({ length: 11 }, (_, i) => `site${i}`);
            expect(() => storeService.set('recentWebsites', tooManyWebsites)).toThrow("Invalid value for setting 'recentWebsites': recentWebsites cannot exceed 10 entries");
        });
        it('should validate multiple settings atomically', () => {
            const invalidSettings = {
                theme: 'invalid',
                autoDnsEnabled: 'not-boolean',
            };
            expect(() => storeService.setAll(invalidSettings)).toThrow('Invalid settings provided: theme must be "system", "light", or "dark", autoDnsEnabled must be a boolean');
            // Original values should be unchanged
            expect(storeService.get('theme')).toBe('system');
            expect(storeService.get('autoDnsEnabled')).toBe(false);
        });
    });
    describe('Window State Management', () => {
        it('should save and get window states', () => {
            const windowStates = [
                {
                    websiteName: 'site1',
                    bounds: { x: 100, y: 100, width: 800, height: 600 },
                    isMaximized: false,
                },
                {
                    websiteName: 'site2',
                    bounds: { x: 200, y: 200, width: 1000, height: 800 },
                    isMaximized: true,
                },
            ];
            storeService.saveWindowStates(windowStates);
            const retrieved = storeService.getWindowStates();
            expect(retrieved).toEqual(windowStates);
        });
        it('should clear window states', () => {
            const windowStates = [{ websiteName: 'site1', bounds: { x: 0, y: 0, width: 800, height: 600 } }];
            storeService.saveWindowStates(windowStates);
            expect(storeService.getWindowStates()).toEqual(windowStates);
            storeService.clearWindowStates();
            expect(storeService.getWindowStates()).toEqual([]);
        });
    });
    describe('Recent Websites Management', () => {
        it('should add recent websites', () => {
            storeService.addRecentWebsite('site1');
            storeService.addRecentWebsite('site2');
            expect(storeService.getRecentWebsites()).toEqual(['site2', 'site1']);
        });
        it('should move existing website to top when added again', () => {
            storeService.addRecentWebsite('site1');
            storeService.addRecentWebsite('site2');
            storeService.addRecentWebsite('site3');
            storeService.addRecentWebsite('site1'); // Move to top
            expect(storeService.getRecentWebsites()).toEqual(['site1', 'site3', 'site2']);
        });
        it('should limit recent websites to 10', () => {
            // Add 12 websites
            for (let i = 1; i <= 12; i++) {
                storeService.addRecentWebsite(`site${i}`);
            }
            const recent = storeService.getRecentWebsites();
            expect(recent).toHaveLength(10);
            expect(recent[0]).toBe('site12'); // Most recent
            expect(recent[9]).toBe('site3'); // 10th most recent
        });
        it('should remove specific recent website', () => {
            storeService.addRecentWebsite('site1');
            storeService.addRecentWebsite('site2');
            storeService.addRecentWebsite('site3');
            storeService.removeRecentWebsite('site2');
            expect(storeService.getRecentWebsites()).toEqual(['site3', 'site1']);
        });
        it('should clear all recent websites', () => {
            storeService.addRecentWebsite('site1');
            storeService.addRecentWebsite('site2');
            storeService.clearRecentWebsites();
            expect(storeService.getRecentWebsites()).toEqual([]);
        });
        it('should handle removing non-existent website gracefully', () => {
            storeService.addRecentWebsite('site1');
            // This should not throw or affect existing websites
            storeService.removeRecentWebsite('non-existent');
            expect(storeService.getRecentWebsites()).toEqual(['site1']);
        });
    });
    describe('Persistence and Lifecycle', () => {
        it('should implement IStore interface correctly', () => {
            // Type check - this will fail compilation if interface is not implemented
            const store = storeService;
            expect(store).toBeDefined();
        });
        it('should dispose cleanly', async () => {
            storeService.set('theme', 'dark');
            await expect(storeService.dispose()).resolves.toBeUndefined();
            // Should still be able to read values after dispose
            expect(storeService.get('theme')).toBe('dark');
        });
        it('should force save settings', async () => {
            storeService.set('theme', 'light');
            await expect(storeService.forceSave()).resolves.toBeUndefined();
        });
        it('should rollback changes on set error', () => {
            const originalTheme = storeService.get('theme');
            // Mock console methods to avoid spam during testing
            const originalError = console.error;
            console.error = jest.fn();
            try {
                expect(() => storeService.set('theme', 'invalid')).toThrow();
                expect(storeService.get('theme')).toBe(originalTheme); // Should be rolled back
            }
            finally {
                console.error = originalError;
            }
        });
        it('should rollback changes on setAll error', () => {
            storeService.set('theme', 'dark');
            storeService.set('autoDnsEnabled', true);
            const originalSettings = storeService.getAll();
            // Mock console methods
            const originalError = console.error;
            console.error = jest.fn();
            try {
                expect(() => storeService.setAll({
                    theme: 'invalid',
                    httpsMode: 'https',
                })).toThrow();
                // All settings should be rolled back to original values
                expect(storeService.getAll()).toEqual(originalSettings);
            }
            finally {
                console.error = originalError;
            }
        });
    });
    describe('Logging Integration', () => {
        it('should log setting changes', () => {
            const mockLogger = {
                debug: jest.fn(),
                info: jest.fn(),
                warn: jest.fn(),
                error: jest.fn(),
                child: jest.fn().mockReturnThis(),
            };
            const storeWithMockLogger = (0, store_service_1.createStoreService)(mockLogger, fileSystem, undefined, testDataPath);
            storeWithMockLogger.set('theme', 'dark');
            expect(mockLogger.debug).toHaveBeenCalledWith('Setting theme', { newValue: 'dark' });
        });
        it('should log validation errors', () => {
            const mockLogger = {
                debug: jest.fn(),
                info: jest.fn(),
                warn: jest.fn(),
                error: jest.fn(),
                child: jest.fn().mockReturnThis(),
            };
            const storeWithMockLogger = (0, store_service_1.createStoreService)(mockLogger, fileSystem, undefined, testDataPath);
            try {
                storeWithMockLogger.set('theme', 'invalid');
            }
            catch {
                // Expected to throw
            }
            expect(mockLogger.error).toHaveBeenCalledWith('Setting validation failed', expect.any(Error), {
                key: 'theme',
                value: 'invalid',
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,