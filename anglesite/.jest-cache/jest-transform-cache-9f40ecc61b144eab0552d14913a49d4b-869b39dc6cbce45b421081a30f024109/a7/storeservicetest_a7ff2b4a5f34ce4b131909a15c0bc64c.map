{"file":"/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/app/core/store-service.test.ts","mappings":"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","names":[],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/test/app/core/store-service.test.ts"],"sourcesContent":["/**\n * @file Tests for Store Service with DI\n *\n * Tests the refactored StoreService implementation including dependency\n * injection, validation, and lifecycle management.\n */\n\nimport { StoreService, createStoreService } from '../../../app/core/store-service';\nimport { Logger, FileSystemService } from '../../../app/core/service-registry';\nimport { ILogger, IFileSystem } from '../../../app/core/interfaces';\nimport { WindowState, AppSettings } from '../../../app/core/types';\nimport * as path from 'path';\nimport * as os from 'os';\n\ndescribe('StoreService', () => {\n  let logger: ILogger;\n  let fileSystem: IFileSystem;\n  let testDataPath: string;\n  let storeService: StoreService;\n\n  beforeEach(() => {\n    logger = new Logger('test-store');\n    fileSystem = new FileSystemService();\n    testDataPath = path.join(os.tmpdir(), `anglesite-test-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`);\n\n    // Create store service with test path\n    storeService = createStoreService(logger, fileSystem, undefined, testDataPath) as StoreService;\n  });\n\n  afterEach(async () => {\n    if (storeService) {\n      await storeService.dispose();\n    }\n\n    // Clean up test directory\n    try {\n      const testSettingsFile = path.join(testDataPath, 'settings.json');\n      if (await fileSystem.exists(testSettingsFile)) {\n        await fileSystem.rmdir(testDataPath, { recursive: true });\n      }\n    } catch {\n      // Ignore cleanup errors\n    }\n  });\n\n  describe('Service Creation', () => {\n    it('should create store service with factory function', () => {\n      expect(storeService).toBeDefined();\n      expect(typeof storeService.get).toBe('function');\n      expect(typeof storeService.set).toBe('function');\n      expect(typeof storeService.dispose).toBe('function');\n    });\n\n    it('should create store service with default settings', () => {\n      const settings = storeService.getAll();\n      expect(settings).toEqual({\n        autoDnsEnabled: false,\n        httpsMode: null,\n        firstLaunchCompleted: false,\n        theme: 'system',\n        openWebsiteWindows: [],\n        recentWebsites: [],\n      });\n    });\n\n    it('should create store with static factory method', () => {\n      const store = StoreService.create(logger, fileSystem, undefined, testDataPath);\n      expect(store).toBeInstanceOf(StoreService);\n      expect(store.get('theme')).toBe('system');\n    });\n  });\n\n  describe('Settings Management', () => {\n    it('should get and set individual settings', () => {\n      expect(storeService.get('theme')).toBe('system');\n\n      storeService.set('theme', 'dark');\n      expect(storeService.get('theme')).toBe('dark');\n\n      storeService.set('autoDnsEnabled', true);\n      expect(storeService.get('autoDnsEnabled')).toBe(true);\n    });\n\n    it('should set and get all settings', () => {\n      const newSettings: Partial<AppSettings> = {\n        theme: 'light',\n        autoDnsEnabled: true,\n        firstLaunchCompleted: true,\n      };\n\n      storeService.setAll(newSettings);\n\n      expect(storeService.get('theme')).toBe('light');\n      expect(storeService.get('autoDnsEnabled')).toBe(true);\n      expect(storeService.get('firstLaunchCompleted')).toBe(true);\n      // Other settings should remain unchanged\n      expect(storeService.get('httpsMode')).toBe(null);\n    });\n\n    it('should return a copy of all settings to prevent mutations', () => {\n      const settings1 = storeService.getAll();\n      const settings2 = storeService.getAll();\n\n      settings1.theme = 'light';\n      expect(settings2.theme).toBe('system'); // Should not be affected\n      expect(storeService.get('theme')).toBe('system'); // Original should not be affected\n    });\n  });\n\n  describe('Settings Validation', () => {\n    it('should validate boolean settings', () => {\n      expect(() => storeService.set('autoDnsEnabled', 'invalid' as unknown as boolean)).toThrow(\n        \"Invalid value for setting 'autoDnsEnabled': autoDnsEnabled must be a boolean\"\n      );\n\n      expect(() => storeService.set('firstLaunchCompleted', 42 as unknown as boolean)).toThrow(\n        \"Invalid value for setting 'firstLaunchCompleted': firstLaunchCompleted must be a boolean\"\n      );\n    });\n\n    it('should validate httpsMode setting', () => {\n      // Valid values\n      storeService.set('httpsMode', 'https');\n      expect(storeService.get('httpsMode')).toBe('https');\n\n      storeService.set('httpsMode', 'http');\n      expect(storeService.get('httpsMode')).toBe('http');\n\n      storeService.set('httpsMode', null);\n      expect(storeService.get('httpsMode')).toBe(null);\n\n      // Invalid value\n      expect(() => storeService.set('httpsMode', 'invalid' as unknown as null)).toThrow(\n        'Invalid value for setting \\'httpsMode\\': httpsMode must be null, \"https\", or \"http\"'\n      );\n    });\n\n    it('should validate theme setting', () => {\n      // Valid values\n      ['system', 'light', 'dark'].forEach((theme) => {\n        storeService.set('theme', theme as 'system' | 'light' | 'dark');\n        expect(storeService.get('theme')).toBe(theme);\n      });\n\n      // Invalid value\n      expect(() => storeService.set('theme', 'invalid' as unknown as 'system')).toThrow(\n        'Invalid value for setting \\'theme\\': theme must be \"system\", \"light\", or \"dark\"'\n      );\n    });\n\n    it('should validate window states array', () => {\n      const validWindowState: WindowState = {\n        websiteName: 'test-site',\n        bounds: { x: 100, y: 100, width: 800, height: 600 },\n      };\n\n      storeService.set('openWebsiteWindows', [validWindowState]);\n      expect(storeService.get('openWebsiteWindows')).toEqual([validWindowState]);\n\n      // Invalid - not an array\n      expect(() => storeService.set('openWebsiteWindows', 'invalid' as unknown as WindowState[])).toThrow(\n        \"Invalid value for setting 'openWebsiteWindows': openWebsiteWindows must be an array\"\n      );\n\n      // Invalid - missing websiteName\n      expect(() =>\n        storeService.set('openWebsiteWindows', [\n          { bounds: { x: 0, y: 0, width: 100, height: 100 } },\n        ] as unknown as WindowState[])\n      ).toThrow(\"Invalid value for setting 'openWebsiteWindows': Each window state must have a valid websiteName\");\n    });\n\n    it('should validate recent websites array', () => {\n      const validWebsites = ['site1', 'site2', 'site3'];\n      storeService.set('recentWebsites', validWebsites);\n      expect(storeService.get('recentWebsites')).toEqual(validWebsites);\n\n      // Invalid - not an array\n      expect(() => storeService.set('recentWebsites', 'invalid' as unknown as string[])).toThrow(\n        \"Invalid value for setting 'recentWebsites': recentWebsites must be an array\"\n      );\n\n      // Invalid - empty string\n      expect(() => storeService.set('recentWebsites', ['site1', '', 'site3'])).toThrow(\n        \"Invalid value for setting 'recentWebsites': All recent websites must be non-empty strings\"\n      );\n\n      // Invalid - too many entries\n      const tooManyWebsites = Array.from({ length: 11 }, (_, i) => `site${i}`);\n      expect(() => storeService.set('recentWebsites', tooManyWebsites)).toThrow(\n        \"Invalid value for setting 'recentWebsites': recentWebsites cannot exceed 10 entries\"\n      );\n    });\n\n    it('should validate multiple settings atomically', () => {\n      const invalidSettings = {\n        theme: 'invalid' as unknown as 'system',\n        autoDnsEnabled: 'not-boolean' as unknown as boolean,\n      };\n\n      expect(() => storeService.setAll(invalidSettings)).toThrow(\n        'Invalid settings provided: theme must be \"system\", \"light\", or \"dark\", autoDnsEnabled must be a boolean'\n      );\n\n      // Original values should be unchanged\n      expect(storeService.get('theme')).toBe('system');\n      expect(storeService.get('autoDnsEnabled')).toBe(false);\n    });\n  });\n\n  describe('Window State Management', () => {\n    it('should save and get window states', () => {\n      const windowStates: WindowState[] = [\n        {\n          websiteName: 'site1',\n          bounds: { x: 100, y: 100, width: 800, height: 600 },\n          isMaximized: false,\n        },\n        {\n          websiteName: 'site2',\n          bounds: { x: 200, y: 200, width: 1000, height: 800 },\n          isMaximized: true,\n        },\n      ];\n\n      storeService.saveWindowStates(windowStates);\n      const retrieved = storeService.getWindowStates();\n\n      expect(retrieved).toEqual(windowStates);\n    });\n\n    it('should clear window states', () => {\n      const windowStates: WindowState[] = [{ websiteName: 'site1', bounds: { x: 0, y: 0, width: 800, height: 600 } }];\n\n      storeService.saveWindowStates(windowStates);\n      expect(storeService.getWindowStates()).toEqual(windowStates);\n\n      storeService.clearWindowStates();\n      expect(storeService.getWindowStates()).toEqual([]);\n    });\n  });\n\n  describe('Recent Websites Management', () => {\n    it('should add recent websites', () => {\n      storeService.addRecentWebsite('site1');\n      storeService.addRecentWebsite('site2');\n\n      expect(storeService.getRecentWebsites()).toEqual(['site2', 'site1']);\n    });\n\n    it('should move existing website to top when added again', () => {\n      storeService.addRecentWebsite('site1');\n      storeService.addRecentWebsite('site2');\n      storeService.addRecentWebsite('site3');\n      storeService.addRecentWebsite('site1'); // Move to top\n\n      expect(storeService.getRecentWebsites()).toEqual(['site1', 'site3', 'site2']);\n    });\n\n    it('should limit recent websites to 10', () => {\n      // Add 12 websites\n      for (let i = 1; i <= 12; i++) {\n        storeService.addRecentWebsite(`site${i}`);\n      }\n\n      const recent = storeService.getRecentWebsites();\n      expect(recent).toHaveLength(10);\n      expect(recent[0]).toBe('site12'); // Most recent\n      expect(recent[9]).toBe('site3'); // 10th most recent\n    });\n\n    it('should remove specific recent website', () => {\n      storeService.addRecentWebsite('site1');\n      storeService.addRecentWebsite('site2');\n      storeService.addRecentWebsite('site3');\n\n      storeService.removeRecentWebsite('site2');\n      expect(storeService.getRecentWebsites()).toEqual(['site3', 'site1']);\n    });\n\n    it('should clear all recent websites', () => {\n      storeService.addRecentWebsite('site1');\n      storeService.addRecentWebsite('site2');\n\n      storeService.clearRecentWebsites();\n      expect(storeService.getRecentWebsites()).toEqual([]);\n    });\n\n    it('should handle removing non-existent website gracefully', () => {\n      storeService.addRecentWebsite('site1');\n\n      // This should not throw or affect existing websites\n      storeService.removeRecentWebsite('non-existent');\n      expect(storeService.getRecentWebsites()).toEqual(['site1']);\n    });\n  });\n\n  describe('Persistence and Lifecycle', () => {\n    it('should implement IStore interface correctly', () => {\n      // Type check - this will fail compilation if interface is not implemented\n      const store: import('../../../app/core/interfaces').IStore = storeService;\n      expect(store).toBeDefined();\n    });\n\n    it('should dispose cleanly', async () => {\n      storeService.set('theme', 'dark');\n\n      await expect(storeService.dispose()).resolves.toBeUndefined();\n\n      // Should still be able to read values after dispose\n      expect(storeService.get('theme')).toBe('dark');\n    });\n\n    it('should force save settings', async () => {\n      storeService.set('theme', 'light');\n\n      await expect(storeService.forceSave()).resolves.toBeUndefined();\n    });\n\n    it('should rollback changes on set error', () => {\n      const originalTheme = storeService.get('theme');\n\n      // Mock console methods to avoid spam during testing\n      const originalError = console.error;\n      console.error = jest.fn();\n\n      try {\n        expect(() => storeService.set('theme', 'invalid' as unknown as 'system')).toThrow();\n        expect(storeService.get('theme')).toBe(originalTheme); // Should be rolled back\n      } finally {\n        console.error = originalError;\n      }\n    });\n\n    it('should rollback changes on setAll error', () => {\n      storeService.set('theme', 'dark');\n      storeService.set('autoDnsEnabled', true);\n\n      const originalSettings = storeService.getAll();\n\n      // Mock console methods\n      const originalError = console.error;\n      console.error = jest.fn();\n\n      try {\n        expect(() =>\n          storeService.setAll({\n            theme: 'invalid' as unknown as 'system',\n            httpsMode: 'https',\n          })\n        ).toThrow();\n\n        // All settings should be rolled back to original values\n        expect(storeService.getAll()).toEqual(originalSettings);\n      } finally {\n        console.error = originalError;\n      }\n    });\n  });\n\n  describe('Logging Integration', () => {\n    it('should log setting changes', () => {\n      const mockLogger = {\n        debug: jest.fn(),\n        info: jest.fn(),\n        warn: jest.fn(),\n        error: jest.fn(),\n        child: jest.fn().mockReturnThis(),\n      } as unknown as ILogger;\n\n      const storeWithMockLogger = createStoreService(mockLogger, fileSystem, undefined, testDataPath) as StoreService;\n\n      storeWithMockLogger.set('theme', 'dark');\n\n      expect(mockLogger.debug).toHaveBeenCalledWith('Setting theme', { newValue: 'dark' });\n    });\n\n    it('should log validation errors', () => {\n      const mockLogger = {\n        debug: jest.fn(),\n        info: jest.fn(),\n        warn: jest.fn(),\n        error: jest.fn(),\n        child: jest.fn().mockReturnThis(),\n      } as unknown as ILogger;\n\n      const storeWithMockLogger = createStoreService(mockLogger, fileSystem, undefined, testDataPath) as StoreService;\n\n      try {\n        storeWithMockLogger.set('theme', 'invalid' as unknown as 'system');\n      } catch {\n        // Expected to throw\n      }\n\n      expect(mockLogger.error).toHaveBeenCalledWith('Setting validation failed', expect.any(Error), {\n        key: 'theme',\n        value: 'invalid',\n      });\n    });\n  });\n});\n"],"version":3}