{"version":3,"names":["exports","startWebsiteServer","cov_1b6ieip1r1","s","stopWebsiteServer","path","__importStar","require","fs","eleventy_url_resolver_1","logging_1","eleventy_1","__importDefault","eleventy_dev_server_1","sendLogToWindow","websiteName","message","level","b","f","multiWindowManager","Promise","resolve","then","sendLogToWebsite","logger","debug","error","sanitize","inputDir","port","originalConsoleLog","console","log","originalConsoleError","originalConsoleWarn","warn","restoreConsole","outputDir","join","existsSync","mkdirSync","recursive","args","includes","eleventyOptions","quietMode","srcPath","errorMsg","Error","eleventy","srcAbsolutePath","eleventyOptionsWithConfig","config","eleventyConfig","anglesiteEleventy","default","EleventyWebcPlugin","setFreezeReservedData","addPlugin","components","addGlobalData","generator","process","env","ELEVENTY_VERSION","templateFormats","markdownTemplateEngine","htmlTemplateEngine","dir","input","output","layouts","write","buildError","sanitizedError","originalError","sanitizedOriginal","sanitizedOriginalMessage","cause","sanitizedCause","actualServerUrl","devServer","liveReload","domDiff","showVersion","watch","ignore","msg","serverUrlMatch","match","info","watchPattern","buildDir","watchFiles","watcher","on","changedPath","startsWith","serve","setTimeout","finalServerUrl","actualPort","parseInt","split","urlResolver","EleventyUrlResolver","initialize","actualUrl","server","close","watcherError","closeError","rmSync","force","cleanupError","directory"],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/server/per-website-server.ts"],"sourcesContent":["/**\n * @file Per-website Eleventy server management using programmatic API.\n */\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { EleventyUrlResolver } from './eleventy-url-resolver';\nimport { logger, sanitize } from '../utils/logging';\nimport Eleventy from '@11ty/eleventy';\nimport EleventyDevServer from '@11ty/eleventy-dev-server';\n\n/**\n * Send log message to website window.\n */\nasync function sendLogToWindow(websiteName: string, message: string, level: string = 'info') {\n  try {\n    // Import dynamically to avoid circular dependencies\n    const multiWindowManager = await import('../ui/multi-window-manager');\n\n    // Use the exported function instead of accessing the map directly\n    if (typeof multiWindowManager.sendLogToWebsite === 'function') {\n      multiWindowManager.sendLogToWebsite(websiteName, message, level);\n    } else {\n      logger.debug(`sendLogToWebsite function not available for ${websiteName}`);\n    }\n  } catch (error) {\n    // Silently fail if window is not available\n    logger.debug(`Could not send log to window for ${websiteName}`, {\n      error: sanitize.error(error),\n    });\n  }\n}\n\n/**\n * Server instance for a single website using programmatic API.\n */\nexport interface WebsiteServer {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  eleventy: any;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  devServer: any;\n  inputDir: string;\n  outputDir: string;\n  port: number;\n  actualUrl?: string;\n  urlResolver: EleventyUrlResolver;\n  restoreConsole?: () => void;\n}\n\n/**\n * Start an Eleventy server for a specific website using programmatic API.\n */\nexport async function startWebsiteServer(inputDir: string, websiteName: string, port: number): Promise<WebsiteServer> {\n  sendLogToWindow(websiteName, `🚀 Starting Eleventy server for ${websiteName}`, 'startup');\n  sendLogToWindow(websiteName, `📁 Input directory: ${sanitize.path(inputDir)}`, 'debug');\n\n  // Capture console output during Eleventy operations\n  const originalConsoleLog = console.log;\n  const originalConsoleError = console.error;\n  const originalConsoleWarn = console.warn;\n\n  // Function to restore original console methods\n  const restoreConsole = () => {\n    console.log = originalConsoleLog;\n    console.error = originalConsoleError;\n    console.warn = originalConsoleWarn;\n  };\n\n  try {\n    // Set up output directory for this website - use _site within the website directory\n    const outputDir = path.join(inputDir, '_site');\n\n    sendLogToWindow(websiteName, `📂 Setting up build directory…`, 'info');\n    sendLogToWindow(websiteName, `📍 Output: ${outputDir}`, 'debug');\n\n    // Ensure output directory exists\n    if (!fs.existsSync(outputDir)) {\n      fs.mkdirSync(outputDir, { recursive: true });\n      sendLogToWindow(websiteName, `✅ Created output directory`, 'info');\n    }\n\n    sendLogToWindow(websiteName, `⚙️ Loading Eleventy configuration…`, 'info');\n\n    // Override console methods to capture Eleventy output\n    console.log = (...args: unknown[]) => {\n      const message = args.join(' ');\n      // Check if this is an Eleventy log message\n      if (message.includes('[11ty]') || message.includes('Eleventy') || message.includes('eleventy')) {\n        sendLogToWindow(websiteName, message, 'info');\n      }\n      // Always call original console.log for debugging\n      originalConsoleLog(...args);\n    };\n\n    console.error = (...args: unknown[]) => {\n      const message = args.join(' ');\n      // Check if this is an Eleventy error message\n      if (message.includes('[11ty]') || message.includes('Eleventy') || message.includes('eleventy')) {\n        sendLogToWindow(websiteName, message, 'error');\n      }\n      // Always call original console.error for debugging\n      originalConsoleError(...args);\n    };\n\n    console.warn = (...args: unknown[]) => {\n      const message = args.join(' ');\n      // Check if this is an Eleventy warning message\n      if (message.includes('[11ty]') || message.includes('Eleventy') || message.includes('eleventy')) {\n        sendLogToWindow(websiteName, message, 'warning');\n      }\n      // Always call original console.warn for debugging\n      originalConsoleWarn(...args);\n    };\n\n    // Create Eleventy instance with programmatic API\n    // Don't try to load the config here - let Eleventy handle it internally\n    // This allows Eleventy to properly resolve modules from the website's node_modules\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const eleventyOptions: any = {\n      quietMode: false,\n    };\n\n    // Use programmatic configuration instead of config file to avoid path resolution issues\n    sendLogToWindow(websiteName, `📋 Using programmatic configuration (ignoring .eleventy.js)`, 'debug');\n\n    sendLogToWindow(websiteName, `📂 Input: ${inputDir}/src, Output: ${outputDir}`, 'debug');\n\n    // Verify src directory exists before starting Eleventy\n    const srcPath = path.join(inputDir, 'src');\n    if (!fs.existsSync(srcPath)) {\n      const errorMsg = `Source directory does not exist: ${srcPath}`;\n      sendLogToWindow(websiteName, `❌ ${errorMsg}`, 'error');\n      throw new Error(errorMsg);\n    }\n    sendLogToWindow(websiteName, `✅ Source directory verified: ${srcPath}`, 'debug');\n\n    // Create Eleventy instance\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let eleventy: any;\n\n    // Create Eleventy instance with absolute paths and programmatic configuration\n    const srcAbsolutePath = path.join(inputDir, 'src');\n    sendLogToWindow(websiteName, `🔧 Using absolute input path: ${srcAbsolutePath}`, 'debug');\n    sendLogToWindow(websiteName, `🔧 Using absolute output path: ${outputDir}`, 'debug');\n\n    // Add configuration callback to options (proper Eleventy API)\n    const eleventyOptionsWithConfig = {\n      ...eleventyOptions,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      config: function (eleventyConfig: any) {\n        // Import and add the anglesite-11ty plugin\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const anglesiteEleventy = require('@dwk/anglesite-11ty').default;\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const EleventyWebcPlugin = require('@11ty/eleventy-plugin-webc');\n\n        // FIXME: Workaround for eleventy-plugin-webc issue\n        eleventyConfig.setFreezeReservedData(false);\n\n        // Add anglesite-11ty plugin\n        eleventyConfig.addPlugin(anglesiteEleventy);\n\n        // Add WebC plugin with components path relative to the src directory\n        eleventyConfig.addPlugin(EleventyWebcPlugin, {\n          components: '_includes/**/*.webc', // This will be relative to srcAbsolutePath\n        });\n\n        // Add global data\n        eleventyConfig.addGlobalData('eleventy', () => ({\n          generator: process.env.ELEVENTY_VERSION ? `Eleventy v${process.env.ELEVENTY_VERSION}` : 'Eleventy',\n        }));\n\n        // Return directory configuration (these paths are relative to the input directory)\n        return {\n          templateFormats: ['11ty.js', 'webc', 'md', 'html'],\n          markdownTemplateEngine: 'webc',\n          htmlTemplateEngine: 'webc',\n          dir: {\n            // All paths are relative to srcAbsolutePath since that's our input\n            input: '.', // Current directory (srcAbsolutePath)\n            output: '../_site', // Relative to srcAbsolutePath, points to outputDir\n            includes: '_includes',\n            layouts: '_includes',\n          },\n        };\n      },\n    };\n\n    eleventy = new Eleventy(srcAbsolutePath, outputDir, eleventyOptionsWithConfig);\n\n    try {\n      // Initial build\n      sendLogToWindow(websiteName, `🔨 Building website files…`, 'info');\n\n      try {\n        await eleventy.write();\n        sendLogToWindow(websiteName, `✅ Build completed successfully`, 'info');\n      } catch (buildError) {\n        const sanitizedError = sanitize.error(buildError);\n        logger.error(`Build failed for ${websiteName}`, {\n          error: sanitizedError,\n          websiteName,\n        });\n\n        if (buildError instanceof Error) {\n          // Send sanitized error to window\n          sendLogToWindow(websiteName, `❌ Build failed: ${sanitize.error(buildError.message)}`, 'error');\n\n          // Check for nested error details in Eleventy errors\n          if ('originalError' in buildError && buildError.originalError) {\n            const sanitizedOriginal = sanitize.error(buildError.originalError);\n            logger.error(`Original build error for ${websiteName}`, {\n              originalError: sanitizedOriginal,\n            });\n            sendLogToWindow(websiteName, `📋 Original error: ${sanitizedOriginal}`, 'error');\n\n            if (buildError.originalError instanceof Error) {\n              const sanitizedOriginalMessage = sanitize.error(buildError.originalError.message);\n              sendLogToWindow(websiteName, `🔍 Detailed error: ${sanitizedOriginalMessage}`, 'error');\n            }\n          }\n\n          // Check for cause property (modern error chaining)\n          if ('cause' in buildError && buildError.cause) {\n            const sanitizedCause = sanitize.error(buildError.cause);\n            logger.error(`Build error cause for ${websiteName}`, {\n              cause: sanitizedCause,\n            });\n            sendLogToWindow(websiteName, `⚡ Error cause: ${sanitizedCause}`, 'error');\n          }\n        } else {\n          sendLogToWindow(websiteName, `❌ Build failed: ${sanitizedError}`, 'error');\n        }\n        throw buildError;\n      }\n\n      // Track the actual server URL\n      let actualServerUrl = '';\n\n      // Create dev server instance\n      const devServer = new EleventyDevServer(websiteName, outputDir, {\n        port: port,\n        liveReload: true,\n        domDiff: true,\n        showVersion: false,\n        watch: [inputDir + '/**/*'],\n        ignore: [path.join(inputDir, '_site') + '/**/*'],\n        logger: {\n          log: (msg: string) => {\n            console.log(`[${websiteName}] ${msg}`);\n            // Capture actual server URL from logs\n            const serverUrlMatch = msg.match(/Server at (http:\\/\\/localhost:\\d+)\\/?/);\n            if (serverUrlMatch) {\n              actualServerUrl = serverUrlMatch[1]; // Already clean, no trailing slash needed\n            }\n            sendLogToWindow(websiteName, msg, 'info');\n          },\n          info: (msg: string) => {\n            console.log(`[${websiteName}] ${msg}`);\n            // Also check info messages for server URL\n            const serverUrlMatch = msg.match(/Server at (http:\\/\\/localhost:\\d+)\\/?/);\n            if (serverUrlMatch) {\n              actualServerUrl = serverUrlMatch[1];\n            }\n            sendLogToWindow(websiteName, msg, 'info');\n          },\n          error: (msg: string) => {\n            console.error(`[${websiteName}] ${msg}`);\n            sendLogToWindow(websiteName, msg, 'error');\n          },\n        },\n      });\n\n      // Set up file watching for rebuilds - exclude the build directory\n      const watchPattern = inputDir + '/**/*';\n      const buildDir = path.join(inputDir, '_site');\n      devServer.watchFiles([watchPattern]);\n\n      // Override the default file change handler to trigger Eleventy rebuilds\n      if (devServer.watcher) {\n        devServer.watcher.on('change', async (changedPath: string) => {\n          // Skip if the changed file is in the build directory (prevent recursive builds)\n          if (changedPath.startsWith(buildDir)) {\n            sendLogToWindow(websiteName, `🔄 Skipping build directory change: ${changedPath}`, 'debug');\n            return;\n          }\n\n          sendLogToWindow(websiteName, `📝 File changed: ${changedPath}`, 'info');\n          sendLogToWindow(websiteName, `🔄 Rebuilding website…`, 'info');\n          try {\n            await eleventy.write();\n            sendLogToWindow(websiteName, `✅ Rebuild completed successfully`, 'info');\n          } catch (error) {\n            const sanitizedError = sanitize.error(error);\n            logger.error(`Rebuild failed for ${websiteName}`, {\n              error: sanitizedError,\n              websiteName,\n            });\n            sendLogToWindow(websiteName, `❌ Rebuild failed: ${sanitizedError}`, 'error');\n          }\n        });\n      }\n\n      // Start the dev server\n      sendLogToWindow(websiteName, `🌐 Starting development server on port ${port}…`, 'info');\n\n      devServer.serve(port);\n\n      // Wait a moment for the server URL to be captured from logs\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n\n      // Use captured URL if available, otherwise fall back to expected port\n      const finalServerUrl = actualServerUrl || `http://localhost:${port}`;\n      const actualPort = actualServerUrl ? parseInt(actualServerUrl.split(':')[2]) : port;\n\n      sendLogToWindow(websiteName, `🎉 Server ready at ${finalServerUrl}`, 'info');\n      sendLogToWindow(websiteName, `👀 Watching for file changes…`, 'info');\n\n      // Initialize URL resolver for file-to-URL mapping\n      sendLogToWindow(websiteName, `🗺️ Setting up file-to-URL mapping…`, 'info');\n      const urlResolver = new EleventyUrlResolver(path.join(inputDir, 'src'));\n      await urlResolver.initialize();\n      sendLogToWindow(websiteName, `✅ URL resolver ready`, 'info');\n\n      return {\n        eleventy,\n        devServer,\n        inputDir: path.join(inputDir, 'src'),\n        outputDir,\n        port: actualPort,\n        actualUrl: finalServerUrl,\n        urlResolver,\n        restoreConsole,\n      };\n    } finally {\n      // No need to restore working directory since we're using absolute paths\n    }\n  } catch (error) {\n    // Restore console methods in case of error\n    restoreConsole();\n    const sanitizedError = sanitize.error(error);\n    logger.error(`Failed to start server for ${websiteName}`, {\n      error: sanitizedError,\n      websiteName,\n    });\n    sendLogToWindow(websiteName, `❌ Failed to start server: ${sanitizedError}`, 'error');\n    throw error;\n  }\n}\n\n/**\n * Stop a website server.\n */\nexport async function stopWebsiteServer(server: WebsiteServer): Promise<void> {\n  try {\n    // Restore original console methods if available\n    if (server.restoreConsole) {\n      server.restoreConsole();\n    }\n\n    // Stop the file watcher first to prevent fsevents crashes\n    if (server.devServer && server.devServer.watcher) {\n      try {\n        await server.devServer.watcher.close();\n      } catch (watcherError) {\n        logger.error(`Error closing file watcher for port ${server.port}`, {\n          error: sanitize.error(watcherError),\n          port: server.port,\n        });\n      }\n    }\n\n    // Stop the dev server\n    if (server.devServer && typeof server.devServer.close === 'function') {\n      try {\n        await server.devServer.close();\n      } catch (closeError) {\n        logger.error(`Error closing dev server for port ${server.port}`, {\n          error: sanitize.error(closeError),\n          port: server.port,\n        });\n      }\n    }\n\n    // Clean up temporary output directory\n    if (fs.existsSync(server.outputDir)) {\n      try {\n        fs.rmSync(server.outputDir, { recursive: true, force: true });\n      } catch (cleanupError) {\n        logger.error(`Failed to clean up directory`, {\n          error: sanitize.error(cleanupError),\n          directory: sanitize.path(server.outputDir),\n        });\n      }\n    }\n  } catch (error) {\n    logger.error(`Error stopping server for port ${server.port}`, {\n      error: sanitize.error(error),\n      port: server.port,\n    });\n  }\n}\n"],"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","ignoreList":[]}