{"version":3,"names":["exports","sendLogToWebsite","cov_j2km8f3ax","s","showNativeLoadingView","hideNativeLoadingView","showNativeLoadingError","setupServerManagerEventListeners","findAvailablePort","createWebsiteWindow","startWebsiteServerAndUpdateWindow","loadWebsiteContent","getWebsiteWindow","getAllWebsiteWindows","getWebsiteServer","getAllWebsiteServers","saveWindowStates","restoreWindowStates","closeAllWindows","createStartScreen","closeStartScreen","getStartScreen","showStartScreenIfNeeded","addWebsiteEditorWindow","removeWebsiteEditorWindow","togglePreviewDevTools","isWebsiteEditorFocused","getCurrentWebsiteEditorProject","showWebsitePreview","hideWebsitePreview","getHelpWindow","createHelpWindow","electron_1","require","path","__importStar","fs","eleventy_1","service_registry_1","container_1","websiteWindows","Map","eventListenersSetup","helpWindow","startScreenWindow","websiteName","message","level","b","f","websiteWindow","get","window","isDestroyed","logData","type","timestamp","Date","toISOString","loadingView","webContents","executeJavaScript","JSON","stringify","webContentsView","error","console","createLoadingView","WebContentsView","webPreferences","nodeIntegration","contextIsolation","preload","join","__dirname","loadingDataUrl","template_loader_1","loadTemplateAsDataUrl","loadURL","bounds","getBounds","leftPanelWidth","rightPanelWidth","toolbarHeight","setBounds","x","y","width","height","contentView","addChildView","setVisible","menu_1","theme_manager_1","website_manager_1","appContext","getGlobalContext","websiteServerManager","getService","ServiceKeys","WEBSITE_SERVER_MANAGER","on","managedServer","server","eleventyPort","port","serverUrl","actualUrl","warn","startPort","Promise","resolve","reject","createServer","listen","address","close","Error","err","code","nextPort","nextErr","websitePath","existingWindow","focus","BrowserWindow","title","show","titleBarStyle","tabbingIdentifier","event","preventDefault","websiteEditorFileUrl","getTemplateFilePath","process","env","NODE_ENV","_event","params","contextMenu","Menu","append","MenuItem","label","accelerator","click","inspectElement","popup","details","setTimeout","reload","errorCode","errorDescription","validatedURL","viewBounds","webContentsViewBounds","set","setLiveServerUrl","setCurrentWebsiteName","updateApplicationMenu","stopServer","delete","size","once","themeManager","applyThemeToWindow","serverInfo","startServer","getServer","url","send","name","String","undefined","result","allServers","getAllServers","entries","store","STORE","windowStates","forEach","isMaximized","windowState","windowType","isEditorWindow","push","getWindowStates","length","validWindowStates","getWebsitePath","existsSync","log","restoreWebsiteWindow","maximize","openReactWebsiteEditorWindow","then","serverError","stopAllServers","clear","minWidth","minHeight","trafficLightPosition","startScreenDataUrl","focusedWindow","getFocusedWindow","Array","from","isDevToolsOpened","closeDevTools","openDevTools","mode","setTitle"],"sources":["/Users/dwk/Developer/gitlab.com/davidwkeith/@dwk/anglesite/app/ui/multi-window-manager.ts"],"sourcesContent":["/**\n * @file Multi-window management for website windows and help window.\n */\nimport { BrowserWindow, WebContentsView, Menu, MenuItem } from 'electron';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { setLiveServerUrl, setCurrentWebsiteName } from '../server/eleventy';\nimport { WebsiteServer } from '../server/per-website-server';\nimport { IWebsiteServerManager, ManagedServer } from '../core/interfaces';\nimport { getGlobalContext } from '../core/service-registry';\nimport { ServiceKeys } from '../core/container';\n\n// Type definition for website window\ninterface WebsiteWindow {\n  window: BrowserWindow;\n  webContentsView: WebContentsView;\n  websiteName: string;\n  websitePath?: string;\n  serverUrl?: string; // Store the server URL for this website\n  eleventyPort?: number; // HTTP port for Eleventy dev server\n  httpsProxyPort?: number; // HTTPS proxy port (if using HTTPS mode)\n  server?: WebsiteServer; // Reference to the website's individual server\n  loadingView?: WebContentsView; // Native loading overlay view\n  managedServer?: ManagedServer; // Reference to the managed server info\n  isEditorWindow?: boolean; // Whether this is an editor window (true) or preview window (false/undefined)\n}\n\nconst websiteWindows: Map<string, WebsiteWindow> = new Map();\n\n// Set up server manager event listeners for logging (DI-compatible)\nlet eventListenersSetup = false;\n\n// Help window instance\nlet helpWindow: BrowserWindow | null = null;\n\n// Start screen window instance\nlet startScreenWindow: BrowserWindow | null = null;\n\n// Re-export for use in other modules (deprecated, use WebsiteServerManager instead)\n// Note: This export is kept for backward compatibility but should be migrated\n\n/**\n * Send log message to a website window.\n */\nexport function sendLogToWebsite(websiteName: string, message: string, level: string = 'info') {\n  const websiteWindow = websiteWindows.get(websiteName);\n  if (websiteWindow && !websiteWindow.window.isDestroyed()) {\n    try {\n      const logData = {\n        type: 'log',\n        message,\n        level,\n        timestamp: new Date().toISOString(),\n      };\n\n      // Send to loading view if it exists and is visible\n      if (websiteWindow.loadingView && !websiteWindow.loadingView.webContents.isDestroyed()) {\n        websiteWindow.loadingView.webContents.executeJavaScript(`window.postMessage(${JSON.stringify(logData)}, '*');`);\n      }\n\n      // Also send to main preview view for backwards compatibility\n      websiteWindow.webContentsView.webContents.executeJavaScript(\n        `window.postMessage(${JSON.stringify(logData)}, '*');`\n      );\n    } catch (error) {\n      console.error(`Could not send log to ${websiteName}:`, error);\n    }\n  }\n}\n\n/**\n * Create and show native loading view overlay.\n */\nfunction createLoadingView(websiteWindow: WebsiteWindow): WebContentsView {\n  const loadingView = new WebContentsView({\n    webPreferences: {\n      nodeIntegration: false,\n      contextIsolation: true,\n      preload: path.join(__dirname, '..', 'preload.js'),\n    },\n  });\n\n  // Load the native loading template\n  const loadingDataUrl = loadTemplateAsDataUrl('native-loading-view');\n  loadingView.webContents.loadURL(loadingDataUrl);\n\n  // Position the loading view to cover the preview area\n  const bounds = websiteWindow.window.getBounds();\n  const leftPanelWidth = 240;\n  const rightPanelWidth = 280;\n  const toolbarHeight = 48;\n\n  loadingView.setBounds({\n    x: leftPanelWidth,\n    y: toolbarHeight,\n    width: bounds.width - leftPanelWidth - rightPanelWidth,\n    height: bounds.height - toolbarHeight,\n  });\n\n  // Add the loading view on top of the preview\n  websiteWindow.window.contentView.addChildView(loadingView);\n\n  return loadingView;\n}\n\n/**\n * Show native loading view for a website.\n */\nexport function showNativeLoadingView(websiteName: string): void {\n  const websiteWindow = websiteWindows.get(websiteName);\n  if (!websiteWindow || websiteWindow.window.isDestroyed()) {\n    console.error(`Website window not found: ${websiteName}`);\n    return;\n  }\n\n  // Create loading view if it doesn't exist\n  if (!websiteWindow.loadingView) {\n    websiteWindow.loadingView = createLoadingView(websiteWindow);\n  }\n\n  // Make sure loading view is visible and on top\n  websiteWindow.loadingView.setVisible(true);\n}\n\n/**\n * Hide native loading view and show website preview.\n */\nexport function hideNativeLoadingView(websiteName: string): void {\n  const websiteWindow = websiteWindows.get(websiteName);\n  if (!websiteWindow || websiteWindow.window.isDestroyed()) {\n    console.error(`Website window not found: ${websiteName}`);\n    return;\n  }\n\n  if (websiteWindow.loadingView) {\n    websiteWindow.loadingView.setVisible(false);\n  }\n}\n\n/**\n * Show error state in native loading view.\n */\nexport function showNativeLoadingError(websiteName: string): void {\n  const websiteWindow = websiteWindows.get(websiteName);\n  if (websiteWindow && websiteWindow.loadingView && !websiteWindow.loadingView.webContents.isDestroyed()) {\n    try {\n      websiteWindow.loadingView.webContents.executeJavaScript(`window.postMessage({ type: 'showError' }, '*');`);\n    } catch (error) {\n      console.error(`Could not show error in loading view for ${websiteName}:`, error);\n    }\n  }\n}\nimport { updateApplicationMenu } from './menu';\nimport { themeManager } from './theme-manager';\nimport { WindowState } from '../core/types';\nimport { IStore } from '../core/interfaces';\nimport { loadTemplateAsDataUrl, getTemplateFilePath } from './template-loader';\nimport { getWebsitePath } from '../utils/website-manager';\n\n// Variables declared at top of file\nexport function setupServerManagerEventListeners(): void {\n  if (eventListenersSetup) return; // Prevent duplicate setup\n\n  try {\n    const appContext = getGlobalContext();\n    const websiteServerManager = appContext.getService<IWebsiteServerManager>(ServiceKeys.WEBSITE_SERVER_MANAGER);\n\n    websiteServerManager.on('server-log', (websiteName: string, message: string, level: string) => {\n      sendLogToWebsite(websiteName, message, level);\n    });\n\n    websiteServerManager.on('server-started', (websiteName: string, managedServer: ManagedServer) => {\n      const websiteWindow = websiteWindows.get(websiteName);\n      if (websiteWindow) {\n        websiteWindow.managedServer = managedServer;\n        websiteWindow.server = managedServer.server;\n        websiteWindow.eleventyPort = managedServer.port;\n        websiteWindow.serverUrl = managedServer.actualUrl;\n      }\n    });\n\n    websiteServerManager.on('server-error', (websiteName: string, error: Error) => {\n      sendLogToWebsite(websiteName, `‚ùå Server error: ${error.message}`, 'error');\n      showNativeLoadingError(websiteName);\n    });\n\n    eventListenersSetup = true;\n  } catch (error) {\n    console.warn('Server manager event listeners not set up yet (DI not initialized):', error);\n  }\n}\n\n// Don't try to initialize event listeners on module load - wait for DI to be ready\n\n// Help window instance declared at top of file\n\n/**\n * Find an available ephemeral port.\n * @deprecated Use WebsiteServerManager for port allocation\n */\nexport async function findAvailablePort(startPort: number = 8081): Promise<number> {\n  // Delegate to server manager for centralized port management\n  console.warn('findAvailablePort is deprecated, use WebsiteServerManager instead');\n\n  // For backward compatibility, we'll still provide this function\n  // but it should eventually be removed\n  return new Promise((resolve, reject) => {\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const server = require('net').createServer();\n    server.listen(startPort, () => {\n      const port = (server.address() as { port: number } | null)?.port;\n      server.close(() => {\n        if (port) {\n          resolve(port);\n        } else {\n          reject(new Error('Could not determine port'));\n        }\n      });\n    });\n\n    server.on('error', async (err: Error & { code?: string }) => {\n      if (err.code === 'EADDRINUSE') {\n        try {\n          const nextPort = await findAvailablePort(startPort + 1);\n          resolve(nextPort);\n        } catch (nextErr) {\n          reject(nextErr);\n        }\n      } else {\n        reject(err);\n      }\n    });\n  });\n}\n\n/**\n * Create a new dedicated website window for editing and preview\n *\n * Creates a singleton window for the specified website with its own WebContentsView\n * for live preview. Each website gets its own isolated window to enable concurrent\n * editing of multiple websites.\n *\n * If a window already exists for the website and is not destroyed, it will be\n * focused instead of creating a new one.\n * @param websiteName Unique name of the website.\n * @param websitePath Optional file system path to the website directory.\n * @returns The website window BrowserWindow instance.\n * @example\n * ```typescript\n * const websiteWin = createWebsiteWindow('my-blog', '/path/to/my-blog');\n * console.log(websiteWin.getTitle()); // 'my-blog'\n * ```\n */\nexport function createWebsiteWindow(websiteName: string, websitePath?: string): BrowserWindow {\n  // Server manager event listeners are now set up properly in main.ts after DI initialization\n\n  // Check if window already exists for this website\n  const existingWindow = websiteWindows.get(websiteName);\n  if (existingWindow && !existingWindow.window.isDestroyed()) {\n    existingWindow.window.focus();\n    return existingWindow.window;\n  }\n\n  const window = new BrowserWindow({\n    width: 1200,\n    height: 800,\n    title: websiteName,\n    show: false, // Don't show until ready\n    webPreferences: {\n      nodeIntegration: false,\n      contextIsolation: true,\n      preload: path.join(__dirname, '..', 'preload.js'),\n    },\n    titleBarStyle: 'default',\n    // Enable native macOS window tabbing\n    tabbingIdentifier: 'anglesite-website',\n  });\n\n  // Prevent HTML title from overriding window title\n  window.on('page-title-updated', (event) => {\n    event.preventDefault();\n  });\n\n  // Load the website editor template as a file URL to support relative paths\n  const websiteEditorFileUrl = getTemplateFilePath('website-editor');\n  window.loadURL(websiteEditorFileUrl);\n\n  // Add context menu for Anglesite's UI (non-production builds only)\n  if (process.env.NODE_ENV !== 'production') {\n    window.webContents.on('context-menu', (_event, params) => {\n      const contextMenu = new Menu();\n\n      contextMenu.append(\n        new MenuItem({\n          label: 'Inspect Element‚Ä¶',\n          accelerator: 'CmdOrCtrl+Option+I',\n          click: () => {\n            window.webContents.inspectElement(params.x, params.y);\n          },\n        })\n      );\n\n      contextMenu.popup();\n    });\n  }\n\n  // Create preview WebContentsView for website content\n  const webContentsView = new WebContentsView({\n    webPreferences: {\n      nodeIntegration: false,\n      contextIsolation: true,\n    },\n  });\n\n  // Add error handling\n  webContentsView.webContents.on('render-process-gone', (_event, details) => {\n    console.error('Website WebContentsView render process gone:', details);\n    setTimeout(() => {\n      try {\n        webContentsView?.webContents.reload();\n      } catch (error) {\n        console.error('Failed to reload website WebContentsView:', error);\n      }\n    }, 1000);\n  });\n\n  webContentsView.webContents.on('unresponsive', () => {\n    console.error('Website WebContentsView webContents unresponsive');\n  });\n\n  webContentsView.webContents.on('did-fail-load', (_event, errorCode, errorDescription, validatedURL) => {\n    console.error('Website WebContentsView failed to load:', {\n      errorCode,\n      errorDescription,\n      validatedURL,\n    });\n  });\n\n  // Add WebContentsView to window\n  window.contentView.addChildView(webContentsView);\n\n  // Handle window resize\n  window.on('resize', () => {\n    const websiteWindow = websiteWindows.get(websiteName);\n    if (webContentsView && websiteWindow) {\n      const bounds = window.getBounds();\n      // Website editor layout: left panel (240px) + center panel + right panel (280px)\n      const leftPanelWidth = 240;\n      const rightPanelWidth = 280;\n      const toolbarHeight = 48; // Website editor toolbar: 48px height\n      const viewBounds = {\n        x: leftPanelWidth,\n        y: toolbarHeight,\n        width: bounds.width - leftPanelWidth - rightPanelWidth,\n        height: bounds.height - toolbarHeight,\n      };\n\n      webContentsView.setBounds(viewBounds);\n\n      // Also resize loading view if it exists\n      if (websiteWindow.loadingView) {\n        websiteWindow.loadingView.setBounds(viewBounds);\n      }\n    }\n  });\n\n  // Position the preview correctly for website editor layout\n  const bounds = window.getBounds();\n  // Website editor layout: left panel (240px) + center panel + right panel (280px)\n  const leftPanelWidth = 240;\n  const rightPanelWidth = 280;\n  const toolbarHeight = 48; // Website editor toolbar: 48px height\n  const webContentsViewBounds = {\n    x: leftPanelWidth,\n    y: toolbarHeight,\n    width: bounds.width - leftPanelWidth - rightPanelWidth,\n    height: bounds.height - toolbarHeight,\n  };\n  webContentsView.setBounds(webContentsViewBounds);\n\n  // Store website window\n  const websiteWindow: WebsiteWindow = {\n    window,\n    webContentsView,\n    websiteName,\n    websitePath,\n  };\n  websiteWindows.set(websiteName, websiteWindow);\n\n  // Close start screen when first website window is created\n  closeStartScreen();\n\n  // Update menu and server URL when focus changes\n  window.on('focus', () => {\n    // Update the global server URL to match this window's website\n    if (websiteWindow.serverUrl) {\n      setLiveServerUrl(websiteWindow.serverUrl);\n      setCurrentWebsiteName(websiteName);\n    }\n    updateApplicationMenu();\n  });\n\n  window.on('blur', () => {\n    updateApplicationMenu();\n  });\n\n  // Clean up when window is closed\n  window.on('closed', async () => {\n    // Stop the server using the DI-based centralized manager\n    try {\n      const appContext = getGlobalContext();\n      const websiteServerManager = appContext.getService<IWebsiteServerManager>(ServiceKeys.WEBSITE_SERVER_MANAGER);\n      await websiteServerManager.stopServer(websiteName);\n    } catch (error) {\n      console.error(`Error stopping server for ${websiteName}:`, error);\n    }\n\n    // Clean up loading view if it exists\n    const websiteWindow = websiteWindows.get(websiteName);\n    if (websiteWindow?.loadingView && !websiteWindow.loadingView.webContents.isDestroyed()) {\n      try {\n        websiteWindow.loadingView.webContents.close();\n      } catch (error) {\n        console.error(`Error closing loading view for ${websiteName}:`, error);\n      }\n    }\n\n    websiteWindows.delete(websiteName);\n    updateApplicationMenu();\n\n    // Show start screen if this was the last website window\n    if (websiteWindows.size === 0) {\n      showStartScreenIfNeeded();\n    }\n  });\n\n  updateApplicationMenu();\n\n  // Use ready-to-show event as recommended by Electron docs\n  window.once('ready-to-show', () => {\n    if (window && !window.isDestroyed()) {\n      themeManager.applyThemeToWindow(window);\n      window.show();\n    }\n  });\n\n  return window;\n}\n\n/**\n * Start individual server for a website and update its window.\n */\nexport async function startWebsiteServerAndUpdateWindow(websiteName: string, websitePath: string): Promise<void> {\n  const websiteWindow = websiteWindows.get(websiteName);\n  if (!websiteWindow || websiteWindow.window.isDestroyed()) {\n    console.error(`Website window not found for server startup: ${websiteName}`);\n    return;\n  }\n\n  // Show native loading view immediately\n  showNativeLoadingView(websiteName);\n\n  try {\n    sendLogToWebsite(websiteName, `üîÑ Preparing to start server for ${websiteName}...`, 'startup');\n\n    // Use the DI-based centralized server manager to start the server\n    const appContext = getGlobalContext();\n    const websiteServerManager = appContext.getService<IWebsiteServerManager>(ServiceKeys.WEBSITE_SERVER_MANAGER);\n    const serverInfo = await websiteServerManager.startServer(websiteName, websitePath);\n\n    // Get the internal managed server for additional properties\n    const managedServer = websiteServerManager.getServer(websiteName);\n\n    // Update website window with server info\n    if (managedServer) {\n      websiteWindow.managedServer = managedServer;\n      websiteWindow.server = managedServer.server;\n      websiteWindow.eleventyPort = managedServer.port;\n      websiteWindow.serverUrl = managedServer.actualUrl;\n    } else {\n      // Fallback to server info from interface\n      websiteWindow.eleventyPort = serverInfo.port;\n      websiteWindow.serverUrl = serverInfo.url;\n    }\n\n    sendLogToWebsite(websiteName, `‚úÖ Server startup completed!`, 'info');\n\n    // Send website data to the editor window now that server is ready\n    websiteWindow.window.webContents.send('load-website', {\n      name: websiteName,\n      path: websitePath,\n    });\n\n    // Load content in the window with a delay to ensure WebContentsView is ready\n    sendLogToWebsite(websiteName, `üåê Loading website content...`, 'info');\n    setTimeout(() => loadWebsiteContent(websiteName), 1000);\n  } catch (error) {\n    console.error(`Failed to start server for ${websiteName}:`, error);\n    sendLogToWebsite(\n      websiteName,\n      `‚ùå Failed to start server: ${error instanceof Error ? error.message : String(error)}`,\n      'error'\n    );\n    // Show error state in native loading view\n    showNativeLoadingError(websiteName);\n  }\n}\n\n/**\n * Load website content in its window.\n */\nexport function loadWebsiteContent(websiteName: string): void {\n  const websiteWindow = websiteWindows.get(websiteName);\n  if (!websiteWindow || websiteWindow.window.isDestroyed()) {\n    console.error(`Website window not found or destroyed: ${websiteName}`);\n    return;\n  }\n\n  // Don't try to load content if we don't have a server URL\n  if (!websiteWindow.serverUrl) {\n    return;\n  }\n\n  // Simple approach - just load the URL without complex retry logic\n  try {\n    if (\n      websiteWindow.webContentsView &&\n      websiteWindow.webContentsView.webContents &&\n      !websiteWindow.webContentsView.webContents.isDestroyed()\n    ) {\n      // Add event listeners to see what happens\n      websiteWindow.webContentsView.webContents.once('did-finish-load', () => {\n        sendLogToWebsite(websiteName, `üéâ Website loaded successfully!`, 'info');\n        // Hide native loading view when website loads\n        hideNativeLoadingView(websiteName);\n      });\n\n      websiteWindow.webContentsView.webContents.once(\n        'did-fail-load',\n        (_event, errorCode, errorDescription, validatedURL) => {\n          console.error(`WebContentsView failed to load for: ${websiteName}`, {\n            errorCode,\n            errorDescription,\n            validatedURL,\n          });\n          sendLogToWebsite(websiteName, `‚ùå Failed to load website: ${errorDescription}`, 'error');\n          // Show error state in loading view\n          showNativeLoadingError(websiteName);\n        }\n      );\n\n      websiteWindow.webContentsView.webContents.loadURL(websiteWindow.serverUrl);\n      websiteWindow.window.webContents.send('preview-loaded');\n    } else {\n      console.error(`WebContentsView or webContents not available for: ${websiteName}`);\n    }\n  } catch (error) {\n    console.error(`Error loading content for ${websiteName}:`, error);\n  }\n}\n\n/**\n * Get website window reference.\n */\nexport function getWebsiteWindow(websiteName: string): BrowserWindow | null {\n  const websiteWindow = websiteWindows.get(websiteName);\n  return websiteWindow && !websiteWindow.window.isDestroyed() ? websiteWindow.window : null;\n}\n\n/**\n * Returns the complete map of all currently open website windows keyed by website name.\n */\nexport function getAllWebsiteWindows(): Map<string, WebsiteWindow> {\n  return websiteWindows;\n}\n\n/**\n * Get website server by name.\n */\nexport function getWebsiteServer(websiteName: string): WebsiteServer | undefined {\n  try {\n    const appContext = getGlobalContext();\n    const websiteServerManager = appContext.getService<IWebsiteServerManager>(ServiceKeys.WEBSITE_SERVER_MANAGER);\n    const managedServer = websiteServerManager.getServer(websiteName);\n    return managedServer?.server;\n  } catch (error) {\n    console.error('Failed to get website server via DI:', error);\n    return undefined;\n  }\n}\n\n/**\n * Get all currently running website servers mapped by website name.\n * @deprecated Use websiteServerManager.getAllServers() instead\n */\nexport function getAllWebsiteServers(): Map<string, WebsiteServer> {\n  console.warn('getAllWebsiteServers is deprecated, use websiteServerManager.getAllServers() instead');\n  const result = new Map<string, WebsiteServer>();\n\n  try {\n    const appContext = getGlobalContext();\n    const websiteServerManager = appContext.getService<IWebsiteServerManager>(ServiceKeys.WEBSITE_SERVER_MANAGER);\n\n    // Get the internal servers map and iterate over it\n    const allServers = websiteServerManager.getAllServers();\n    for (const [websiteName, managedServer] of allServers.entries()) {\n      if (managedServer && managedServer.server) {\n        result.set(websiteName, managedServer.server as WebsiteServer);\n      }\n    }\n  } catch (error) {\n    console.error('Failed to get all website servers via DI:', error);\n  }\n\n  return result;\n}\n\n/**\n * Save current window states to persistent storage.\n */\nexport function saveWindowStates(): void {\n  const store = getGlobalContext().getService<IStore>(ServiceKeys.STORE);\n  const windowStates: WindowState[] = [];\n\n  // Note: Help window state is no longer persisted since we don't auto-show it on startup\n\n  // Save website window states\n  websiteWindows.forEach((websiteWindow, websiteName) => {\n    if (!websiteWindow.window.isDestroyed()) {\n      const bounds = websiteWindow.window.getBounds();\n      const isMaximized = websiteWindow.window.isMaximized();\n\n      const windowState: WindowState = {\n        websiteName,\n        websitePath: websiteWindow.websitePath,\n        bounds,\n        isMaximized,\n        windowType: websiteWindow.isEditorWindow ? 'editor' : 'preview',\n      };\n\n      windowStates.push(windowState);\n    }\n  });\n\n  store.saveWindowStates(windowStates);\n}\n\n/**\n * Restore website windows from saved states.\n */\nexport async function restoreWindowStates(): Promise<void> {\n  const store = getGlobalContext().getService<IStore>(ServiceKeys.STORE);\n  const windowStates = store.getWindowStates();\n\n  if (windowStates.length === 0) {\n    // Show start screen when no websites are being restored\n    showStartScreenIfNeeded();\n    return;\n  }\n\n  const validWindowStates: WindowState[] = [];\n\n  for (const windowState of windowStates) {\n    try {\n      // Check if website directory exists before attempting restoration\n      const websitePath = windowState.websitePath || getWebsitePath(windowState.websiteName);\n\n      if (!fs.existsSync(websitePath)) {\n        console.log(`Skipping restoration of deleted website: ${windowState.websiteName}`);\n        continue; // Skip this state and don't add to validWindowStates\n      }\n\n      // Restore the website window\n      await restoreWebsiteWindow(windowState);\n\n      // If restoration succeeded, keep this state\n      validWindowStates.push(windowState);\n\n      // Restore window bounds and maximized state after a delay to ensure the window is ready\n      setTimeout(() => {\n        const websiteWindow = websiteWindows.get(windowState.websiteName);\n        if (websiteWindow && !websiteWindow.window.isDestroyed() && windowState.bounds) {\n          if (windowState.isMaximized) {\n            websiteWindow.window.maximize();\n          } else {\n            websiteWindow.window.setBounds(windowState.bounds);\n          }\n        }\n      }, 1000);\n    } catch (error) {\n      console.error(`Failed to restore window for ${windowState.websiteName}:`, error);\n      // Don't add failed states to validWindowStates\n    }\n  }\n\n  // Update the stored window states to remove invalid ones\n  if (validWindowStates.length !== windowStates.length) {\n    console.log(`Cleaned up ${windowStates.length - validWindowStates.length} invalid window states`);\n    store.saveWindowStates(validWindowStates);\n  }\n\n  // Show start screen if no valid windows were restored\n  if (websiteWindows.size === 0) {\n    showStartScreenIfNeeded();\n  }\n}\n\n/**\n * Restore a single website window.\n */\nasync function restoreWebsiteWindow(windowState: WindowState): Promise<void> {\n  try {\n    // Get the website path (directory existence already verified by caller)\n    const websitePath = windowState.websitePath || getWebsitePath(windowState.websiteName);\n\n    // Create the appropriate window type\n    if (windowState.windowType === 'editor') {\n      // Import the window-manager module to access React editor (default)\n      const { openReactWebsiteEditorWindow } = await import('./window-manager');\n      openReactWebsiteEditorWindow(windowState.websiteName, websitePath);\n    } else {\n      // Default to preview window (backward compatibility)\n      createWebsiteWindow(windowState.websiteName, websitePath);\n\n      try {\n        // Start individual server for this restored website\n        await startWebsiteServerAndUpdateWindow(windowState.websiteName, websitePath);\n      } catch (serverError) {\n        console.error(\n          `Failed to start server for ${windowState.websiteName}, window will show fallback content:`,\n          serverError\n        );\n        // Don't throw - let the window exist with fallback content rather than failing completely\n      }\n    }\n  } catch (error) {\n    console.error(`Failed to restore website window for ${windowState.websiteName}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Gracefully closes all open windows (website windows) and saves their states.\n */\nexport async function closeAllWindows(): Promise<void> {\n  // Save window states before closing\n  saveWindowStates();\n\n  // Use the DI-based centralized server manager to stop all servers\n  try {\n    const appContext = getGlobalContext();\n    const websiteServerManager = appContext.getService<IWebsiteServerManager>(ServiceKeys.WEBSITE_SERVER_MANAGER);\n    await websiteServerManager.stopAllServers();\n  } catch (error) {\n    console.error('Error stopping servers during shutdown:', error);\n  }\n\n  // Close all windows\n  websiteWindows.forEach((websiteWindow) => {\n    if (!websiteWindow.window.isDestroyed()) {\n      websiteWindow.window.close();\n    }\n  });\n\n  websiteWindows.clear();\n}\n\n// Start screen window instance declared at top of file\n\n/**\n * Create and show the start screen window.\n */\nexport function createStartScreen(): BrowserWindow {\n  if (startScreenWindow && !startScreenWindow.isDestroyed()) {\n    startScreenWindow.focus();\n    return startScreenWindow;\n  }\n\n  startScreenWindow = new BrowserWindow({\n    width: 1200,\n    height: 800,\n    minWidth: 800,\n    minHeight: 600,\n    title: 'Anglesite',\n    show: false,\n    titleBarStyle: 'hiddenInset',\n    trafficLightPosition: { x: 20, y: 20 },\n    webPreferences: {\n      nodeIntegration: false,\n      contextIsolation: true,\n      preload: path.join(__dirname, '..', 'preload.js'),\n    },\n  });\n\n  // Load the start screen template\n  const startScreenDataUrl = loadTemplateAsDataUrl('start-screen');\n  startScreenWindow.loadURL(startScreenDataUrl);\n\n  startScreenWindow.once('ready-to-show', () => {\n    if (startScreenWindow && !startScreenWindow.isDestroyed()) {\n      themeManager.applyThemeToWindow(startScreenWindow);\n      startScreenWindow.show();\n      startScreenWindow.focus();\n    }\n  });\n\n  startScreenWindow.on('closed', () => {\n    startScreenWindow = null;\n  });\n\n  return startScreenWindow;\n}\n\n/**\n * Close the start screen window if it exists.\n */\nexport function closeStartScreen(): void {\n  if (startScreenWindow && !startScreenWindow.isDestroyed()) {\n    startScreenWindow.close();\n  }\n  startScreenWindow = null;\n}\n\n/**\n * Get the current start screen window.\n */\nexport function getStartScreen(): BrowserWindow | null {\n  return startScreenWindow && !startScreenWindow.isDestroyed() ? startScreenWindow : null;\n}\n\n/**\n * Show the start screen if no windows are open and it's appropriate to do so.\n */\nexport function showStartScreenIfNeeded(): void {\n  // Only show start screen if no website windows are open and no start screen is already showing\n  if (websiteWindows.size === 0 && !getStartScreen()) {\n    createStartScreen();\n  }\n}\n\n/**\n * Add a website editor window to the tracking system.\n * This allows the editor window to be included in window state persistence.\n */\nexport function addWebsiteEditorWindow(\n  websiteName: string,\n  window: BrowserWindow,\n  webContentsView: WebContentsView,\n  websitePath?: string\n): void {\n  const websiteWindow: WebsiteWindow = {\n    window,\n    webContentsView,\n    websiteName,\n    websitePath,\n    // Mark this as an editor window for proper restoration\n    isEditorWindow: true,\n  };\n  websiteWindows.set(websiteName, websiteWindow);\n\n  // Close start screen since we now have a website window\n  closeStartScreen();\n}\n\n/**\n * Remove a website editor window from the tracking system.\n */\nexport function removeWebsiteEditorWindow(websiteName: string): void {\n  websiteWindows.delete(websiteName);\n\n  // Show start screen if no windows remain\n  showStartScreenIfNeeded();\n}\n\n/**\n * Toggle DevTools for the currently focused window (website window).\n */\nexport async function togglePreviewDevTools(): Promise<void> {\n  const focusedWindow = BrowserWindow.getFocusedWindow();\n  if (!focusedWindow) {\n    return;\n  }\n\n  // Check if it's a website window\n  for (const [, websiteWindow] of Array.from(websiteWindows)) {\n    if (websiteWindow.window === focusedWindow) {\n      const webContents = websiteWindow.webContentsView.webContents;\n      if (webContents.isDevToolsOpened()) {\n        webContents.closeDevTools();\n      } else {\n        webContents.openDevTools({ mode: 'detach' });\n      }\n      return;\n    }\n  }\n}\n\n/**\n * Check if a website window is currently focused.\n */\nexport function isWebsiteEditorFocused(): boolean {\n  const focusedWindow = BrowserWindow.getFocusedWindow();\n  if (!focusedWindow) return false;\n\n  // Check if the focused window is any website window\n  for (const [, websiteWindow] of Array.from(websiteWindows)) {\n    if (websiteWindow.window === focusedWindow) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Get the name of the currently focused website project.\n */\nexport function getCurrentWebsiteEditorProject(): string | null {\n  const focusedWindow = BrowserWindow.getFocusedWindow();\n  if (!focusedWindow) return null;\n\n  // Find the website name for the focused window\n  for (const [websiteName, websiteWindow] of Array.from(websiteWindows)) {\n    if (websiteWindow.window === focusedWindow) {\n      return websiteName;\n    }\n  }\n  return null;\n}\n\n/**\n * Show the WebContentsView for preview mode.\n */\nexport function showWebsitePreview(websiteName: string): void {\n  const websiteWindow = websiteWindows.get(websiteName);\n  if (websiteWindow && !websiteWindow.window.isDestroyed()) {\n    websiteWindow.webContentsView.setVisible(true);\n  } else {\n    console.error(`Website window not found for preview show: ${websiteName}`);\n  }\n}\n\n/**\n * Hide the WebContentsView for edit mode.\n */\nexport function hideWebsitePreview(websiteName: string): void {\n  const websiteWindow = websiteWindows.get(websiteName);\n  if (websiteWindow && !websiteWindow.window.isDestroyed()) {\n    websiteWindow.webContentsView.setVisible(false);\n  } else {\n    console.error(`Website window not found for preview hide: ${websiteName}`);\n  }\n}\n\n/**\n * Get the help window instance.\n */\nexport function getHelpWindow(): BrowserWindow | null {\n  return helpWindow;\n}\n\n/**\n * Create and show the help window.\n */\nexport function createHelpWindow(): BrowserWindow {\n  if (helpWindow && !helpWindow.isDestroyed()) {\n    helpWindow.focus();\n    return helpWindow;\n  }\n\n  helpWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    show: false,\n    webPreferences: {\n      nodeIntegration: false,\n      contextIsolation: true,\n    },\n  });\n\n  helpWindow.setTitle('Anglesite');\n\n  // Clean up reference when window is closed\n  helpWindow.on('closed', () => {\n    helpWindow = null;\n  });\n\n  helpWindow.show();\n  return helpWindow;\n}\n"],"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","ignoreList":[]}